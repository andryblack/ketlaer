/* SQLitepp multilanguage object oriented wrapper to sqlite database library
 * Copyright (C) 2004 Alessandro Molina <amol@sig11.org>
 * 
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public License
 * as published by the Free Software Foundation; either version 2.1
 * of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */
 
#ifndef __SQLITEPP_INCLUDED__
#define __SQLITEPP_INCLUDED__

#include "sqlite3.h"
#include <string>
#include <vector>
#include <cstring>

class SQLQuery;

class SQLRow
{
	private:
		SQLQuery *linkedq_;
		bool changed_;
		std::vector<bool> fieldmod_;
		std::vector<std::string> data_;
		std::vector<std::string> was_;

	public:
		SQLRow(SQLQuery *lq);
		void addValue(char const *val);
		bool commit(const std::string& whereclause="");
		char const *get(char const *fieldName);
		char const *getIdx(unsigned int n);
		void set(char const *fieldName, char const *value);
 		void setIdx(unsigned int fieldn, char const *value);
 		unsigned int numberOfColumns();

		inline std::string &operator[](unsigned int n) { return data_[n]; }
		std::string &operator[](std::string const &fname);
};

class SQLQuery
{
	private:
		typedef std::vector<SQLRow*> RowVect;
		typedef std::vector<std::string> StrVect;

		sqlite3 *db_;
		int ncols_;
		StrVect colnames_;
		std::string tablename_;
		RowVect rows_;

	public:
		SQLQuery(sqlite3 *db, char const *tablename);
		~SQLQuery();
		void setColNames(int ncols, char const * const *colnames);
		void addRow(SQLRow *row);
		SQLRow *getRow(unsigned int i);
		char const *tableName();
		char const *nameOfColumn(unsigned int n);
		int numberOfColumns();
		int numberOfTuples();
		int idOf(char const *fieldName);
		sqlite3 *referencedDb();

		inline SQLRow &operator[](unsigned int i) { return *getRow(i); }
};

class SQLDatabase
{
private:
  SQLQuery *query_ris_;
  sqlite3 *db_;
  static int Callback(void *pArg, int argc, char **argv, char **columnNames);
  static void fuzzy_cmp_func(sqlite3_context*, int, sqlite3_value**);

public:
  SQLDatabase(char const *filename);
  ~SQLDatabase();
  SQLQuery *lastQuery() const;
  bool operator!() const;

  void close();

  // returns last autogenerated index
  int last_index();

  bool insert(char const *tablename, std::vector<std::string> const &data);
  SQLQuery *query(char const *tablename, char const *sqlcommand);
  bool execute(char const *sqlcmd);

  bool hasTable(char const *tablename);
  bool createTable(char const * tablename, std::vector<std::string> const &data);
  bool deleteTable(char const * tablename);
  bool renameTable(char const * tablename, char const *newname);
  bool addColumnToTable(char const * tablename, char const *columndef);
  bool mapInsertion(char const * source_table, char const * dest_table);
};

#endif
