#include <sys/types.h>
#include <signal.h>
#include <semaphore.h>

#define private   public
#define protected public

/*common/IPC/include/rpc_common.h*/
class _tagMastership {
public:
  unsigned char systemMode;
  unsigned char videoMode;
  unsigned char audioMode;
  unsigned char masterState;
};

typedef _tagMastership MASTERSHIP;

class _tagRingBufferHeader {
public:
  long unsigned int magic;
  long unsigned int beginAddr;
  long unsigned int size;
  long unsigned int bufferID;
  long unsigned int writePtr;
  long unsigned int numOfReadPtr;
  long unsigned int reserve2;
  long unsigned int reserve3;
  long unsigned int readPtr[4];
  long int fileOffset;
  long int requestedFileOffset;
  long int fileSize;
};

typedef _tagRingBufferHeader RINGBUFFER_HEADER;

enum _tagFatalErrorCode {FATALERR_GENERAL, FATALERR_AUDIO = 268435456, SPDIF_Error_Exceed_Threshold, AUDIO_DRY_OUT, UNKNOWN_FORMAT, UNRECOVERABLE_ERROR, AUDIO_DATA_RECEIVE_ERROR, FATALERR_AUDIO_UNSUPPORTED_SAMPLERATE, AUDIO_DIGITAL_OUT_ONLY, FATALERR_VIDEO = 536870912, FATALERR_VIDEO_VBM_CONFIG, FATALERR_VIDEO_MPEG2DEC_UNSUPPORTED_TRICK_PLAY, FATALERR_VIDEO_MPEG2DEC_UNKNOWN_FRAME_RATE, FATALERR_VIDEO_MPEG2DEC_UNKNOWN_START_CODE, FATALERR_VIDEO_MPEG2DEC_UNKNOWN_PICTURE_CODING_TYPE, FATALERR_VIDEO_MPEG2DEC_UNKNOWN_PICTURE_STRUCTURE, FATALERR_VIDEO_MPEG2DEC_UNKNOWN_EXTENSION, FATALERR_VIDEO_MPEG2DEC_UNSUPPORTED_RESOLUTION, FATALERR_VIDEO_MPEG2DEC_UNSUPPORTED_EXTENSION, FATALERR_VIDEO_MPEG2DEC_INVALID_MARKER_BIT, FATALERR_VIDEO_MPEG4DEC_UNSUPPORTED_GMC, FATALERR_VIDEO_MPEG4DEC_UNKNOWN_START_CODE, FATALERR_VIDEO_MPEG4DEC_UNKNOWN_FRAME_RATE_CODE, FATALERR_VIDEO_MPEG4DEC_WRONG_PIC_TYPE, FATALERR_VIDEO_MPEG4DEC_UNSUPPORTED_NOT_RECTANGULAR, FATALERR_VIDEO_MPEG4DEC_UNSUPPORTED_SPRITE, FATALERR_VIDEO_MPEG4DEC_UNSUPPORTED_NOT8BIT, FATALERR_VIDEO_MPEG4DEC_UNSUPPORTED_SCALABILITY, FATALERR_SYSTEM = 805306368, FATALERR_SYSTEM_TRANSCODE_SERVER_ERROR, FATALERR_SYSTEM_MEDIA_REMOVED, FATALERR_SYSTEM_EIO};

typedef _tagFatalErrorCode FATAL_ERROR_CODE;


/*../include/RPCstruct.h*/
class CLNT_STRUCT {
public:
  int sendMode;
  long int programID;
  long int versionID;
};

class RPC_STRUCT {
public:
  u_long programID;
  u_long versionID;
  u_long procedureID;
  u_long taskID;
  u_long parameterSize;
  u_int context;
};


/*./xdr/types.h*/
typedef int bool_t;


/*./xdr/xdr.h*/
enum xdr_op {XDR_ENCODE, XDR_DECODE, XDR_FREE};

class xdr_ops;

class XDR {
public:
  xdr_op x_op;
  xdr_ops * x_ops;
  caddr_t x_public;
  caddr_t x_private;
  caddr_t x_base;
  u_int x_handy;
};

class xdr_ops {
public:
  bool_t (*x_getlong)(XDR * , long int * );
  bool_t (*x_putlong)(XDR * , long int const * );
  bool_t (*x_getbytes)(XDR * , caddr_t , u_int );
  bool_t (*x_putbytes)(XDR * , char const * , u_int );
  u_int (*x_getpostn)(XDR const * );
  bool_t (*x_setpostn)(XDR * , u_int );
  int32_t * (*x_inline)(XDR * , u_int );
  void (*x_destroy)(XDR * );
  bool_t (*x_getint32)(XDR * , int32_t * );
  bool_t (*x_putint32)(XDR * , int32_t const * );
};

typedef bool_t (*xdrproc_t)(XDR * , void * );


/*common/IPC/include/RPCProxy.h*/
class REG_STRUCT {
public:
  u_long programID;
  u_long versionID;
  void (*func)(RPC_STRUCT * , int , pthread_mutex_t * );
  REG_STRUCT * next;
};

class THREAD_STRUCT {
public:
  REG_STRUCT * pReg;
  pthread_mutex_t * pMutex;
  int flag;
};


/*common/IPC/generate/include/system/AudioRPCBaseDS_data.h*/
enum AUDIO_DEC_TYPE {AUDIO_UNKNOWN_TYPE, AUDIO_MPEG_DECODER_TYPE, AUDIO_AC3_DECODER_TYPE, AUDIO_LPCM_DECODER_TYPE, AUDIO_DTS_DECODER_TYPE, AUDIO_WMA_DECODER_TYPE, AUDIO_AAC_DECODER_TYPE, AUDIO_VORBIS_DECODER_TYPE, AUDIO_DV_DECODER_TYPE, AUDIO_MLP_DECODER_TYPE, AUDIO_DDP_DECODER_TYPE, AUDIO_DTS_HD_DECODER_TYPE, AUDIO_WMA_PRO_DECODER_TYPE, AUDIO_MP4AAC_DECODER_TYPE, AUDIO_MP3_PRO_DECODER_TYPE, AUDIO_MP4HEAAC_DECODER_TYPE, AUDIO_RAW_AAC_DECODER_TYPE, AUDIO_RA1_DECODER_TYPE, AUDIO_RA2_DECODER_TYPE, AUDIO_ATRAC3_DECODER_TYPE, AUDIO_COOK_DECODER_TYPE, AUDIO_LSD_DECODER_TYPE, AUDIO_ADPCM_DECODER_TYPE, AUDIO_FLAC_DECODER_TYPE, AUDIO_ULAW_DECODER_TYPE, AUDIO_ALAW_DECODER_TYPE, AUDIO_ALAC_DECODER_TYPE, AUDIO_DTS_HIGH_RESOLUTION_DECODER_TYPE, AUDIO_DTS_LBR_DECODER_TYPE, AUDIO_DTS_MASTER_AUDIO_DECODER_TYPE, AUDIO_AMR_DECODER_TYPE, AUDIO_MIDI_DECODER_TYPE, AUDIO_APE_DECODER_TYPE, AUDIO_AVS_DECODER_TYPE, AUDIO_NELLYMOSER_DECODER_TYPE, AUDIO_WMA_LOSSLESS_DECODER_TYPE, AUDIO_UNCERTAIN_DECODER_TYPE, AUDIO_UNCERTAIN_HDMV_DECODER_TYPE};

enum AUDIO_MODULE_TYPE {AUDIO_OUT = 7, AUDIO_IN, AUDIO_ENCODER, AUDIO_MPEG_ENCODER, AUDIO_PSEUDO_OUT = 14, AUDIO_PP_OUT, AUDIO_DECODER, AUDIO_UNKNOWN, AUDIO_LPCM_ENCODER = 19, AUDIO_AAC_ENCODER = 21, AUDIO_MP3_ENCODER, AUDIO_RV_PARSER, AUDIO_AC3_ENCODER, AUDIO_VIENNA_OUT, AUDIO_DTS_ENCODER, AUDIO_VP6_PARSER};

enum AUDIO_IO_PIN {BASE_BS_IN, EXT_BS_IN, PCM_IN, BASE_BS_OUT, EXT_BS_OUT, PCM_OUT, SPDIF_IN, SPDIF_OUT, NON_PCM_OUT, INBAND_QUEUE, MESSAGE_QUEUE, MIC_IN, SOUND_EVENT_IN, PCM_OUT1, PCM_OUT2, DWNSTRM_INBAND_QUEUE = 200};

enum ENUM_AUDIO_BILINGUAL_TYPE {ENUM_AUDIO_STEREO, ENUM_AUDIO_MAIN_BILINGUAL, ENUM_AUDIO_SUB_BILINGUAL};

enum ENUM_AUDIO_NIGHTMODE_CFG {ENUM_AUDIO_NIGHTMODE_OFF, ENUM_AUDIO_NIGHTMODE_ON};

class AUDIO_RPC_NIGHTMODE {
public:
  long int instanceID;
  long int cfg;
};

enum ENUM_AUDIO_DAC_SWITCH_CFG {ENUM_AUDIO_DAC_SWITCH_OFF, ENUM_AUDIO_DAC_SWITCH_ON};

enum ENUM_AUDIO_DELAY_DAC_SWITCH_CFG {ENUM_AUDIO_DELAY_DAC_SWITCH_OFF, ENUM_AUDIO_DELAY_DAC_SWITCH_ON};

class AUDIO_RPC_DEC_BITSTREAM_BUFFER {
public:
  long int bsBase;
  long int bsSize;
};

class AUDIO_RPC_FORMAT_INFO {
public:
  u_char result;
  AUDIO_DEC_TYPE Type;
  long int VariableBitRateFlag;
  long int BitRate;
  u_char copyright;
  long int rsv_data[4];
};

class AUDIO_PCM_FORMAT {
public:
  int chnum;
  int samplebit;
  int samplerate;
  u_int dynamicRange;
  u_char emphasis;
  u_char mute;
};

class AUDIO_EXT_BS {
public:
  int exist;
};

class AUDIO_DEC_CFG {
public:
  long int scalehi;
  long int scalelo;
  u_short mode;
  u_short LFEMode;
  u_short dualmono;
  u_short comprMode;
  u_short stereoMode;
};

enum ENCODE_MODE {DUALCHANNEL_1_AND_1, MONO, STEREO, JOINT_STERO};

class AUDIO_ENC_CFG {
public:
  int inputmode;
  int outputmode;
  int DRC1;
  int DRC2;
  int datarate;
  int samprate;
  int LorR;
};

class AUDIO_RPC_INSTANCE {
public:
  long int instanceID;
  long int type;
};

class AUDIO_FRAME_BOUNDARY {
public:
  long int frameBeginPtr;
  long int writeBeginPtr;
  u_long writeSize;
};

class AUDIO_RPC_SEND_LONG {
public:
  long int instanceID;
  long int data;
};

class AUDIO_RPC_SENDPIN_LONG {
public:
  long int instanceID;
  long int pinID;
  long int data;
};

class AUDIO_RPC_SEEK {
public:
  long int instanceID;
  long int speed;
  long int skip;
};

class AUDIO_RPC_PRIVATEINFO {
public:
  long int instanceID;
  long int pData;
  long int length;
};

class AUDIO_RPC_RINGBUFFER {
public:
  long int instanceID;
  long int in_beginPAddrList[8];
  long int in_listSize;
  long int in_bufSize;
  long int in_pinID;
  long int extin_beginPAddrList[8];
  long int extin_listSize;
  long int extin_bufSize;
  long int extin_pinID;
  long int out_beginPAddrList[8];
  long int out_listSize;
  long int out_bufSize;
  long int out_pinID;
};

class AUDIO_RPC_WRITEPACK {
public:
  long int instanceID;
  long int pinID;
  long int writePtr[8];
  int listSize;
  int writeSize;
};

class AUDIO_RPC_READPACK {
public:
  long int instanceID;
  long int pinID;
  long int readPtr[8];
  int listSize;
  int readSize;
};

class AUDIO_RPC_SENDIO {
public:
  long int instanceID;
  int pinID;
};

class AUDIO_RPC_SWITCHAGENT {
public:
  long int instanceID1;
  long int instanceID2;
  AUDIO_PCM_FORMAT pcmFormat;
};

class AUDIO_RPC_PCMFORMAT {
public:
  long int instanceID;
  long int pinID;
  AUDIO_PCM_FORMAT pcmFormat;
};

class AUDIO_RPC_FRAME_BOUNDARY {
public:
  long int instanceID;
  AUDIO_FRAME_BOUNDARY frameBoundary;
};

class AUDIO_RPC_DECCFG {
public:
  long int instanceID;
  AUDIO_DEC_CFG cfg;
};

class AUDIO_RPC_EXTBS_EXIST {
public:
  long int instanceID;
  int extbsExist;
};

class AUDIO_RPC_CONNECTION {
public:
  long int srcInstanceID;
  long int srcPinID;
  long int desInstanceID;
  long int desPinID;
  long int mediaType;
};

class AUDIO_RPC_REFCLOCK {
public:
  long int instanceID;
  long int pRefClockID;
  long int pRefClock;
};

class AUDIO_RPC_PTS_INFO {
public:
  long int instanceID;
  long int pinID;
  int64_t pts;
  long int pWritePointer;
  long int length;
};

class AUDIO_RPC_RINGBUFFER_HEADER {
public:
  long int instanceID;
  long int pinID;
  long int pRingBufferHeaderList[8];
  long int readIdx;
  long int listSize;
};

class AUDIO_RPC_FOCUS {
public:
  long int instanceID;
  long int focusID;
};

enum ENUM_AUDIO_CHANNEL_IN {IN_NULL_CHANNEL, ADC0_LEFT_CHANNEL_EN, ADC0_RIGHT_CHANNEL_EN, ADC1_LEFT_CHANNEL_EN = 4, ADC1_Right_CHANNEL_EN = 8, SPDIF_LEFT_CHANNEL_EN = 16, SPDIF_RIGHT_CHANNEL_EN = 32, ADC2_LEFT_CHANNEL_EN = 64, ADC2_RIGHT_CHANNEL_EN = 128};

enum ENUM_AUDIO_CHANNEL_OUT {OUT_NULL_CHANNEL, LEFT_CENTER_FRONT_CHANNEL_EN, RIGHT_CENTER_FRONT_CHANNEL_EN, CENTER_FRONT_CHANNEL_EN = 4, LFE_CHANNEL_EN = 8, LEFT_SURROUND_CHANNEL_EN = 16, RIGHT_SURROUND_CHANNEL_EN = 32, LEFT_OUTSIDE_FRONT_CHANNEL_EN = 64, RIGHT_OUTSIDE_FRONT_CHANNEL_EN = 128, NON_PCM_OUT_EN = 256, ENABLE_DOWNMIX};

class AUDIO_GENERAL_CONFIG {
public:
  char interface_en;
  char channel_in;
  char count_down_rec_en;
  int count_down_rec_cyc;
};

class AUDIO_SAMPLE_INFO {
public:
  int sampling_rate;
  int PCM_bitnum;
};

class AUDIO_SPDIF_ERROR {
public:
  u_char err_threshold;
  long int errorReportEnable;
};

class AUDIO_ADC_CONFIG {
public:
  AUDIO_GENERAL_CONFIG audioGeneralConfig;
  AUDIO_SAMPLE_INFO sampleInfo;
};

class AUDIO_SPDIF_CONFIG {
public:
  AUDIO_GENERAL_CONFIG audioGeneralConfig;
  AUDIO_SPDIF_ERROR audioSPDIFError;
};

class AUDIO_IN_SOURCE {
public:
  long int instanceID;
  char focus_in;
};

class AUDIO_IN_MUTE_INFO {
public:
  long int instanceID;
  char mute_en;
};

class AUDIO_OUT_COPY_SOURCE {
public:
  long int instanceID;
  int src_channel;
};

class AUDIO_OUT_SPDIF_SOURCE {
public:
  long int instanceID;
  int l_channel;
  int r_channel;
};

class AUDIO_KARAOKE_CONTROL_INFO {
public:
  long int instanceID;
  char speaker_mode;
  char vocal_mode;
};

class LINK_BUFFER {
public:
  u_long magicNumber;
  u_long Reserved;
  u_long Next;
  u_long Size;
  u_char Data[1];
};

class AUDIO_SOUND_EVENT {
public:
  long int instanceID;
  AUDIO_PCM_FORMAT pcmFormat;
  long int endianType;
  long int pBitstreamRB;
  long int iteration;
};

class AUDIO_HDMI_SET {
public:
  u_int HDMI_Frequency;
};

class AUDIO_HDMI_MUTE_INFO {
public:
  long int instanceID;
  char hdmi_mute;
};

class AUDIO_OUT_MUTE_INFO {
public:
  long int instanceID;
  char mute_flag;
};

class AUDIO_CONFIG_ADC {
public:
  long int instanceID;
  AUDIO_ADC_CONFIG adcConfig;
};

class AUDIO_CONFIG_AFC {
public:
  char afc_flag;
};

class AUDIO_DROP_SAMPLE {
public:
  long int instanceID;
  long int drop_pts;
};

class AUDIO_P_W_NOISE_CFG {
public:
  long int instanceID;
  char pink_white_noise_en;
  char pink_white_noise_out_channel[6];
};

class AUDIO_SPECTRUM_CFG {
public:
  long int instanceID;
  char send_spectrum_en;
  int store_spectrum_ptr;
};

class AUDIO_VOLUME_CONTROL {
public:
  long int instanceID;
  char level;
};

class AUDIO_CONFIG_SPDIF {
public:
  long int instanceID;
  AUDIO_SPDIF_CONFIG spdifConfig;
};

class AUDIO_CONFIG_SPDIF_ERR {
public:
  long int instanceID;
  AUDIO_SPDIF_ERROR audioSPDIFError;
};

class AUDIO_BACKDOOR_AI_INIT {
public:
  long int instanceID;
  long int PTSStamp1;
  long int PTSStamp2;
};

class AUDIO_OUT_GENERAL_CONFIG {
public:
  char interface_en;
  char channel_out;
  char count_down_play_en;
  int count_down_play_cyc;
};

class AUDIO_OUT_CS_INFO {
public:
  char non_pcm_valid;
  char non_pcm_format;
  int audio_format;
  char spdif_consumer_use;
  char copy_right;
  char pre_emphasis;
  char stereo_channel;
};

class AUDIO_DAC_CONFIG {
public:
  AUDIO_OUT_GENERAL_CONFIG audioGeneralConfig;
  AUDIO_SAMPLE_INFO sampleInfo;
};

class AUDIO_OUT_SPDIF_CONFIG {
public:
  AUDIO_OUT_GENERAL_CONFIG audioGeneralConfig;
  AUDIO_SAMPLE_INFO sampleInfo;
  AUDIO_OUT_CS_INFO out_cs_info;
};

class AUDIO_CONFIG_DAC_I2S {
public:
  long int instanceID;
  AUDIO_DAC_CONFIG dacConfig;
};

class AUDIO_CONFIG_DAC_SPDIF {
public:
  long int instanceID;
  AUDIO_OUT_SPDIF_CONFIG spdifConfig;
};

class AUDIO_RPC_SPDIF_CHANNEL_STATUS {
public:
  long int instanceID;
  long int ChannelStatus[6];
};

enum ENUM_DVD_AUDIO_ENCODER_OUTPUT_INFO_TYPE {AUDIOENCODER_AudioGEN, AUDIOENCODER_AudioFrameInfo, AUDIOENCODER_TotalInfo, AUDIOENCODER_AudioEOSInfo, AUDIOENCODER_InputEOSInfo};

class AUDIO_RPC_ENC_ELEM_GENERAL_INFO {
public:
  ENUM_DVD_AUDIO_ENCODER_OUTPUT_INFO_TYPE infoType;
  AUDIO_MODULE_TYPE audioEncoderType;
  long int bitRate;
  long int samplingRate;
  ENCODE_MODE mode;
};

class AUDIO_RPC_ENC_ELEM_FRAME_INFO {
public:
  ENUM_DVD_AUDIO_ENCODER_OUTPUT_INFO_TYPE infoType;
  u_int frameNumber;
  u_long PTSH;
  u_long PTSL;
  long int frameSize;
  long int NumberOfFrame;
};

class AUDIO_RPC_DEC_GENERAL_INFO {
public:
  long int instanceID;
  long int samplingRate;
  long int bitRate;
  long int bitWidth;
};

class AUDIO_RPC_DEC_FRAME_INFO {
public:
  long int instanceID;
  long int frameSize;
  long int NumberOfFrame;
  char EOS;
};

class AUDIO_RPC_ERROR {
public:
  long int instanceID;
  long int audioError;
};

class AUDIO_RPC_MASTERSHIP {
public:
  long int instanceID;
  char MasterShip;
};

class AUDIO_RPC_ENC_SOURCEFILE {
public:
  long int instanceID;
  char fileName[20];
  long int length;
};

enum AUDIO_PP_FUNCTION {ENUM_AUDIO_PP_MASTER, ENUM_AUDIO_DEEMPHASIZE, ENUM_AUDIO_PINKNOISE, ENUM_AUDIO_DD_VIRTUAL_SURROUND, ENUM_AUDIO_DD_VIRTUAL_SPEAKER, ENUM_AUDIO_DD_EX, ENUM_AUDIO_REVERB, ENUM_AUDIO_EQUALIZER, ENUM_AUDIO_PROLOGIC2, ENUM_AUDIO_SRS, ENUM_AUDIO_BASS_MANAGER, ENUM_AUDIO_DTS_NEO, ENUM_AUDIO_DOWN_MIX, ENUM_AUDIO_MIXER, ENUM_AUDIO_SRC, ENUM_AUDIO_KEY_SHIFT, ENUM_AUDIO_VOCAL_REMOVER};

class AUDIO_PP_FUNCTION_MODE {
public:
  char AUDIO_PP_FUNCTION_ENA;
  char AUDIO_DEEMPHASIZE_ENA;
  char AUDIO_PINKNOISE_ENA;
  char AUDIO_DD_VIRTUAL_SURROUND_ENA;
  char AUDIO_DD_VIRTUAL_SPEAKER_ENA;
  char AUDIO_DD_EX_ENA;
  char AUDIO_EQUALIZER_ENA;
  char AUDIO_PROLOGIC2_ENA;
  char AUDIO_SRS_ENA;
  char AUDIO_BASS_MANAGER_ENA;
  char AUDIO_DTS_NEO_ENA;
  char AUDIO_DOWN_MIX_ENA;
  char AUDIO_SRC_ENA;
  char AUDIO_VOCAL_REMOVER_ENA[4];
  char AUDIO_REVERB_ENA[4];
  char AUDIO_KEY_SHIFT_ENA[4];
};

class AUDIO_PP_CONFIG {
public:
  long int instanceID;
  AUDIO_PP_FUNCTION_MODE app_config;
};

class AUDIO_PROLOGIC2_MODE {
public:
  char abaldisable_config_flag;
  char chanconfig_config_flag;
  char dimset_config_flag;
  char surfiltenable_config_flag;
  char modeselect_config_flag;
  char panoramaenable_config_flag;
  char fix_pcmscalefac_config_flag;
  char rsinvenable_config_flag;
  char samprateid_config_flag;
  char cwidthset_config_flag;
  long int abaldisable;
  long int chanconfig;
  long int dimset;
  long int surfiltenable;
  long int modeselect;
  long int panoramaenable;
  long int fix_pcmscalefac;
  long int rsinvenable;
  long int samprateid;
  long int cwidthset;
};

enum ENUM_PROLOGIC2_ENA {ENUM_PROLOGIC2_OFF, ENUM_PROLOGIC2_ON};

class AUDIO_PROLOGIC2_CONFIG {
public:
  long int instanceID;
  u_char ena;
  AUDIO_PROLOGIC2_MODE app_pl2_config;
};

enum ENUM_SRC_MODE {ENUM_SRC_POOR, ENUM_SRC_GOOD};

class AUDIO_SRC_CONFIG {
public:
  long int instanceID;
  long int mode;
};

class AUDIO_RPC_MIXER_MODE {
public:
  long int simpleMix;
  long int exclusiveMode;
};

class AUDIO_MIXER_CONFIG {
public:
  long int instanceID;
  AUDIO_RPC_MIXER_MODE app_mixer_config;
};

enum ENUM_EQUALIZER_GAIN {ENUM_EQUALIZER_GAIN_N12DB = -12, ENUM_EQUALIZER_GAIN_N11DB, ENUM_EQUALIZER_GAIN_N10DB, ENUM_EQUALIZER_GAIN_N9DB, ENUM_EQUALIZER_GAIN_N8DB, ENUM_EQUALIZER_GAIN_N7DB, ENUM_EQUALIZER_GAIN_N6DB, ENUM_EQUALIZER_GAIN_N5DB, ENUM_EQUALIZER_GAIN_N4DB, ENUM_EQUALIZER_GAIN_N3DB, ENUM_EQUALIZER_GAIN_N2DB, ENUM_EQUALIZER_GAIN_N1DB, ENUM_EQUALIZER_GAIN_0DB, ENUM_EQUALIZER_GAIN_1DB, ENUM_EQUALIZER_GAIN_2DB, ENUM_EQUALIZER_GAIN_3DB, ENUM_EQUALIZER_GAIN_4DB, ENUM_EQUALIZER_GAIN_5DB, ENUM_EQUALIZER_GAIN_6DB, ENUM_EQUALIZER_GAIN_7DB, ENUM_EQUALIZER_GAIN_8DB, ENUM_EQUALIZER_GAIN_9DB, ENUM_EQUALIZER_GAIN_10DB, ENUM_EQUALIZER_GAIN_11DB, ENUM_EQUALIZER_GAIN_12DB};

enum ENUM_EQUALIZER_MODE {ENUM_EQUALIZER_RESERVED, ENUM_EQUALIZER_MODE_POP, ENUM_EQUALIZER_MODE_LIVE, ENUM_EQUALIZER_MODE_CLUB, ENUM_EQUALIZER_MODE_ROCK, ENUM_EQUALIZER_MODE_BASS, ENUM_EQUALIZER_MODE_TREBLE, ENUM_EQUALIZER_MODE_VOCAL, ENUM_EQUALIZER_MODE_POWERFUL, ENUM_EQUALIZER_MODE_DANCE, ENUM_EQUALIZER_MODE_SOFT, ENUM_EQUALIZER_MODE_PARTY, ENUM_EQUALIZER_MODE_CLASSICAL};

class AUDIO_RPC_EQUALIZER_MODE {
public:
  long int mode;
  long int gain[10];
};

enum ENUM_EQUALIZER_ENA {ENUM_EQUALIZER_OFF, ENUM_EQUALIZER_ON};

enum ENUM_GBL_VAR_EQUALIZER_ID {ENUM_EQUALIZER_PP, ENUM_EQUALIZER_MIC, ENUM_EQUALIZER_AUX};

class AUDIO_EQUALIZER_CONFIG {
public:
  long int instanceID;
  int gbl_var_eq_ID;
  u_char ena;
  AUDIO_RPC_EQUALIZER_MODE app_eq_config;
};

enum ENUM_BASS_MANAGEMENT_CUTOFFFREQ {ENUM_BASS_MANAGEMENT_80_HZ, ENUM_BASS_MANAGEMENT_100_HZ, ENUM_BASS_MANAGEMENT_120_HZ};

enum ENUM_BASS_MANAGEMENT_MODE {ENUM_BASS_MANAGEMENT_MODE_0, ENUM_BASS_MANAGEMENT_MODE_1, ENUM_BASS_MANAGEMENT_MODE_2, ENUM_BASS_MANAGEMENT_MODE_3, ENUM_BASS_MANAGEMENT_SIMPLIFIED, ENUM_BASS_MANAGEMENT_CAR, ENUM_BASS_MANAGEMENT_DIGITAL_0, ENUM_BASS_MANAGEMENT_DIGITAL_1};

enum ENUM_BASS_MANAGEMENT_SUBWOOFER_ENA {ENUM_BASS_MANAGEMENT_SUBWOOFER_OFF, ENUM_BASS_MANAGEMENT_SUBWOOFER_ON};

class AUDIO_RPC_BASS_MANAGEMENT_MODE {
public:
  long int cutoffFreq;
  long int config_mode;
  long int subwoofer_ena;
};

enum ENUM_BASS_MANAGEMENT_ENA {ENUM_BASS_MANAGEMENT_OFF, ENUM_BASS_MANAGEMENT_ON};

class AUDIO_BASS_MANAGEMENT_CONFIG {
public:
  long int instanceID;
  u_char ena;
  AUDIO_RPC_BASS_MANAGEMENT_MODE app_bassmng_config;
};

enum ENUM_KEY_SHIFT_ENA {ENUM_KEY_SHIFT_OFF, ENUM_KEY_SHIFT_ON};

enum ENUM_KEY_SHIFT_STONE {ENUM_KEY_SHIFT_STONE_N12 = -12, ENUM_KEY_SHIFT_STONE_N11, ENUM_KEY_SHIFT_STONE_N10, ENUM_KEY_SHIFT_STONE_N9, ENUM_KEY_SHIFT_STONE_N8, ENUM_KEY_SHIFT_STONE_N7, ENUM_KEY_SHIFT_STONE_N6, ENUM_KEY_SHIFT_STONE_N5, ENUM_KEY_SHIFT_STONE_N4, ENUM_KEY_SHIFT_STONE_N3, ENUM_KEY_SHIFT_STONE_N2, ENUM_KEY_SHIFT_STONE_N1, ENUM_KEY_SHIFT_STONE_0, ENUM_KEY_SHIFT_STONE_1, ENUM_KEY_SHIFT_STONE_2, ENUM_KEY_SHIFT_STONE_3, ENUM_KEY_SHIFT_STONE_4, ENUM_KEY_SHIFT_STONE_5, ENUM_KEY_SHIFT_STONE_6, ENUM_KEY_SHIFT_STONE_7, ENUM_KEY_SHIFT_STONE_8, ENUM_KEY_SHIFT_STONE_9, ENUM_KEY_SHIFT_STONE_10, ENUM_KEY_SHIFT_STONE_11, ENUM_KEY_SHIFT_STONE_12};

class AUDIO_KEY_SHIFT_CONFIG {
public:
  long int instanceID;
  u_char ena;
  long int pinID;
  long int semitone;
};

enum ENUM_REVERB_ENA {ENUM_REVERB_OFF, ENUM_REVERB_ON};

enum ENUM_REVERB_MODE {ENUM_Cathedral_1, ENUM_Cathedral_2, ENUM_Hall, ENUM_Room, ENUM_Basement};

class AUDIO_REVERB_CONFIG {
public:
  long int instanceID;
  u_char ena;
  long int pinID;
  long int reverb_mode;
};

enum ENUM_VOCAL_REMOVER_ENA {ENUM_VOCAL_REMOVER_OFF, ENUM_VOCAL_REMOVER_ON};

enum ENUM_VOCAL_REMOVER_MODE {ENUM_VOCAL_REMOVER_ADVANCED, ENUM_VOCAL_REMOVER_CLASSICAL};

class AUDIO_VOCAL_REMOVER_CONFIG {
public:
  long int instanceID;
  u_char ena;
  long int vr_mode;
  long int pinID;
};

class AUDIO_RPC_DEC_INIT {
public:
  long int temp;
};

class AUDIO_RPC_ENC_INIT {
public:
  long int instanceID;
  long int temp;
};

class AUDIO_RPC_ENC_SET_BITRATE {
public:
  long int instanceID;
  long int bitrate;
};

class AUDIO_RPC_ENC_COMMAND {
public:
  long int instanceID;
  AUDIO_ENC_CFG enc_config;
};

class AUDIO_RPC_DEBUG_MEMORY {
public:
  int AudioFWVersionNumber;
  char audioVersionNumber[12];
  int64_t AudioDemuxPTS;
  int64_t AudioOutPTS;
  int64_t DecoderPTS;
  int64_t FreeRun;
  int contextSwitchTimes;
  int taskNumber;
  int ISRNumber;
  int DSRNumber;
  int EPC;
  int exceptionCause;
  int RPC_Status;
  int Reserve[8];
};

class AUDIO_RPC_ENC_INFO {
public:
  long int temp;
};

class AUDIO_RPC_ENC_DV_MIXER {
public:
  long int temp;
};

class AUDIO_RPC_AO_INIT {
public:
  long int temp;
};

class AUDIO_RPC_AO_SET_EQUALIZER {
public:
  long int temp;
};

class AUDIO_AO_RPC_CONFIG_DELAY_CONTROL {
public:
  long int temp;
};

class AUDIO_RPC_AO_CONFIG_KARAOKE {
public:
  long int temp;
};

class AUDIO_RPC_AO_MIXER {
public:
  long int temp;
};

class AUDIO_RPC_PP_CFG {
public:
  long int temp;
};

class AUDIO_RPC_PP_MUTE {
public:
  long int temp;
};

class AUDIO_RPC_AO_DAC {
public:
  long int temp;
};

class AUDIO_RPC_PP_PROLOGIC {
public:
  long int temp;
};

enum AUDIO_AGC_MODE {ENUM_AUDIO_AGC_OFF, ENUM_AUDIO_AGC_NIGHT_MODE, ENUM_AUDIO_AGC_COMFORT_LISTEN_MODE};

enum AUDIO_CONFIG_CMD_MSG {AUDIO_CONFIG_CMD_SPEAKER, AUDIO_CONFIG_CMD_AGC, AUDIO_CONFIG_CMD_SPDIF, AUDIO_CONFIG_CMD_VOLUME, AUDIO_CONFIG_CMD_MUTE, AUDIO_CONFIG_CMD_AO_MIC, AUDIO_CONFIG_CMD_AO_AUX, AUDIO_CONFIG_CMD_AO_ECHO_REVERB, AUDIO_CONFIG_CMD_AO_MIC1_VOLUME, AUDIO_CONFIG_CMD_AO_MIC2_VOLUME, AUDIO_CONFIG_CMD_AO_DEC_VOLUME, AUDIO_CONFIG_CMD_AO_AUX_VOLUME, AUDIO_CONFIG_CMD_DAC_SWITCH, AUDIO_CONFIG_CMD_DD_DUALMONO, AUDIO_CONFIG_CMD_DD_SCALE, AUDIO_CONFIG_CMD_DD_DOWNMIXMODE, AUDIO_CONFIG_CMD_DD_COMP, AUDIO_CONFIG_CMD_DD_LFE, AUDIO_CONFIG_CMD_DD_STEREOMIX, AUDIO_CONFIG_CMD_DIGITAL_OUT, AUDIO_CONFIG_CMD_EXCLUSIVE, AUDIO_CONFIG_CMD_AC3_SPDIF_RAW, AUDIO_CONFIG_CMD_AC3_HDMI_RAW, AUDIO_CONFIG_CMD_DTS_SPDIF_RAW, AUDIO_CONFIG_CMD_DTS_HDMI_RAW, AUDIO_CONFIG_CMD_MPG_SPDIF_RAW, AUDIO_CONFIG_CMD_MPG_HDMI_RAW, AUDIO_CONFIG_CMD_AAC_SPDIF_RAW, AUDIO_CONFIG_CMD_AAC_HDMI_RAW, AUDIO_CONFIG_CMD_MLP_HDMI_RAW, AUDIO_CONFIG_CMD_DDP_HDMI_RAW, AUDIO_CONFIG_CMD_HDMI_CHANNEL_OUT, AUDIO_CONFIG_CMD_FORCE_CHANNEL_CODEC, AUDIO_CONFIG_CMD_MLP_SPDIF_RAW, AUDIO_CONFIG_CMD_DDP_SPDIF_RAW, AUDIO_CONFIG_CMD_MAX_OUTPUT_SAMPLERATE, AUDIO_CONFIG_CMD_USB_DEVICE_SUPPORT_SAMPLERATE};

class AUDIO_CONFIG_COMMAND {
public:
  AUDIO_CONFIG_CMD_MSG msgID;
  u_int value[6];
};

enum AUDISTRY_FEATURE_CMD_MSG {ENUM_AUDISTRY_BUNDLE, ENUM_AUDISTRY_TWOUP, ENUM_AUDISTRY_STEREOWRAPPER, ENUM_AUDISTRY_HEADSPACE, ENUM_AUDISTRY_LATENIGHT, ENUM_AUDISTRY_VOLUME, ENUM_AUDISTRY_RUMBLER};

enum AUDISTRY_TWOUP_PARAMETER {ENUM_TWOUP_ENABLE, ENUM_TWOUP_DETECTOR};

enum AUDISTRY_HEADSPACE_PARAMETER {ENUM_HEADSPACE_ENABLE, ENUM_HEADSPACE_MODE};

enum AUDISTRY_STEREOWRAPPER_PARAMETER {ENUM_STEREOWRAPPER_ENABLE, ENUM_STEREOWRAPPER_WIDTH};

enum AUDISTRY_LATENIGHT_PARAMETER {ENUM_LATENIGHT_ENABLE, ENUM_LATENIGHT_LEVEL, ENUM_LATENIGHT_DEPTH};

enum AUDISTRY_VOLUME_PARAMETER {ENUM_VOLUME_ENABLE, ENUM_VOLUME_GAIN};

enum AUDISTRY_RUMBLER_PARAMETER {ENUM_RUMBLER_ENABLE, ENUM_RUMBLER_CUTOFF, ENUM_RUMBLER_BOOST, ENUM_RUMBLER_LEVEL};

class AUDISTRY_CONFIG_COMMAND {
public:
  AUDISTRY_FEATURE_CMD_MSG feature;
  u_int parameter;
  int value;
};

enum AUDIO_AO_MIC_CONFIG {ENUM_AUDIO_AO_MIC_OFF, ENUM_AUDIO_AO_MIC1_ON, ENUM_AUDIO_AO_MIC2_ON, ENUM_AUDIO_AO_MIC1_MIC2_ON};

enum AUDIO_AO_AUX_CONFIG {ENUM_AUDIO_AO_AUX_OFF, ENUM_AUDIO_AO_AUX_ON};

enum AUDIO_AO_ECHO_REVERB_CONFIG {ENUM_AUDIO_AO_ECHO_REVERB_OFF, ENUM_AUDIO_AO_ECHO_ON, ENUM_AUDIO_AO_REVERB_ON, ENUM_AUDIO_AO_ECHO_ON_REVERB_ON};

class AUDIO_RPC_ECHO_MODE {
public:
  long int mode;
  long int delay;
  long int fdbk_gain;
};

enum AUDIO_AO_ECHO_DELAY_MODE {ENUM_AUDIO_AO_ECHO_0MS, ENUM_AUDIO_AO_ECHO_10MS = 2, ENUM_AUDIO_AO_ECHO_20MS = 4, ENUM_AUDIO_AO_ECHO_30MS = 6, ENUM_AUDIO_AO_ECHO_40MS = 8, ENUM_AUDIO_AO_ECHO_50MS, ENUM_AUDIO_AO_ECHO_60MS = 11, ENUM_AUDIO_AO_ECHO_70MS = 13, ENUM_AUDIO_AO_ECHO_80MS = 15, ENUM_AUDIO_AO_ECHO_90MS = 17, ENUM_AUDIO_AO_ECHO_100MS = 19, ENUM_AUDIO_AO_ECHO_110MS = 21, ENUM_AUDIO_AO_ECHO_120MS = 23, ENUM_AUDIO_AO_ECHO_130MS, ENUM_AUDIO_AO_ECHO_140MS = 26, ENUM_AUDIO_AO_ECHO_150MS = 28, ENUM_AUDIO_AO_ECHO_160MS = 30, ENUM_AUDIO_AO_ECHO_170MS = 32, ENUM_AUDIO_AO_ECHO_180MS = 34, ENUM_AUDIO_AO_ECHO_190MS = 36, ENUM_AUDIO_AO_ECHO_200MS = 38, ENUM_AUDIO_AO_ECHO_215MS = 41, ENUM_AUDIO_AO_ECHO_230MS = 43, ENUM_AUDIO_AO_ECHO_240MS = 45, ENUM_AUDIO_AO_ECHO_250MS = 47, ENUM_AUDIO_AO_ECHO_260MS = 49, ENUM_AUDIO_AO_ECHO_270MS = 51, ENUM_AUDIO_AO_ECHO_285MS = 54, ENUM_AUDIO_AO_ECHO_300MS = 56, ENUM_AUDIO_AO_ECHO_310MS = 58, ENUM_AUDIO_AO_ECHO_320MS = 60, ENUM_AUDIO_AO_ECHO_330MS = 62};

enum AUDIO_HDMI_CODING_TYPE {AUDIO_HDMI_CODING_TYPE_REFER, AUDIO_HDMI_CODING_TYPE_PCM, AUDIO_HDMI_CODING_TYPE_AC_3, AUDIO_HDMI_CODING_TYPE_MPEG1, AUDIO_HDMI_CODING_TYPE_MP3, AUDIO_HDMI_CODING_TYPE_MPEG2, AUDIO_HDMI_CODING_TYPE_AAC, AUDIO_HDMI_CODING_TYPE_DTS, AUDIO_HDMI_CODING_TYPE_ATRAC, AUDIO_HDMI_CODING_TYPE_ONE_BIT_AUDIO, AUDIO_HDMI_CODING_TYPE_DDP, AUDIO_HDMI_CODING_TYPE_DTSHD, AUDIO_HDMI_CODING_TYPE_MLP};

enum AUDIO_HDMI_CHANNEL_COUNT {AUDIO_HDMI_CHANNEL_COUNT_REFER, AUDIO_HDMI_CHANNEL_COUNT_2, AUDIO_HDMI_CHANNEL_COUNT_3, AUDIO_HDMI_CHANNEL_COUNT_4, AUDIO_HDMI_CHANNEL_COUNT_5, AUDIO_HDMI_CHANNEL_COUNT_6, AUDIO_HDMI_CHANNEL_COUNT_7, AUDIO_HDMI_CHANNEL_COUNT_8};

enum AUDIO_HDMI_SAMPLING_FREQ {AUDIO_HDMI_SAMPLING_FREQ_REFER, AUDIO_HDMI_SAMPLING_FREQ_32K, AUDIO_HDMI_SAMPLING_FREQ_44K1, AUDIO_HDMI_SAMPLING_FREQ_48K, AUDIO_HDMI_SAMPLING_FREQ_88K2, AUDIO_HDMI_SAMPLING_FREQ_96K, AUDIO_HDMI_SAMPLING_FREQ_176K4, AUDIO_HDMI_SAMPLING_FREQ_192K};

enum AUDIO_HDMI_SAMPLE_SIZE {AUDIO_HDMI_SAMPLE_SIZE_REFER, AUDIO_HDMI_SAMPLE_SIZE_16BIT, AUDIO_HDMI_SAMPLE_SIZE_20BIT, AUDIO_HDMI_SAMPLE_SIZE_24BIT};

class AUDIO_HDMI_SETTING_INFO {
public:
  AUDIO_HDMI_CODING_TYPE coding_type;
  AUDIO_HDMI_CHANNEL_COUNT channel_count;
  AUDIO_HDMI_SAMPLING_FREQ sample_freq;
  AUDIO_HDMI_SAMPLE_SIZE sample_size;
  u_int max_bit_rate_divided_by_8KHz;
  u_char lpcm_speaker_allocation[3];
  u_int lpcm_level_shift_value;
  u_char mute;
};

class AUDIO_HDMI_OUT_EDID_DATA {
public:
  long int HDMI_output_enable;
  long int EDID_DATA_addr;
};

class AUDIO_HDMI_OUT_VSDB_DATA {
public:
  long int HDMI_VSDB_delay;
};

enum HDMI_VIDEO_TYPE {ENUM_HDMI_VIDEO_TYPE_SD, ENUM_HDMI_VIDEO_TYPE_HD};

class HDMI_INFO {
public:
  long int video_type;
};

enum AUDIO_VOLUME_LEVEL {ENUM_AUDIO_VOLUME_LEVEL_6_DB, ENUM_AUDIO_VOLUME_LEVEL_5_DB, ENUM_AUDIO_VOLUME_LEVEL_4_DB, ENUM_AUDIO_VOLUME_LEVEL_3_DB, ENUM_AUDIO_VOLUME_LEVEL_2_DB, ENUM_AUDIO_VOLUME_LEVEL_1_DB, ENUM_AUDIO_VOLUME_LEVEL_0_DB, ENUM_AUDIO_VOLUME_LEVEL_N1_DB, ENUM_AUDIO_VOLUME_LEVEL_N2_DB, ENUM_AUDIO_VOLUME_LEVEL_N3_DB, ENUM_AUDIO_VOLUME_LEVEL_N4_DB, ENUM_AUDIO_VOLUME_LEVEL_N5_DB, ENUM_AUDIO_VOLUME_LEVEL_N6_DB, ENUM_AUDIO_VOLUME_LEVEL_N7_DB, ENUM_AUDIO_VOLUME_LEVEL_N8_DB, ENUM_AUDIO_VOLUME_LEVEL_N9_DB, ENUM_AUDIO_VOLUME_LEVEL_N10_DB, ENUM_AUDIO_VOLUME_LEVEL_N11_DB, ENUM_AUDIO_VOLUME_LEVEL_N12_DB, ENUM_AUDIO_VOLUME_LEVEL_N13_DB, ENUM_AUDIO_VOLUME_LEVEL_N14_DB, ENUM_AUDIO_VOLUME_LEVEL_N15_DB, ENUM_AUDIO_VOLUME_LEVEL_N16_DB, ENUM_AUDIO_VOLUME_LEVEL_N17_DB, ENUM_AUDIO_VOLUME_LEVEL_N18_DB, ENUM_AUDIO_VOLUME_LEVEL_N19_DB, ENUM_AUDIO_VOLUME_LEVEL_N20_DB, ENUM_AUDIO_VOLUME_LEVEL_N24_DB, ENUM_AUDIO_VOLUME_LEVEL_N30_DB, ENUM_AUDIO_VOLUME_LEVEL_N38_DB, ENUM_AUDIO_VOLUME_LEVEL_N46_DB, ENUM_AUDIO_VOLUME_LEVEL_MUTE};

enum AUDIO_LICENSE_CONTROL_MASK {BONDING_OPTION_PA, BONDING_OPTION_DA = 15};

class AUDIO_RPC_DEC_FORMAT_INFO {
public:
  AUDIO_DEC_TYPE type;
  u_short nChannels;
  u_short wBitsPerSample;
  long int nSamplesPerSec;
  long int nAvgBytesPerSec;
  long int reserved[4];
};

class AUDIO_LICENSE_STATUS_CONFIG {
public:
  long int HighWord;
  long int LowWord;
};

enum AudioCodecControlBit {AUDIO_UNKNOWN_BIT, AUDIO_MPEG_DECODER_BIT, AUDIO_AC3_DECODER_BIT, AUDIO_LPCM_DECODER_BIT, AUDIO_DTS_DECODER_BIT, AUDIO_WMA_DECODER_BIT, AUDIO_AAC_DECODER_BIT, AUDIO_VORBIS_DECODER_BIT, AUDIO_DV_DECODER_BIT, AUDIO_MLP_DECODER_BIT, AUDIO_DDP_DECODER_BIT, AUDIO_DTS_HD_DECODER_BIT, AUDIO_WMA_PRO_DECODER_BIT, AUDIO_MP4AAC_DECODER_BIT, AUDIO_MP3_PRO_DECODER_BIT, AUDIO_MP4HEAAC_DECODER_BIT, AUDIO_RAW_AAC_DECODER_BIT, AUDIO_RA1_DECODER_BIT, AUDIO_RA2_DECODER_BIT, AUDIO_ATRAC3_DECODER_BIT, AUDIO_COOK_DECODER_BIT, AUDIO_LSD_DECODER_BIT, AUDIO_ADPCM_DECODER_BIT, AUDIO_FLAC_DECODER_BIT, AUDIO_ULAW_DECODER_BIT, AUDIO_ALAW_DECODER_BIT, AUDIO_ALAC_DECODER_BIT, AUDIO_DTS_HIGH_RESOLUTION_DECODER_BIT, AUDIO_DTS_LBR_DECODER_BIT, AUDIO_DTS_MASTER_AUDIO_DECODER_BIT, AUDIO_AMR_DECODER_BIT, AUDIO_MIDI_DECODER_BIT, AUDIO_APE_DECODER_BIT, AUDIO_AVS_DECODER_BIT, AUDIO_NELLYMOSER_DECODER_BIT, AUDIO_WMA_LOSSLESS_DECODER_BIT, AUDIO_AC3_MULTI_CH_ENCODER_BIT = 56, AUDIO_DTS_MULTI_CH_ENCODER_BIT, AUDIO_ADPCM_ENCODER_BIT, AUDIO_LPCM_ENCODER_BIT, AUDIO_AAC_ENCODER_BIT, AUDIO_MP2_ENCODER_BIT, AUDIO_MP3_ENCODER_BIT, AUDIO_AC3_ENCODER_BIT};

enum AUDIO_ENUM_PRIVAETINFO_TO_SYS {ENUM_PRIVATEINFO_AUDIO_HDMV_UNCERTAIN_TYPE, ENUM_PRIVATEINFO_AUDIO_PCM_FORMAT_TYPE};

class AUDIO_RPC_PRIVATEINFO_TO_SYS {
public:
  long int instanceID;
  AUDIO_ENUM_PRIVAETINFO_TO_SYS type;
  long int privateInfo[16];
};

enum AUDIO_ENUM_PRIVAETINFO {ENUM_PRIVATEINFO_AUDIO_FORMAT_PARSER_CAPABILITY, ENUM_PRIVATEINFO_AUDIO_DECODER_CAPABILITY};

class AUDIO_RPC_PRIVATEINFO_PARAMETERS {
public:
  long int instanceID;
  AUDIO_ENUM_PRIVAETINFO type;
  long int privateInfo[16];
};

class AUDIO_RPC_PRIVATEINFO_RETURNVAL {
public:
  long int instanceID;
  long int privateInfo[16];
};

enum AUDIO_ENUM_MAX_OUTPUT_SAMPLERATE {ENUM_MAX_OUTPUT_SAMPLERATE_UNLIMITED, ENUM_MAX_OUTPUT_SAMPLERATE_48000, ENUM_MAX_OUTPUT_SAMPLERATE_96000, ENUM_MAX_OUTPUT_SAMPLERATE_192000};


/*common/IPC/generate/include/system/RPCBaseDS_data.h*/
typedef long int HRESULT;

class RPCRES_LONG {
public:
  HRESULT result;
  long int data;
};

class RPC_CONNECTION {
public:
  long int srcInstanceID;
  long int srcPinID;
  long int desInstanceID;
  long int desPinID;
  long int mediaType;
};

class RPC_SEND_LONG {
public:
  long int instanceID;
  long int pinID;
  long int data;
};


/*common/IPC/generate/include/system/VideoRPCBaseDS_data.h*/
class RPC_RINGBUFFER {
public:
  long int instanceID;
  long int pinID;
  long int readPtrIndex;
  long int pRINGBUFF_HEADER;
};

enum VIDEO_VF_TYPE {VF_TYPE_VIDEO_ENCODER, VF_TYPE_VIDEO_MPEG2_DECODER, VF_TYPE_VIDEO_MPEG4_DECODER, VF_TYPE_VIDEO_DIVX_DECODER, VF_TYPE_VIDEO_H263_DECODER, VF_TYPE_VIDEO_H264_DECODER, VF_TYPE_VIDEO_VC1_DECODER, VF_TYPE_VIDEO_REAL_DECODER, VF_TYPE_VIDEO_JPEG_DECODER, VF_TYPE_VIDEO_MJPEG_DECODER, VF_TYPE_SPU_DECODER, VF_TYPE_DV_DECODER, VF_TYPE_TVD, VF_TYPE_MIXER, VF_TYPE_VIDEO_OUT, VF_TYPE_VIDEO_PSEUDO_VIN, VF_TYPE_VIDEO_PSEUDO_VOUT, VF_TYPE_VIDEO_PSEUDO_MUX, VF_TYPE_TRANSITION, VF_TYPE_MIXER_SUBTITLE, VF_TYPE_THUMBNAIL, VF_TYPE_VIDEO_VP6_DECODER, VF_TYPE_VIDEO_IMAGE_DECODER};

enum VIDEO_RATE_CONTROL_MODE {VIDEO_RATE_CBR, VIDEO_RATE_CBG, VIDEO_RATE_VBR, VIDEO_RATE_CVBR, VIDEO_RATE_NVBR};

enum VIDEO_SOURCE {VIDEO_SOURCE_VIN, VIDEO_SOURCE_DIN};

enum VIDEO_JPEG_ROTATION {VIDEO_ROTATE_0, VIDEO_ROTATE_90, VIDEO_ROTATE_180, VIDEO_ROTATE_270};

enum VIDEO_COLOR_FMT {VIDEO_COLOR_YUV, VIDEO_COLOR_ARGB8888, VIDEO_COLOR_RGB565, VIDEO_COLOR_RGB332, VIDEO_COLOR_RGBA8888, VIDEO_COLOR_HANDLE};

enum VIDEO_TRANSITION_TYPE {VIDEO_TRANSITION_COPY, VIDEO_TRANSITION_CROSSFADE, VIDEO_TRANSITION_LEFT_TO_RIGHT, VIDEO_TRANSITION_TOP_TO_BOTTOM, VIDEO_TRANSITION_WATERFALL, VIDEO_TRANSITION_SNAKE, VIDEO_TRANSITION_RANDOM_BOX, VIDEO_TRANSITION_DIAGONAL, VIDEO_TRANSITION_FADEIN_FADEOUT, VIDEO_TRANSITION_MOVE, VIDEO_TRANSITION_RESERVE1 = 6, VIDEO_TRANSITION_RESERVE2, VIDEO_TRANSITION_RESERVE3, VIDEO_TRANSITION_RESERVE4};

enum VIDEO_FORMAT {VIDEO_FORMAT_NTSC, VIDEO_FORMAT_PAL, VIDEO_FORMAT_NTSC_443, VIDEO_FORMAT_PAL_M, VIDEO_FORMAT_PAL_CN, VIDEO_FORMAT_SECAM, VIDEO_FORMAT_480P, VIDEO_FORMAT_576P, VIDEO_FORMAT_720P50, VIDEO_FORMAT_720P60, VIDEO_FORMAT_720P25, VIDEO_FORMAT_720P30, VIDEO_FORMAT_720I50, VIDEO_FORMAT_720I60, VIDEO_FORMAT_1080I50, VIDEO_FORMAT_1080I60, VIDEO_FORMAT_1080P50, VIDEO_FORMAT_1080P60};

enum VIDEO_STREAM_TYPE {VIDEO_STREAM_MPEG1, VIDEO_STREAM_MPEG2, VIDEO_STREAM_MPEG4, VIDEO_STREAM_DIVX3, VIDEO_STREAM_H263, VIDEO_STREAM_H264, VIDEO_STREAM_VC1, VIDEO_STREAM_REALVIDEO, VIDEO_STREAM_DV, VIDEO_STREAM_MJPEG, VIDEO_STREAM_VP6, VIDEO_STREAM_UNKNOWN};

enum VIDEO_DECODER_CC_BYPASS_MODE {VIDEODECODER_CC_DROP, VIDEODECODER_CC_BYPASS, VIDEODECODER_CC_DECODE};

enum ENUM_DVD_VIDEO_ENCODER_OUTPUT_INFO_TYPE {VIDEOENCODER_VideoGEN, VIDEOENCODER_VideoFrameInfo, VIDEOENCODER_VideoVBID_WSS_Info, VIDEOENCODER_VideoEndOfStream_Info, VIDEOENCODER_Input_EndOfStream_Info, VIDEOENCODER_VideoPauseInfo, VIDEOENCODER_AutoPauseInfo, VIDEOENCODER_TotalInfo};

enum ENUM_VIDEO_ENCODER_RC_MODE {VIDEOENCODER_CBR, VIDEOENCODER_VBR, VIDEOENCODER_CVBR, VIDEOENCODER_TotalRCMode};

enum VO_STANDARD {VO_STANDARD_NTSC_M, VO_STANDARD_NTSC_J, VO_STANDARD_NTSC_443, VO_STANDARD_PAL_B, VO_STANDARD_PAL_D, VO_STANDARD_PAL_G, VO_STANDARD_PAL_H, VO_STANDARD_PAL_I, VO_STANDARD_PAL_N, VO_STANDARD_PAL_NC, VO_STANDARD_PAL_M, VO_STANDARD_PAL_60, VO_STANDARD_SECAM, VO_STANDARD_HDTV_720P_60, VO_STANDARD_HDTV_720P_50, VO_STANDARD_HDTV_720P_30, VO_STANDARD_HDTV_720P_25, VO_STANDARD_HDTV_720P_24, VO_STANDARD_HDTV_1080I_60, VO_STANDARD_HDTV_1080I_50, VO_STANDARD_HDTV_1080P_30, VO_STANDARD_HDTV_1080P_25, VO_STANDARD_HDTV_1080P_24, VO_STANDARD_VGA, VO_STANDARD_SVGA, VO_STANDARD_HDTV_1080P_60, VO_STANDARD_HDTV_1080P_50, VO_STANDARD_HDTV_1080I_59, VO_STANDARD_HDTV_720P_59, VO_STANDARD_HDTV_1080P_23};

enum VO_PEDESTAL_TYPE {VO_PEDESTAL_TYPE_300_700_ON, VO_PEDESTAL_TYPE_300_700_OFF, VO_PEDESTAL_TYPE_286_714_ON, VO_PEDESTAL_TYPE_286_714_OFF};

enum VO_TV_TYPE {VO_TV_TYPE_4_BY_3, VO_TV_TYPE_16_BY_9_FIXED, VO_TV_TYPE_16_BY_9_AUTO, VO_TV_TYPE_16_BY_10};

enum VO_HDMI_MODE {VO_DVI_ON, VO_HDMI_ON, VO_HDMI_OFF};

enum VO_HDMI_AUDIO_SAMPLE_FREQ {VO_HDMI_AUDIO_NULL, VO_HDMI_AUDIO_32K, VO_HDMI_AUDIO_44_1K, VO_HDMI_AUDIO_48K, VO_HDMI_AUDIO_88_2K, VO_HDMI_AUDIO_96K, VO_HDMI_AUDIO_176_4K, VO_HDMI_AUDIO_192K};

enum VO_HDMI_COLOR_FMT {VO_HDMI_RGB444, VO_HDMI_YCbCr422, VO_HDMI_YCbCr444};

enum VO_VBI_ASPECT_RATIO {VO_VBI_ASPECT_RATIO_RESEVED_0, VO_VBI_ASPECT_RATIO_14_BY_9_LB_CENTER, VO_VBI_ASPECT_RATIO_14_BY_9_LB_TOP, VO_VBI_ASPECT_RATIO_RESEVED_3, VO_VBI_ASPECT_RATIO_16_BY_9_LB_TOP, VO_VBI_ASPECT_RATIO_RESEVED_5, VO_VBI_ASPECT_RATIO_RESEVED_6, VO_VBI_ASPECT_RATIO_16_BY_9, VO_VBI_ASPECT_RATIO_4_BY_3, VO_VBI_ASPECT_RATIO_RESEVED_9, VO_VBI_ASPECT_RATIO_RESEVED_10, VO_VBI_ASPECT_RATIO_16_BY_9_LB_CENTER, VO_VBI_ASPECT_RATIO_RESEVED_12, VO_VBI_ASPECT_RATIO_LT_16_BY_9_LB_CENTER, VO_VBI_ASPECT_RATIO_14_BY_9};

enum VO_VBI_COPY_MODE {VO_VBI_COPY_MODE_COPY_FREE, VO_VBI_COPY_MODE_RESERVE, VO_VBI_COPY_MODE_COPY_ONCE, VO_VBI_COPY_MODE_COPY_NONE};

enum VO_VBI_APS {VO_VBI_APS_OFF, VO_VBI_APS_TYPE_1, VO_VBI_APS_TYPE_2, VO_VBI_APS_TYPE_3};

enum VO_VBI_SUBTITLE_MODE {VO_VBI_SUBTITLE_MODE_NONE, VO_VBI_SUBTITLE_MODE_INSIDE, VO_VBI_SUBTITLE_MODE_OUTSIDE, VO_VBI_SUBTITLE_MODE_RESERVED};

enum VO_VIDEO_PLANE {VO_VIDEO_PLANE_V1, VO_VIDEO_PLANE_V2, VO_VIDEO_PLANE_NONE};

enum VO_RESCALE_MODE {VO_RESCALE_MODE_KEEP_AR_AUTO, VO_RESCALE_MODE_KEEP_AR_LB_CNTR, VO_RESCALE_MODE_KEEP_AR_LB_TOP, VO_RESCALE_MODE_KEEP_AR_PS_CNTR, VO_RESCALE_MODE_KEEP_AR_PS_AUTO, VO_RESCALE_MODE_FULL_SCALE, VO_RESCALE_MODE_USER_DEFINE};

enum VO_DEINT_MODE {VO_DEINT_MODE_BOB, VO_DEINT_MODE_WEAVE, VO_DEINT_MODE_MADI, VO_DEINT_MODE_MADI_SNGLDIR, VO_DEINT_MODE_MCOMP, VO_DEINT_MODE_FILM, VO_DEINT_MODE_AUTO};

enum VO_OSD_LPF_TYPE {VO_OSD_LPF_TYPE_DROP, VO_OSD_LPF_TYPE_FILTER, VO_OSD_LPF_TYPE_AVERAGE};

enum VO_OSD_COLOR_FORMAT {VO_OSD_COLOR_FORMAT_2BIT, VO_OSD_COLOR_FORMAT_4BIT, VO_OSD_COLOR_FORMAT_8BIT, VO_OSD_COLOR_FORMAT_RGB332, VO_OSD_COLOR_FORMAT_RGB565, VO_OSD_COLOR_FORMAT_ARGB1555, VO_OSD_COLOR_FORMAT_ARGB4444, VO_OSD_COLOR_FORMAT_ARGB8888, VO_OSD_COLOR_FORMAT_Reserved0, VO_OSD_COLOR_FORMAT_Reserved1, VO_OSD_COLOR_FORMAT_Reserved2, VO_OSD_COLOR_FORMAT_YCBCRA4444, VO_OSD_COLOR_FORMAT_YCBCRA8888, VO_OSD_COLOR_FORMAT_RGBA5551, VO_OSD_COLOR_FORMAT_RGBA4444, VO_OSD_COLOR_FORMAT_RGBA8888, VO_OSD_COLOR_FORMAT_420, VO_OSD_COLOR_FORMAT_422, VO_OSD_COLOR_FORMAT_RGB323, VO_OSD_COLOR_FORMAT_RGB233, VO_OSD_COLOR_FORMAT_RGB556, VO_OSD_COLOR_FORMAT_RGB655};

enum VO_OSD_RGB_ORDER {VO_OSD_COLOR_RGB, VO_OSD_COLOR_BGR, VO_OSD_COLOR_GRB, VO_OSD_COLOR_GBR, VO_OSD_COLOR_RBG, VO_OSD_COLOR_BRG};

enum VO_GRAPHIC_PLANE {VO_GRAPHIC_OSD, VO_GRAPHIC_SUB1, VO_GRAPHIC_SUB2};

enum VO_GRAPHIC_STORAGE_MODE {VO_GRAPHIC_BLOCK, VO_GRAPHIC_SEQUENTIAL};

enum PVIN_MODE {PVIN_MODE_FIELD, PVIN_MODE_FRAME};

class VO_COLOR {
public:
  u_char c1;
  u_char c2;
  u_char c3;
  u_char isRGB;
};

class VO_RECTANGLE {
public:
  short int x;
  short int y;
  u_short width;
  u_short height;
};

class VO_SUBPIC_COLORMAP {
public:
  u_char alpha3;
  u_char alpha2;
  u_char alpha1;
  u_char alpha0;
  u_char color3;
  u_char color2;
  u_char color1;
  u_char color0;
};

enum SP_STREAM_TYPE {SP_DVD_TYPE, SP_DIVX_TYPE, SP_DIVX_MENU_TYPE, SP_DVB_SUBTITLE_TYPE, SP_DVB_TT_TYPE, SP_ATSC_CC_TYPE, SP_SRT_TYPE, SP_SSA_TYPE, SP_DIVX_XSUB_PLUS_TYPE, SP_DVD_FOR_DIVX_TYPE, SP_BD_SUBTITLE_TYPE};

enum ENUM_TVD_VIDEO_FORMAT {TVD_VIDEO_AUTO_DETECT, TVD_VIDEO_ZNTSC, TVD_VIDEO_ZNTSC_443, TVD_VIDEO_ZPAL_I, TVD_VIDEO_ZPAL_M, TVD_VIDEO_ZPAL_CN, TVD_VIDEO_ZSECAM, TVD_VIDEO_480P, TVD_VIDEO_576P, TVD_VIDEO_720P50, TVD_VIDEO_720P60, TVD_VIDEO_1080I50, TVD_VIDEO_1080I60, TVD_VIDEO_1080P50, TVD_VIDEO_1080P60};

enum ENUM_TVD_INPUT_FORMAT {TVD_INFMT_CVBS0_TUNER, TVD_INFMT_CVBS1, TVD_INFMT_CVBS2, TVD_INFMT_SVIDEO0, TVD_INFMT_SVIDEO1, TVD_INFMT_YPbPr0, TVD_INFMT_YPbPr1, TVD_INFMT_SCART, TVD_INFMT_YPbPrM, TVD_INFMT_SCART_CVBS, TVD_INFMT_SCART_RGB};

enum ENUM_TVD_YC_SEP_MODE {TVD_YC_SEP_1D2D_ADAPTIVE, TVD_YC_SEP_3D_ADAPTIVE, TVD_YC_SEP_3D_FIXED};

enum ENUM_TVD_VBI_DATA {VBI_DATA_VPS, VBI_DATA_CC, VBI_DATA_CC_EXT, VBI_DATA_TT, VBI_DATA_TT_EXT, VBI_DATA_WSS, VBI_DATA_TIME, VBI_DATA_CGMSA, VBI_DATA_MACROVISION};

enum TVE_BOARD_TYPE {TVE_BOARD_CLASSIC_TYPE, TVE_BOARD_EXTERNAL_SCART_TYPE, TVE_BOARD_AVHDD_TYPE, TVE_BOARD_CUSTOM_1_TYPE, TVE_BOARD_CUSTOM_2_TYPE, TVE_BOARD_CUSTOM_3_TYPE, TVE_BOARD_CUSTOM_4_TYPE, TVE_BOARD_CUSTOM_5_TYPE, TVE_BOARD_CUSTOM_6_TYPE, TVE_BOARD_CUSTOM_7_TYPE, TVE_BOARD_CUSTOM_8_TYPE, TVE_BOARD_CUSTOM_9_TYPE};

enum VIDEO_BUFFER_TYPE {VIDEO_BUFFER_SD, VIDEO_BUFFER_HD, VIDEO_BUFFER_HD_DIVX, VIDEO_BUFFER_RM_CIF, VIDEO_BUFFER_USER_DEFINE};

enum VIDEO_DNR_MODE {VIDEO_DNR_OFF, VIDEO_DNR_AUTO, VIDEO_DNR_DEMO};

enum VIDEO_CODEC_CONTROL_BIT {VIDEO_MPEG2_ENCODER_BIT = 41, VIDEO_MPEG4_ENCODER_BIT, VIDEO_MPEG2_DECODER_BIT, VIDEO_MPEG4_DECODER_BIT, VIDEO_DIVX_DECODER_BIT, VIDEO_REALVIDEO_DECODER_BIT, VIDEO_H263_DECODER_BIT, VIDEO_MJPEG_DECODER_BIT, VIDEO_H264_DECODER_BIT, VIDEO_VC1_DECODER_BIT, VIDEO_DV_DECODER_BIT};

enum VIDEO_PHOTO_DEC_JPEG_CTRL {JPEG_ENABLE, JPEG_DISABLE, JPEG_NO_PROGRESSIVE};

enum VIDEO_PHOTO_DEC_BITMAP_CTRL {BITMAP_ENABLE, BITMAP_DISABLE};

enum VIDEO_PHOTO_DEC_TIFF_CTRL {TIFF_ENABLE, TIFF_DISABLE};

enum VIDEO_PHOTO_DEC_GIF_CTRL {GIF_ENABLE, GIF_DISABLE, GIF_NO_ANIMATION};

enum VIDEO_PHOTO_DEC_PNG_CTRL {PNG_ENABLE, PNG_DISABLE};


/*common/IPC/generate/include/system/VideoRPC_Agent_data.h*/
class VIDEO_RPC_ENC_ELEM_GEN_INFO {
public:
  ENUM_DVD_VIDEO_ENCODER_OUTPUT_INFO_TYPE infoType;
  u_char videoInputSource;
  u_char encoderType;
  u_char TVSystemFormat;
  u_char videoRCMode;
  int horizontalResolusion;
  u_int video_STD_buffer_size;
  u_int init_STD_buffer_fullness;
  u_int videoBitRate;
  u_char gop_M;
  u_char gop_N;
  u_char numOfGOPsPerVOBU;
};

class VIDEO_RPC_ENC_ELEM_FRAME_INFO {
public:
  ENUM_DVD_VIDEO_ENCODER_OUTPUT_INFO_TYPE infoType;
  u_int pictureNumber;
  u_char pictureType;
  u_char topFieldFirst;
  u_char numOfField;
  u_char newScene;
  u_int PTShigh;
  u_int PTSlow;
  u_int DTShigh;
  u_int DTSlow;
  u_int VBIData;
  u_int VBVfullness;
  u_char resumedVideoFrame;
  u_char newVOBUStart;
  u_char KeyFrame;
  u_char AGCDetection;
  u_int CCData;
  u_int CCStatus;
  int frameSize;
};

class VIDEO_RPC_ENDOFSTREAM {
public:
  long int SP_instanceID;
};

class VIDEO_RPC_DEC_JPEG_INFO {
public:
  long int instanceID;
  long int destWidth;
  long int destHeight;
  long int eventID;
  long int reserved2;
  long int reserved3;
};

class VIDEO_RPC_DEC_JPEG_CTRL {
public:
  long int decodedWidth;
  long int decodedHeight;
  long int bitstreamEnd;
  long int cancel;
  long int status;
  long int orgJpegWidth;
  long int orgJpegHeight;
  long int croppedJpegX;
  long int croppedJpegY;
  long int croppedJpegWidth;
  long int croppedJpegHeight;
  VIDEO_JPEG_ROTATION orientation;
  long int percentage;
  long int reserved3;
  long int JPEG_CTRL;
  long int BITMAP_CTRL;
  long int TIFF_CTRL;
  long int GIF_CTRL;
  long int PNG_CTRL;
  long int Format1_CTRL;
  long int Format2_CTRL;
  long int Format3_CTRL;
};

class VIDEO_RPC_ENC_VBID_WSS_INFO {
public:
  ENUM_DVD_VIDEO_ENCODER_OUTPUT_INFO_TYPE infoType;
  ENUM_TVD_VIDEO_FORMAT video_format;
  u_int flg_no_signal;
  u_int copy_protected;
  VO_VBI_ASPECT_RATIO vbi_aspect_ratio;
};

class VIDEO_RPC_ENC_PAUSE_INFO {
public:
  ENUM_DVD_VIDEO_ENCODER_OUTPUT_INFO_TYPE infoType;
  u_int pausedPTSHigh;
  u_int pausedPTSLow;
  u_int pausedDTSHigh;
  u_int pausedDTSLow;
  u_int resumedPTSHigh;
  u_int resumedPTSLow;
  u_int resumedDTSHigh;
  u_int resumedDTSLow;
  u_char pictureType;
};

class VIDEO_RPC_ENC_AUTOPAUSE_INFO {
public:
  ENUM_DVD_VIDEO_ENCODER_OUTPUT_INFO_TYPE infoType;
  u_char isFinish;
};

class VIDEO_RPC_DEC_ERROR_INFO {
public:
  long int instanceID;
  long int errCode;
};

class VIDEO_RPC_ENC_AUTOPAUSE {
public:
  long int instanceID;
  u_char isFinish;
};

class VIDEO_RPC_TRANSITION_EFFECT_CTRL {
public:
  long int cancel;
  long int percentage;
};


/*common/IPC/generate/include/system/VideoRPC_System_data.h*/
class VIDEO_INIT_DATA {
public:
  TVE_BOARD_TYPE boardType;
};

class VIDEO_CONFIG_DATA {
public:
  VIDEO_BUFFER_TYPE videoBufferType;
};

class VIDEO_RPC_INSTANCE {
public:
  VIDEO_VF_TYPE type;
};

class VIDEO_RPC_PVIN_INIT {
public:
  long int instanceID;
  PVIN_MODE mode;
  char path[64];
  int max_pic_count;
  int period;
  int width;
  int height;
};

class VIDEO_RPC_PVIN_SCHEDULE_EOS {
public:
  long int instanceID;
  int frame_number_after;
};

class VIDEO_RPC_MUX_SET_FILE {
public:
  long int instanceID;
  char fname[64];
};

class VIDEO_RPC_PVOUT_INIT {
public:
  long int instanceID;
  long int frame_width;
  long int frame_height;
  long int max_pic_count;
};

class VIDEO_RPC_SET_REFCLOCK {
public:
  long int instanceID;
  long int pRefClock;
};

class VIDEO_RPC_REQUEST_BUFFER {
public:
  long int width;
  long int height;
};

class VIDEO_RPC_DEC_SET_SPEED {
public:
  long int instanceID;
  long int displaySpeed;
  long int decodeSkip;
};

class VIDEO_RPC_DEC_SET_ERR_CONCEALMENT_LEVEL {
public:
  long int instanceID;
  long int errConcealmentLevel;
};

class VIDEO_RPC_DEC_INIT {
public:
  long int instanceID;
  VIDEO_STREAM_TYPE type;
  VIDEO_RPC_DEC_SET_SPEED set_speed;
};

class VIDEO_RPC_DEC_SET_DEBLOCK {
public:
  long int instanceID;
  u_char enable;
};

class VIDEO_RPC_DEC_BITSTREAM_BUFFER {
public:
  long int bsBase;
  long int bsSize;
};

class VIDEO_RPC_DEC_BV_RESULT {
public:
  long int bitRate;
  long int type;
};

class VIDEO_RPC_DEC_SEQ_INFO {
public:
  long int hor_size;
  long int ver_size;
  long int aspect_ratio;
  long int frame_rate;
  long int bit_rate;
  long int vbv_buf_size;
  long int profile_level;
  long int chroma_format;
  long int video_format;
  long int disp_hor_size;
  long int disp_ver_size;
};

class VIDEO_MEM_CHUNK {
public:
  long int address;
  long int size;
};

class VIDEO_RPC_VIDEO_FREE_MEMORY {
public:
  long int numMemChunks;
  VIDEO_MEM_CHUNK memChunk[8];
};

class VIDEO_RPC_DEC_CC_BYPASS_MODE {
public:
  long int instanceID;
  VIDEO_DECODER_CC_BYPASS_MODE cc_mode;
};

class VIDEO_RPC_DEC_SET_DNR {
public:
  long int instanceID;
  VIDEO_DNR_MODE dnr_mode;
};

class VIDEO_RPC_DEC_CAPABILITY {
public:
  long int HighWord;
  long int LowWord;
};

class VIDEO_RPC_THUMBNAIL_SET_VSCALER_OUTFORMAT {
public:
  long int instanceID;
  u_int ThumbAckAddr;
  VIDEO_COLOR_FMT colorFormat;
  u_int pTargetLuma;
  u_int pTargetChroma;
  u_int pitch;
  u_int targetRectX;
  u_int targetRectY;
  u_int targetRectWidth;
  u_int targetRectHeight;
  u_int alpha;
};

class VIDEO_RPC_THUMBNAIL_SET_THRESHOLD {
public:
  long int instanceID;
  long int threshold;
};

class VIDEO_RPC_THUMBNAIL_SET_STARTPIC {
public:
  long int instanceID;
  long int startPicNum;
  long int endPicNum;
};

class VIDEO_RPC_ENC_INIT {
public:
  long int instanceID;
  long int type;
  VIDEO_FORMAT videoFormat;
  VIDEO_SOURCE videoSource;
};

class VIDEO_RPC_ENC_VIDEOSOURCE {
public:
  long int instanceID;
  VIDEO_SOURCE videoSource;
};

class VIDEO_RPC_ENC_SOURCEFILE {
public:
  long int instanceID;
  char fileName[20];
  long int length;
};

class VIDEO_RPC_ENC_SET_RESOLUTION {
public:
  long int instanceID;
  long int hres;
  int SIF;
};

class VIDEO_RPC_ENC_SET_BITRATE {
public:
  long int instanceID;
  VIDEO_RATE_CONTROL_MODE rateControlMode;
  long int peakBitRate;
  long int aveBitRate;
  long int bitBufferSize;
  long int initBufferFullness;
  long int time;
};

class VIDEO_RPC_ENC_SET_GOPSTRUCTURE {
public:
  long int instanceID;
  long int M;
  long int N;
};

class VIDEO_RPC_ENC_SET_NEWGOPONSC {
public:
  long int instanceID;
  long int newGOPOnSceneChange;
};

class VIDEO_RPC_ENC_SET_INV32DETECT {
public:
  long int instanceID;
  long int inverseTelecineDetection;
};

class VIDEO_RPC_ENC_SET_TF {
public:
  long int instanceID;
  long int mode;
  long int strength;
};

class VIDEO_RPC_ENC_SET_NR {
public:
  long int instanceID;
  long int Hstrength;
  long int Vstrength;
};

class VIDEO_RPC_ENC_SET_ENCFORMAT {
public:
  long int instanceID;
  VIDEO_STREAM_TYPE streamType;
};

class VIDEO_RPC_ENC_CONFIG_CCDATA {
public:
  long int instanceID;
  long int option;
  long int CCDataSize;
  u_char CCDAta[128];
};

class VIDEO_RPC_ENC_SET_CLOSEDGOPFREQ {
public:
  long int instanceID;
  long int closedGOPFreq;
};

class VIDEO_RPC_ENC_START_ENC {
public:
  long int instanceID;
  long int startMode;
};

class VIDEO_RPC_ENC_PAUSE_ENC {
public:
  long int instanceID;
  long int pausedAtVOBU;
};

class VIDEO_RPC_ENC_STOP_ENC {
public:
  long int instanceID;
};

class VIDEO_RPC_ENC_CONFIG_VOBU {
public:
  long int instanceID;
  long int minGOPs;
};

class VIDEO_RPC_ENC_MPEG_I_ENC {
public:
  long int pIFrameStream;
  long int pTargetLuma;
  long int pTargetChroma;
  long int width;
  long int height;
  long int maxSize;
};

class VIDEO_RPC_ENC_SET_VBID_WSS_FREQ {
public:
  long int instanceID;
  long int numOfField;
};

class VIDEO_RPC_ENC_SET_VBV {
public:
  long int instanceID;
  long int vbv_buf_size;
  long int vbv_buf_fullness;
};

class VIDEO_RPC_ENC_SET_NONREALTIME {
public:
  long int instanceID;
  u_char bNonRealTime;
};

class VIDEO_RPC_ENC_SEND_TVD_INFO {
public:
  long int instanceID;
  VIDEO_FORMAT videoFormat;
  long int Macrovision;
  long int reserved0;
  long int reserved1;
};

class VIDEO_RPC_VOUT_SET_VIDEO_STANDARD {
public:
  VO_STANDARD standard;
  u_char enProg;
  u_char enDIF;
  u_char enCompRGB;
  VO_PEDESTAL_TYPE pedType;
};

class VIDEO_RPC_VOUT_CONFIG_VIDEO_STANDARD {
public:
  VO_STANDARD standard;
  u_char enProg;
  u_char enDIF;
  u_char enCompRGB;
  VO_PEDESTAL_TYPE pedType;
  u_int dataInt0;
  u_int dataInt1;
};

class VIDEO_RPC_VOUT_SET_HDMI {
public:
  VO_HDMI_MODE hdmiMode;
  VO_HDMI_AUDIO_SAMPLE_FREQ audioSampleFreq;
  u_char audioChannelCount;
};

class VIDEO_RPC_VOUT_CONFIG_HDMI {
public:
  VO_HDMI_MODE hdmiMode;
  VO_HDMI_AUDIO_SAMPLE_FREQ audioSampleFreq;
  VO_HDMI_COLOR_FMT colorFmt;
  u_char audioChannelCount;
};

class VIDEO_RPC_VOUT_CONFIG_HDMI_INFO_FRAME {
public:
  VO_HDMI_MODE hdmiMode;
  VO_HDMI_AUDIO_SAMPLE_FREQ audioSampleFreq;
  u_char audioChannelCount;
  u_char dataByte1;
  u_char dataByte2;
  u_char dataByte3;
  u_char dataByte4;
  u_char dataByte5;
  u_int dataInt0;
  long int reserved1;
  long int reserved2;
  long int reserved3;
  long int reserved4;
};

class VIDEO_RPC_VOUT_SET_BKGRND {
public:
  VO_COLOR bgColor;
  u_char bgEnable;
};

class VIDEO_RPC_VOUT_SET_CC {
public:
  u_char enCC_odd;
  u_char enCC_even;
};

class VIDEO_RPC_VOUT_SET_APS {
public:
  u_char enExt;
  VO_VBI_APS APS;
};

class VIDEO_RPC_VOUT_SET_COPY_MODE {
public:
  u_char enExt;
  VO_VBI_COPY_MODE copyMode;
};

class VIDEO_RPC_VOUT_SET_AR {
public:
  u_char enExt;
  VO_VBI_ASPECT_RATIO aspectRatio;
};

class VIDEO_RPC_VOUT_CONFIG_DISP_WIN {
public:
  VO_VIDEO_PLANE videoPlane;
  VO_RECTANGLE videoWin;
  VO_RECTANGLE borderWin;
  VO_COLOR borderColor;
  u_char enBorder;
};

class VIDEO_RPC_VOUT_SET_RESCALE_MODE {
public:
  VO_VIDEO_PLANE videoPlane;
  VO_RESCALE_MODE rescaleMode;
  VO_RECTANGLE rescaleWindow;
  u_char delayExec;
};

class VIDEO_RPC_VOUT_SET_DEINT_MODE {
public:
  VO_VIDEO_PLANE videoPlane;
  VO_DEINT_MODE deintMode;
};

class VIDEO_RPC_VOUT_ZOOM {
public:
  VO_VIDEO_PLANE videoPlane;
  VO_RECTANGLE zoomWin;
};

class VIDEO_RPC_VOUT_PAN_ZOOM {
public:
  VO_VIDEO_PLANE videoPlane;
  VO_RECTANGLE zoomWinStart;
  VO_RECTANGLE zoomWinEnd;
  u_short time;
};

class VIDEO_RPC_VOUT_CONFIG_OSD {
public:
  VO_OSD_LPF_TYPE lpfType;
  short int RGB2YUVcoeff[12];
};

class VIDEO_RPC_VOUT_CONFIG_OSD_PALETTE {
public:
  u_char paletteIndex;
  long int pPalette;
};

class VIDEO_RPC_VOUT_CREATE_OSD_WIN {
public:
  VO_RECTANGLE winPos;
  VO_OSD_COLOR_FORMAT colorFmt;
  int colorKey;
  u_char alpha;
};

class VIDEO_RPC_VOUT_SET_OSD_WIN_PALETTE {
public:
  u_char winID;
  u_char paletteIndex;
};

class VIDEO_RPC_VOUT_MODIFY_OSD_WIN {
public:
  u_char winID;
  u_char reqMask;
  VO_RECTANGLE winPos;
  VO_OSD_COLOR_FORMAT colorFmt;
  int colorKey;
  u_char alpha;
  u_short startX;
  u_short startY;
  u_short imgPitch;
  long int pImage;
  u_char go;
};

class VIDEO_RPC_VOUT_DRAW_OSD_WIN {
public:
  u_short winID;
  u_short startX;
  u_short startY;
  u_short imgPitch;
  long int pImage;
  u_char go;
};

class VIDEO_RPC_VOUT_HIDE_OSD_WIN {
public:
  u_short winID;
  u_char go;
};

class VIDEO_RPC_VOUT_DELETE_OSD_WIN {
public:
  u_short winID;
  u_char go;
};

class VIDEO_RPC_VOUT_CONFIG_OSD_CANVAS {
public:
  VO_RECTANGLE srcWin;
  VO_RECTANGLE dispWin;
  u_char go;
};

class VIDEO_RPC_VOUT_CONFIG_CURSOR {
public:
  char alpha;
  char colorKey;
  VO_COLOR colorMap[4];
  VO_OSD_LPF_TYPE lpfType;
  long int pCursorImg;
};

class VIDEO_RPC_VOUT_DRAW_CURSOR {
public:
  u_short x;
  u_short y;
};

class VIDEO_RPC_VOUT_CONFIG_COLOR_MATRIX {
public:
  short int ColorMatrixCoeff[12];
};

class VIDEO_RPC_VOUT_CONFIG_GRAPHIC_CANVAS {
public:
  VO_GRAPHIC_PLANE plane;
  VO_RECTANGLE srcWin;
  VO_RECTANGLE dispWin;
  u_char go;
};

class VIDEO_RPC_VOUT_CREATE_GRAPHIC_WIN {
public:
  VO_GRAPHIC_PLANE plane;
  VO_RECTANGLE winPos;
  VO_OSD_COLOR_FORMAT colorFmt;
  VO_OSD_RGB_ORDER rgbOrder;
  int colorKey;
  u_char alpha;
  u_char reserved;
};

class VIDEO_RPC_VOUT_MODIFY_GRAPHIC_WIN {
public:
  VO_GRAPHIC_PLANE plane;
  u_char winID;
  u_char reqMask;
  VO_RECTANGLE winPos;
  VO_OSD_COLOR_FORMAT colorFmt;
  VO_OSD_RGB_ORDER rgbOrder;
  int colorKey;
  u_char alpha;
  VO_GRAPHIC_STORAGE_MODE storageMode;
  u_char paletteIndex;
  u_char compressed;
  u_char interlace_Frame;
  u_char bottomField;
  u_short startX[4];
  u_short startY[4];
  u_short imgPitch[4];
  long int pImage[4];
  u_char reserved;
  u_char go;
};

class VIDEO_RPC_VOUT_DRAW_GRAPHIC_WIN {
public:
  VO_GRAPHIC_PLANE plane;
  u_short winID;
  VO_GRAPHIC_STORAGE_MODE storageMode;
  u_char paletteIndex;
  u_char compressed;
  u_char interlace_Frame;
  u_char bottomField;
  u_short startX[4];
  u_short startY[4];
  u_short imgPitch[4];
  long int pImage[4];
  u_char reserved;
  u_char go;
};

class VIDEO_RPC_VOUT_HIDE_GRAPHIC_WIN {
public:
  VO_GRAPHIC_PLANE plane;
  u_short winID;
  u_char go;
};

class VIDEO_RPC_VOUT_DELETE_GRAPHIC_WIN {
public:
  VO_GRAPHIC_PLANE plane;
  u_short winID;
  u_char go;
};

class VIDEO_RPC_VOUT_DISPLAY_GRAPHIC_WIN {
public:
  long int x;
  long int y;
  long int width;
  long int height;
  VO_OSD_COLOR_FORMAT colorFmt;
  VO_OSD_RGB_ORDER rgbOrder;
  long int colorKey;
  long int alpha;
  VO_GRAPHIC_STORAGE_MODE storageMode;
  long int paletteIndex;
  long int compressed;
  long int interlace_Frame;
  long int bottomField;
  long int startX[4];
  long int startY[4];
  long int imgPitch[4];
  long int pImage[4];
  long int reserved0;
  long int reserved1;
};

class VIDEO_RPC_VOUT_DISPLAY_GRAPHIC {
public:
  VO_GRAPHIC_PLANE plane;
  u_char osdNum;
  long int pGraphic;
};

class VIDEO_RPC_VOUT_VIDEO_CAPTURE {
public:
  VO_OSD_COLOR_FORMAT colorFmt;
  long int pImage;
  u_short imgPitch;
  u_short startX;
  u_short startY;
  u_short width;
  u_short height;
};

class VIDEO_RPC_VO_FILTER_DISPLAY {
public:
  long int instanceID;
  VO_VIDEO_PLANE videoPlane;
  u_char zeroBuffer;
  u_char realTimeSrc;
};

class VIDEO_RPC_VO_FILTER_HIDE {
public:
  long int instanceID;
  VO_VIDEO_PLANE videoPlane;
};

class VIDEO_RPC_VO_FILTER_DISP_BD_COLOR {
public:
  long int instanceID;
  VO_VIDEO_PLANE videoPlane;
};

class VIDEO_RPC_VO_FILTER_SET_SPEED {
public:
  long int instanceID;
  long int speed;
};

class VIDEO_RPC_VO_FILTER_SHOW_STILL_PIC {
public:
  long int instanceID;
  long int lumaAddr;
  long int lumaPitch;
  long int chromaAddr;
  long int chromaPitch;
  long int width;
  long int height;
};

class VIDEO_RPC_VO_FILTER_FILL_VIDEO_BORDER {
public:
  long int instanceID;
  long int border;
  long int num_pixels;
  VO_COLOR fillColor;
};

class VIDEO_RPC_VO_FILTER_SET_FAST_DISPLAY {
public:
  long int instanceID;
  u_char enFastDisplay;
  u_char count;
};

class VIDEO_RPC_SUBPIC_DEC_ENABLE_SUBPIC {
public:
  long int instanceID;
  u_char alwaysOnTop;
};

class VIDEO_RPC_SUBPIC_DEC_CONFIGURE {
public:
  long int instanceID;
  u_short fullWidth;
  u_short fullHeight;
  SP_STREAM_TYPE streamType;
};

class VIDEO_RPC_SUBPIC_DEC_PAGE {
public:
  long int instanceID;
  u_short page_id_composition;
  u_short page_id_ancillary;
};

class VIDEO_RPC_TVD_CONFIG {
public:
  ENUM_TVD_VIDEO_FORMAT video_fmt;
  ENUM_TVD_INPUT_FORMAT input_fmt;
  ENUM_TVD_YC_SEP_MODE ycsep_mode;
  u_char default_ycsep;
  u_char mv_workaround_en;
};

class VIDEO_RPC_TVD_VIDEO_FORMAT {
public:
  ENUM_TVD_VIDEO_FORMAT format;
};

class VIDEO_RPC_TVD_INPUT_FORMAT {
public:
  ENUM_TVD_INPUT_FORMAT format;
};

class VIDEO_RPC_TVD_YC_SEP_MODE {
public:
  ENUM_TVD_YC_SEP_MODE mode;
};

class VIDEO_RPC_TVD_VBI_CTRL {
public:
  u_char VBI_slicer_en;
};

class VIDEO_RPC_TVD_ADJ_CONTRAST {
public:
  u_char val;
};

class VIDEO_RPC_TVD_ADJ_BRIGHTNESS {
public:
  u_char value;
};


class VIDEO_RPC_TVD_ADJ_SATURATION {
public:
  u_char value;
};

class VIDEO_RPC_TVD_ADJ_HUE {
public:
  u_char value;
};

class VIDEO_RPC_TVD_BLUE_MODE {
public:
  u_char mode;
};

class VIDEO_RPC_VIN_ADJ_SCALE_COEF {
public:
  u_short y_32th_coef;
  u_short c_16th_coef;
};

class CHANNEL_RES {
public:
  HRESULT hr;
  ENUM_TVD_VIDEO_FORMAT fmt;
};

class VIDEO_RPC_JPEG_DEC {
public:
  long int colorFormat;
  long int pBitstreamRB;
  long int pTargetLuma;
  long int pTargetChroma;
  long int pitch;
  long int targetRectX;
  long int targetRectY;
  long int targetRectWidth;
  long int targetRectHeight;
  long int centerToTargetRect;
  VIDEO_JPEG_ROTATION rotation;
  long int srcRectAlignmentRatioX;
  long int srcRectAlignmentRatioY;
  long int srcRectZoomFactor;
  long int initOption;
  long int pSharedJpegDecCtrl;
  long int useWholePictureOnly;
  long int ScaleUpToRect;
  long int FillBlackInRect;
  long int SmoothLevel;
};

class VIDEO_RPC_JPEG_DEC_BATCH {
public:
  long int number;
  long int structure_addr;
};

class VIDEO_RPC_TRANSITION_EFFECT {
public:
  long int instantID;
  long int YBufID_A;
  long int YBufID_B;
  long int CBufID_A;
  long int CBufID_B;
  long int width;
  long int height;
  long int type;
  long int frame_num;
  long int PTS_inc;
  long int start_x;
  long int start_y;
  long int start_width;
  long int start_height;
  long int end_x;
  long int end_y;
  long int end_width;
  long int end_height;
  long int pSharedTransEffCtrl;
};

class VIDEO_RPC_DEBUG_MEMORY {
public:
  long int videoFirmwareVersion;
};


/*common/IPC/generate/src/system/AudioRPCBaseDS_xdr.c*/
extern "C" bool_t xdr_AUDIO_DEC_TYPE(XDR * xdrs, AUDIO_DEC_TYPE * objp);

extern "C" bool_t xdr_AUDIO_MODULE_TYPE(XDR * xdrs, AUDIO_MODULE_TYPE * objp);

extern "C" bool_t xdr_AUDIO_IO_PIN(XDR * xdrs, AUDIO_IO_PIN * objp);

extern "C" bool_t xdr_ENUM_AUDIO_BILINGUAL_TYPE(XDR * xdrs, ENUM_AUDIO_BILINGUAL_TYPE * objp);

extern "C" bool_t xdr_ENUM_AUDIO_NIGHTMODE_CFG(XDR * xdrs, ENUM_AUDIO_NIGHTMODE_CFG * objp);

extern "C" bool_t xdr_AUDIO_RPC_NIGHTMODE(XDR * xdrs, AUDIO_RPC_NIGHTMODE * objp);

extern "C" bool_t xdr_ENUM_AUDIO_DAC_SWITCH_CFG(XDR * xdrs, ENUM_AUDIO_DAC_SWITCH_CFG * objp);

extern "C" bool_t xdr_ENUM_AUDIO_DELAY_DAC_SWITCH_CFG(XDR * xdrs, ENUM_AUDIO_DELAY_DAC_SWITCH_CFG * objp);

extern "C" bool_t xdr_AUDIO_RPC_DEC_BITSTREAM_BUFFER(XDR * xdrs, AUDIO_RPC_DEC_BITSTREAM_BUFFER * objp);

extern "C" bool_t xdr_AUDIO_RPC_FORMAT_INFO(XDR * xdrs, AUDIO_RPC_FORMAT_INFO * objp);

extern "C" bool_t xdr_AUDIO_PCM_FORMAT(XDR * xdrs, AUDIO_PCM_FORMAT * objp);

extern "C" bool_t xdr_AUDIO_EXT_BS(XDR * xdrs, AUDIO_EXT_BS * objp);

extern "C" bool_t xdr_AUDIO_DEC_CFG(XDR * xdrs, AUDIO_DEC_CFG * objp);

extern "C" bool_t xdr_ENCODE_MODE(XDR * xdrs, ENCODE_MODE * objp);

extern "C" bool_t xdr_AUDIO_ENC_CFG(XDR * xdrs, AUDIO_ENC_CFG * objp);

extern "C" bool_t xdr_AUDIO_RPC_INSTANCE(XDR * xdrs, AUDIO_RPC_INSTANCE * objp);

extern "C" bool_t xdr_AUDIO_FRAME_BOUNDARY(XDR * xdrs, AUDIO_FRAME_BOUNDARY * objp);

extern "C" bool_t xdr_AUDIO_RPC_SEND_LONG(XDR * xdrs, AUDIO_RPC_SEND_LONG * objp);

extern "C" bool_t xdr_AUDIO_RPC_SENDPIN_LONG(XDR * xdrs, AUDIO_RPC_SENDPIN_LONG * objp);

extern "C" bool_t xdr_AUDIO_RPC_SEEK(XDR * xdrs, AUDIO_RPC_SEEK * objp);

extern "C" bool_t xdr_AUDIO_RPC_PRIVATEINFO(XDR * xdrs, AUDIO_RPC_PRIVATEINFO * objp);

extern "C" bool_t xdr_AUDIO_RPC_RINGBUFFER(XDR * xdrs, AUDIO_RPC_RINGBUFFER * objp);

extern "C" bool_t xdr_AUDIO_RPC_WRITEPACK(XDR * xdrs, AUDIO_RPC_WRITEPACK * objp);

extern "C" bool_t xdr_AUDIO_RPC_READPACK(XDR * xdrs, AUDIO_RPC_READPACK * objp);

extern "C" bool_t xdr_AUDIO_RPC_SENDIO(XDR * xdrs, AUDIO_RPC_SENDIO * objp);

extern "C" bool_t xdr_AUDIO_RPC_SWITCHAGENT(XDR * xdrs, AUDIO_RPC_SWITCHAGENT * objp);

extern "C" bool_t xdr_AUDIO_RPC_PCMFORMAT(XDR * xdrs, AUDIO_RPC_PCMFORMAT * objp);

extern "C" bool_t xdr_AUDIO_RPC_FRAME_BOUNDARY(XDR * xdrs, AUDIO_RPC_FRAME_BOUNDARY * objp);

extern "C" bool_t xdr_AUDIO_RPC_DECCFG(XDR * xdrs, AUDIO_RPC_DECCFG * objp);

extern "C" bool_t xdr_AUDIO_RPC_EXTBS_EXIST(XDR * xdrs, AUDIO_RPC_EXTBS_EXIST * objp);

extern "C" bool_t xdr_AUDIO_RPC_CONNECTION(XDR * xdrs, AUDIO_RPC_CONNECTION * objp);

extern "C" bool_t xdr_AUDIO_RPC_REFCLOCK(XDR * xdrs, AUDIO_RPC_REFCLOCK * objp);

extern "C" bool_t xdr_AUDIO_RPC_PTS_INFO(XDR * xdrs, AUDIO_RPC_PTS_INFO * objp);

extern "C" bool_t xdr_AUDIO_RPC_RINGBUFFER_HEADER(XDR * xdrs, AUDIO_RPC_RINGBUFFER_HEADER * objp);

extern "C" bool_t xdr_AUDIO_RPC_FOCUS(XDR * xdrs, AUDIO_RPC_FOCUS * objp);

extern "C" bool_t xdr_ENUM_AUDIO_CHANNEL_IN(XDR * xdrs, ENUM_AUDIO_CHANNEL_IN * objp);

extern "C" bool_t xdr_ENUM_AUDIO_CHANNEL_OUT(XDR * xdrs, ENUM_AUDIO_CHANNEL_OUT * objp);

extern "C" bool_t xdr_AUDIO_GENERAL_CONFIG(XDR * xdrs, AUDIO_GENERAL_CONFIG * objp);

extern "C" bool_t xdr_AUDIO_SAMPLE_INFO(XDR * xdrs, AUDIO_SAMPLE_INFO * objp);

extern "C" bool_t xdr_AUDIO_SPDIF_ERROR(XDR * xdrs, AUDIO_SPDIF_ERROR * objp);

extern "C" bool_t xdr_AUDIO_ADC_CONFIG(XDR * xdrs, AUDIO_ADC_CONFIG * objp);

extern "C" bool_t xdr_AUDIO_SPDIF_CONFIG(XDR * xdrs, AUDIO_SPDIF_CONFIG * objp);

extern "C" bool_t xdr_AUDIO_IN_SOURCE(XDR * xdrs, AUDIO_IN_SOURCE * objp);

extern "C" bool_t xdr_AUDIO_IN_MUTE_INFO(XDR * xdrs, AUDIO_IN_MUTE_INFO * objp);

extern "C" bool_t xdr_AUDIO_OUT_COPY_SOURCE(XDR * xdrs, AUDIO_OUT_COPY_SOURCE * objp);

extern "C" bool_t xdr_AUDIO_OUT_SPDIF_SOURCE(XDR * xdrs, AUDIO_OUT_SPDIF_SOURCE * objp);

extern "C" bool_t xdr_AUDIO_KARAOKE_CONTROL_INFO(XDR * xdrs, AUDIO_KARAOKE_CONTROL_INFO * objp);

extern "C" bool_t xdr_LINK_BUFFER(XDR * xdrs, LINK_BUFFER * objp);

extern "C" bool_t xdr_AUDIO_SOUND_EVENT(XDR * xdrs, AUDIO_SOUND_EVENT * objp);

extern "C" bool_t xdr_AUDIO_HDMI_SET(XDR * xdrs, AUDIO_HDMI_SET * objp);

extern "C" bool_t xdr_AUDIO_HDMI_MUTE_INFO(XDR * xdrs, AUDIO_HDMI_MUTE_INFO * objp);

extern "C" bool_t xdr_AUDIO_OUT_MUTE_INFO(XDR * xdrs, AUDIO_OUT_MUTE_INFO * objp);

extern "C" bool_t xdr_AUDIO_CONFIG_ADC(XDR * xdrs, AUDIO_CONFIG_ADC * objp);

extern "C" bool_t xdr_AUDIO_CONFIG_AFC(XDR * xdrs, AUDIO_CONFIG_AFC * objp);

extern "C" bool_t xdr_AUDIO_DROP_SAMPLE(XDR * xdrs, AUDIO_DROP_SAMPLE * objp);

extern "C" bool_t xdr_AUDIO_P_W_NOISE_CFG(XDR * xdrs, AUDIO_P_W_NOISE_CFG * objp);

extern "C" bool_t xdr_AUDIO_SPECTRUM_CFG(XDR * xdrs, AUDIO_SPECTRUM_CFG * objp);

extern "C" bool_t xdr_AUDIO_VOLUME_CONTROL(XDR * xdrs, AUDIO_VOLUME_CONTROL * objp);

extern "C" bool_t xdr_AUDIO_CONFIG_SPDIF(XDR * xdrs, AUDIO_CONFIG_SPDIF * objp);

extern "C" bool_t xdr_AUDIO_CONFIG_SPDIF_ERR(XDR * xdrs, AUDIO_CONFIG_SPDIF_ERR * objp);

extern "C" bool_t xdr_AUDIO_BACKDOOR_AI_INIT(XDR * xdrs, AUDIO_BACKDOOR_AI_INIT * objp);

extern "C" bool_t xdr_AUDIO_OUT_GENERAL_CONFIG(XDR * xdrs, AUDIO_OUT_GENERAL_CONFIG * objp);

extern "C" bool_t xdr_AUDIO_OUT_CS_INFO(XDR * xdrs, AUDIO_OUT_CS_INFO * objp);

extern "C" bool_t xdr_AUDIO_DAC_CONFIG(XDR * xdrs, AUDIO_DAC_CONFIG * objp);

extern "C" bool_t xdr_AUDIO_OUT_SPDIF_CONFIG(XDR * xdrs, AUDIO_OUT_SPDIF_CONFIG * objp);

extern "C" bool_t xdr_AUDIO_CONFIG_DAC_I2S(XDR * xdrs, AUDIO_CONFIG_DAC_I2S * objp);

extern "C" bool_t xdr_AUDIO_CONFIG_DAC_SPDIF(XDR * xdrs, AUDIO_CONFIG_DAC_SPDIF * objp);

extern "C" bool_t xdr_AUDIO_RPC_SPDIF_CHANNEL_STATUS(XDR * xdrs, AUDIO_RPC_SPDIF_CHANNEL_STATUS * objp);

extern "C" bool_t xdr_ENUM_DVD_AUDIO_ENCODER_OUTPUT_INFO_TYPE(XDR * xdrs, ENUM_DVD_AUDIO_ENCODER_OUTPUT_INFO_TYPE * objp);

extern "C" bool_t xdr_AUDIO_RPC_ENC_ELEM_GENERAL_INFO(XDR * xdrs, AUDIO_RPC_ENC_ELEM_GENERAL_INFO * objp);

extern "C" bool_t xdr_AUDIO_RPC_ENC_ELEM_FRAME_INFO(XDR * xdrs, AUDIO_RPC_ENC_ELEM_FRAME_INFO * objp);

extern "C" bool_t xdr_AUDIO_RPC_DEC_GENERAL_INFO(XDR * xdrs, AUDIO_RPC_DEC_GENERAL_INFO * objp);

extern "C" bool_t xdr_AUDIO_RPC_DEC_FRAME_INFO(XDR * xdrs, AUDIO_RPC_DEC_FRAME_INFO * objp);

extern "C" bool_t xdr_AUDIO_RPC_ERROR(XDR * xdrs, AUDIO_RPC_ERROR * objp);

extern "C" bool_t xdr_AUDIO_RPC_MASTERSHIP(XDR * xdrs, AUDIO_RPC_MASTERSHIP * objp);

extern "C" bool_t xdr_AUDIO_RPC_ENC_SOURCEFILE(XDR * xdrs, AUDIO_RPC_ENC_SOURCEFILE * objp);

extern "C" bool_t xdr_AUDIO_PP_FUNCTION(XDR * xdrs, AUDIO_PP_FUNCTION * objp);

extern "C" bool_t xdr_AUDIO_PP_FUNCTION_MODE(XDR * xdrs, AUDIO_PP_FUNCTION_MODE * objp);

extern "C" bool_t xdr_AUDIO_PP_CONFIG(XDR * xdrs, AUDIO_PP_CONFIG * objp);

extern "C" bool_t xdr_AUDIO_PROLOGIC2_MODE(XDR * xdrs, AUDIO_PROLOGIC2_MODE * objp);

extern "C" bool_t xdr_ENUM_PROLOGIC2_ENA(XDR * xdrs, ENUM_PROLOGIC2_ENA * objp);

extern "C" bool_t xdr_AUDIO_PROLOGIC2_CONFIG(XDR * xdrs, AUDIO_PROLOGIC2_CONFIG * objp);

extern "C" bool_t xdr_ENUM_SRC_MODE(XDR * xdrs, ENUM_SRC_MODE * objp);

extern "C" bool_t xdr_AUDIO_SRC_CONFIG(XDR * xdrs, AUDIO_SRC_CONFIG * objp);

extern "C" bool_t xdr_AUDIO_RPC_MIXER_MODE(XDR * xdrs, AUDIO_RPC_MIXER_MODE * objp);

extern "C" bool_t xdr_AUDIO_MIXER_CONFIG(XDR * xdrs, AUDIO_MIXER_CONFIG * objp);

extern "C" bool_t xdr_ENUM_EQUALIZER_GAIN(XDR * xdrs, ENUM_EQUALIZER_GAIN * objp);

extern "C" bool_t xdr_ENUM_EQUALIZER_MODE(XDR * xdrs, ENUM_EQUALIZER_MODE * objp);

extern "C" bool_t xdr_AUDIO_RPC_EQUALIZER_MODE(XDR * xdrs, AUDIO_RPC_EQUALIZER_MODE * objp);

extern "C" bool_t xdr_ENUM_EQUALIZER_ENA(XDR * xdrs, ENUM_EQUALIZER_ENA * objp);

extern "C" bool_t xdr_ENUM_GBL_VAR_EQUALIZER_ID(XDR * xdrs, ENUM_GBL_VAR_EQUALIZER_ID * objp);

extern "C" bool_t xdr_AUDIO_EQUALIZER_CONFIG(XDR * xdrs, AUDIO_EQUALIZER_CONFIG * objp);

extern "C" bool_t xdr_ENUM_BASS_MANAGEMENT_CUTOFFFREQ(XDR * xdrs, ENUM_BASS_MANAGEMENT_CUTOFFFREQ * objp);

extern "C" bool_t xdr_ENUM_BASS_MANAGEMENT_MODE(XDR * xdrs, ENUM_BASS_MANAGEMENT_MODE * objp);

extern "C" bool_t xdr_ENUM_BASS_MANAGEMENT_SUBWOOFER_ENA(XDR * xdrs, ENUM_BASS_MANAGEMENT_SUBWOOFER_ENA * objp);

extern "C" bool_t xdr_AUDIO_RPC_BASS_MANAGEMENT_MODE(XDR * xdrs, AUDIO_RPC_BASS_MANAGEMENT_MODE * objp);

extern "C" bool_t xdr_ENUM_BASS_MANAGEMENT_ENA(XDR * xdrs, ENUM_BASS_MANAGEMENT_ENA * objp);

extern "C" bool_t xdr_AUDIO_BASS_MANAGEMENT_CONFIG(XDR * xdrs, AUDIO_BASS_MANAGEMENT_CONFIG * objp);

extern "C" bool_t xdr_ENUM_KEY_SHIFT_ENA(XDR * xdrs, ENUM_KEY_SHIFT_ENA * objp);

extern "C" bool_t xdr_ENUM_KEY_SHIFT_STONE(XDR * xdrs, ENUM_KEY_SHIFT_STONE * objp);

extern "C" bool_t xdr_AUDIO_KEY_SHIFT_CONFIG(XDR * xdrs, AUDIO_KEY_SHIFT_CONFIG * objp);

extern "C" bool_t xdr_ENUM_REVERB_ENA(XDR * xdrs, ENUM_REVERB_ENA * objp);

extern "C" bool_t xdr_ENUM_REVERB_MODE(XDR * xdrs, ENUM_REVERB_MODE * objp);

extern "C" bool_t xdr_AUDIO_REVERB_CONFIG(XDR * xdrs, AUDIO_REVERB_CONFIG * objp);

extern "C" bool_t xdr_ENUM_VOCAL_REMOVER_ENA(XDR * xdrs, ENUM_VOCAL_REMOVER_ENA * objp);

extern "C" bool_t xdr_ENUM_VOCAL_REMOVER_MODE(XDR * xdrs, ENUM_VOCAL_REMOVER_MODE * objp);

extern "C" bool_t xdr_AUDIO_VOCAL_REMOVER_CONFIG(XDR * xdrs, AUDIO_VOCAL_REMOVER_CONFIG * objp);

extern "C" bool_t xdr_AUDIO_RPC_DEC_INIT(XDR * xdrs, AUDIO_RPC_DEC_INIT * objp);

extern "C" bool_t xdr_AUDIO_RPC_ENC_INIT(XDR * xdrs, AUDIO_RPC_ENC_INIT * objp);

extern "C" bool_t xdr_AUDIO_RPC_ENC_SET_BITRATE(XDR * xdrs, AUDIO_RPC_ENC_SET_BITRATE * objp);

extern "C" bool_t xdr_AUDIO_RPC_ENC_COMMAND(XDR * xdrs, AUDIO_RPC_ENC_COMMAND * objp);

extern "C" bool_t xdr_AUDIO_RPC_DEBUG_MEMORY(XDR * xdrs, AUDIO_RPC_DEBUG_MEMORY * objp);

extern "C" bool_t xdr_AUDIO_RPC_ENC_INFO(XDR * xdrs, AUDIO_RPC_ENC_INFO * objp);

extern "C" bool_t xdr_AUDIO_RPC_ENC_DV_MIXER(XDR * xdrs, AUDIO_RPC_ENC_DV_MIXER * objp);

extern "C" bool_t xdr_AUDIO_RPC_AO_INIT(XDR * xdrs, AUDIO_RPC_AO_INIT * objp);

extern "C" bool_t xdr_AUDIO_RPC_AO_SET_EQUALIZER(XDR * xdrs, AUDIO_RPC_AO_SET_EQUALIZER * objp);

extern "C" bool_t xdr_AUDIO_AO_RPC_CONFIG_DELAY_CONTROL(XDR * xdrs, AUDIO_AO_RPC_CONFIG_DELAY_CONTROL * objp);

extern "C" bool_t xdr_AUDIO_RPC_AO_CONFIG_KARAOKE(XDR * xdrs, AUDIO_RPC_AO_CONFIG_KARAOKE * objp);

extern "C" bool_t xdr_AUDIO_RPC_AO_MIXER(XDR * xdrs, AUDIO_RPC_AO_MIXER * objp);

extern "C" bool_t xdr_AUDIO_RPC_PP_CFG(XDR * xdrs, AUDIO_RPC_PP_CFG * objp);

extern "C" bool_t xdr_AUDIO_RPC_PP_MUTE(XDR * xdrs, AUDIO_RPC_PP_MUTE * objp);

extern "C" bool_t xdr_AUDIO_RPC_AO_DAC(XDR * xdrs, AUDIO_RPC_AO_DAC * objp);

extern "C" bool_t xdr_AUDIO_RPC_PP_PROLOGIC(XDR * xdrs, AUDIO_RPC_PP_PROLOGIC * objp);

extern "C" bool_t xdr_AUDIO_AGC_MODE(XDR * xdrs, AUDIO_AGC_MODE * objp);

extern "C" bool_t xdr_AUDIO_CONFIG_CMD_MSG(XDR * xdrs, AUDIO_CONFIG_CMD_MSG * objp);

extern "C" bool_t xdr_AUDIO_CONFIG_COMMAND(XDR * xdrs, AUDIO_CONFIG_COMMAND * objp);

extern "C" bool_t xdr_AUDISTRY_FEATURE_CMD_MSG(XDR * xdrs, AUDISTRY_FEATURE_CMD_MSG * objp);

extern "C" bool_t xdr_AUDISTRY_TWOUP_PARAMETER(XDR * xdrs, AUDISTRY_TWOUP_PARAMETER * objp);

extern "C" bool_t xdr_AUDISTRY_HEADSPACE_PARAMETER(XDR * xdrs, AUDISTRY_HEADSPACE_PARAMETER * objp);

extern "C" bool_t xdr_AUDISTRY_STEREOWRAPPER_PARAMETER(XDR * xdrs, AUDISTRY_STEREOWRAPPER_PARAMETER * objp);

extern "C" bool_t xdr_AUDISTRY_LATENIGHT_PARAMETER(XDR * xdrs, AUDISTRY_LATENIGHT_PARAMETER * objp);

extern "C" bool_t xdr_AUDISTRY_VOLUME_PARAMETER(XDR * xdrs, AUDISTRY_VOLUME_PARAMETER * objp);

extern "C" bool_t xdr_AUDISTRY_RUMBLER_PARAMETER(XDR * xdrs, AUDISTRY_RUMBLER_PARAMETER * objp);

extern "C" bool_t xdr_AUDISTRY_CONFIG_COMMAND(XDR * xdrs, AUDISTRY_CONFIG_COMMAND * objp);

extern "C" bool_t xdr_AUDIO_AO_MIC_CONFIG(XDR * xdrs, AUDIO_AO_MIC_CONFIG * objp);

extern "C" bool_t xdr_AUDIO_AO_AUX_CONFIG(XDR * xdrs, AUDIO_AO_AUX_CONFIG * objp);

extern "C" bool_t xdr_AUDIO_AO_ECHO_REVERB_CONFIG(XDR * xdrs, AUDIO_AO_ECHO_REVERB_CONFIG * objp);

extern "C" bool_t xdr_AUDIO_RPC_ECHO_MODE(XDR * xdrs, AUDIO_RPC_ECHO_MODE * objp);

extern "C" bool_t xdr_AUDIO_AO_ECHO_DELAY_MODE(XDR * xdrs, AUDIO_AO_ECHO_DELAY_MODE * objp);

extern "C" bool_t xdr_AUDIO_HDMI_CODING_TYPE(XDR * xdrs, AUDIO_HDMI_CODING_TYPE * objp);

extern "C" bool_t xdr_AUDIO_HDMI_CHANNEL_COUNT(XDR * xdrs, AUDIO_HDMI_CHANNEL_COUNT * objp);

extern "C" bool_t xdr_AUDIO_HDMI_SAMPLING_FREQ(XDR * xdrs, AUDIO_HDMI_SAMPLING_FREQ * objp);

extern "C" bool_t xdr_AUDIO_HDMI_SAMPLE_SIZE(XDR * xdrs, AUDIO_HDMI_SAMPLE_SIZE * objp);

extern "C" bool_t xdr_AUDIO_HDMI_SETTING_INFO(XDR * xdrs, AUDIO_HDMI_SETTING_INFO * objp);

extern "C" bool_t xdr_AUDIO_HDMI_OUT_EDID_DATA(XDR * xdrs, AUDIO_HDMI_OUT_EDID_DATA * objp);

extern "C" bool_t xdr_AUDIO_HDMI_OUT_VSDB_DATA(XDR * xdrs, AUDIO_HDMI_OUT_VSDB_DATA * objp);

extern "C" bool_t xdr_HDMI_VIDEO_TYPE(XDR * xdrs, HDMI_VIDEO_TYPE * objp);

extern "C" bool_t xdr_HDMI_INFO(XDR * xdrs, HDMI_INFO * objp);

extern "C" bool_t xdr_AUDIO_VOLUME_LEVEL(XDR * xdrs, AUDIO_VOLUME_LEVEL * objp);

extern "C" bool_t xdr_AUDIO_LICENSE_CONTROL_MASK(XDR * xdrs, AUDIO_LICENSE_CONTROL_MASK * objp);

extern "C" bool_t xdr_AUDIO_RPC_DEC_FORMAT_INFO(XDR * xdrs, AUDIO_RPC_DEC_FORMAT_INFO * objp);

extern "C" bool_t xdr_AUDIO_LICENSE_STATUS_CONFIG(XDR * xdrs, AUDIO_LICENSE_STATUS_CONFIG * objp);

extern "C" bool_t xdr_AudioCodecControlBit(XDR * xdrs, AudioCodecControlBit * objp);

extern "C" bool_t xdr_AUDIO_ENUM_PRIVAETINFO_TO_SYS(XDR * xdrs, AUDIO_ENUM_PRIVAETINFO_TO_SYS * objp);

extern "C" bool_t xdr_AUDIO_RPC_PRIVATEINFO_TO_SYS(XDR * xdrs, AUDIO_RPC_PRIVATEINFO_TO_SYS * objp);

extern "C" bool_t xdr_AUDIO_ENUM_PRIVAETINFO(XDR * xdrs, AUDIO_ENUM_PRIVAETINFO * objp);

extern "C" bool_t xdr_AUDIO_RPC_PRIVATEINFO_PARAMETERS(XDR * xdrs, AUDIO_RPC_PRIVATEINFO_PARAMETERS * objp);

extern "C" bool_t xdr_AUDIO_RPC_PRIVATEINFO_RETURNVAL(XDR * xdrs, AUDIO_RPC_PRIVATEINFO_RETURNVAL * objp);

extern "C" bool_t xdr_AUDIO_ENUM_MAX_OUTPUT_SAMPLERATE(XDR * xdrs, AUDIO_ENUM_MAX_OUTPUT_SAMPLERATE * objp);


/*common/IPC/generate/src/system/AudioRPC_Agent_svc.c*/
extern "C" REG_STRUCT * AUDIO_AGENT_0_register(REG_STRUCT * rnode);


/*common/IPC/generate/src/system/AudioRPC_System_clnt.c*/
extern "C" RPCRES_LONG * AUDIO_RPC_ToAgent_Create_0(AUDIO_RPC_INSTANCE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_Connect_0(AUDIO_RPC_CONNECTION * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_InitRingBufferHeader_0(AUDIO_RPC_RINGBUFFER_HEADER * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_Run_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_Pause_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_Stop_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_Destroy_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_Flush_0(AUDIO_RPC_SENDIO * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_SetRefClock_0(AUDIO_RPC_REFCLOCK * argp, CLNT_STRUCT * clnt);

extern "C" RPCRES_LONG * AUDIO_RPC_ToAgent_GetStatus_0(AUDIO_RPC_SEND_LONG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_SetSeeking_0(AUDIO_RPC_SEEK * argp, CLNT_STRUCT * clnt);

extern "C" AUDIO_RPC_FORMAT_INFO * AUDIO_RPC_ToAgent_BitstreamValidation_0(AUDIO_RPC_DEC_BITSTREAM_BUFFER * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_AudioConfig_0(AUDIO_CONFIG_COMMAND * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_DEC_ToAgent_Init_0(AUDIO_RPC_DEC_INIT * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_DEC_ToAgent_SkipMode_0(AUDIO_RPC_SEND_LONG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ENC_ToAgent_Init_0(AUDIO_RPC_ENC_INIT * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ENC_ToAgent_SetBitRate_0(AUDIO_RPC_ENC_SET_BITRATE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ENC_ToAgent_StartEncoder_0(AUDIO_RPC_SEND_LONG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ENC_ToAgent_PauseEncoder_0(AUDIO_RPC_SEND_LONG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ENC_ToAgent_StopEncoder_0(AUDIO_RPC_SEND_LONG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ENC_ToAgent_SetSourceFile_0(AUDIO_RPC_ENC_SOURCEFILE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ENC_ToAgent_Command_0(AUDIO_RPC_ENC_COMMAND * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ENC_ToAgent_MuteEncoder_0(AUDIO_RPC_SEND_LONG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ENC_SetEncoder_0(AUDIO_RPC_ENC_INFO * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ENC_ToAgent_SetDVMixer_0(AUDIO_RPC_ENC_DV_MIXER * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ENC_ToAgent_SetNonRealTime_0(AUDIO_RPC_SEND_LONG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_AO_ToAgent_Init_0(AUDIO_RPC_AO_INIT * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_AO_ToAgent_SetEaqualizer_0(AUDIO_RPC_AO_SET_EQUALIZER * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_AO_ToAgent_ConfigDelayControl_0(AUDIO_AO_RPC_CONFIG_DELAY_CONTROL * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_AO_ToAgent_ConfigKaraoke_0(AUDIO_RPC_AO_CONFIG_KARAOKE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_AO_ToAgent_ConfigMixer_0(AUDIO_RPC_AO_MIXER * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_AO_ToAgent_ConfigPP_0(AUDIO_RPC_PP_CFG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_AO_ToAgent_Mute_0(AUDIO_OUT_MUTE_INFO * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_AO_ToAgent_ConfigDAC_0(AUDIO_RPC_AO_DAC * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_AO_ToAgent_ConfigPrologic_0(AUDIO_RPC_PP_PROLOGIC * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_ADC0_Config_0(AUDIO_CONFIG_ADC * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_ADC1_Config_0(AUDIO_CONFIG_ADC * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_SPDIF_Config_0(AUDIO_CONFIG_SPDIF * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_AI_BackDoor_Init_0(AUDIO_BACKDOOR_AI_INIT * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_SPDIF_Err_Threshold_Config_0(AUDIO_CONFIG_SPDIF_ERR * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_AIN_Switch_Focus_0(AUDIO_IN_SOURCE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_AOUT_Copy_Source_0(AUDIO_OUT_COPY_SOURCE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_AOUT_Volume_Control_0(AUDIO_VOLUME_CONTROL * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_AOUT_SPDIF_Source_0(AUDIO_OUT_SPDIF_SOURCE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_Karaoke_Control_0(AUDIO_KARAOKE_CONTROL_INFO * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_AIN_Mute_0(AUDIO_IN_MUTE_INFO * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_AOUT_Drop_Sample_0(AUDIO_DROP_SAMPLE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_AOUT_Pink_White_Noise_0(AUDIO_P_W_NOISE_CFG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_AOUT_Send_Spectrum_Data_0(AUDIO_SPECTRUM_CFG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_PlaySoundEvent_0(AUDIO_SOUND_EVENT * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_AOUT_ResetPin_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_AFC_Config_0(AUDIO_CONFIG_AFC * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_Audistry_Config_0(AUDISTRY_CONFIG_COMMAND * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_HDMI_Mute_0(AUDIO_HDMI_MUTE_INFO * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_ADC2_Config_0(AUDIO_CONFIG_ADC * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_AOUT_HDMI_Set_0(AUDIO_HDMI_SET * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_HDMI_OUT_EDID_0(AUDIO_HDMI_OUT_EDID_DATA * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_HDMI_INFO_0(HDMI_INFO * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_UpdatePTS_0(AUDIO_RPC_PTS_INFO * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_EndOfStream_0(AUDIO_RPC_SENDPIN_LONG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_SwitchFocus_0(AUDIO_RPC_FOCUS * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_DAC_I2S_Config_0(AUDIO_CONFIG_DAC_I2S * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_DAC_SPDIF_Config_0(AUDIO_CONFIG_DAC_SPDIF * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_HDMI_OUT_VSDB_0(AUDIO_HDMI_OUT_VSDB_DATA * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_DecoderConfig_0(AUDIO_RPC_DECCFG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_NightMode_0(AUDIO_RPC_NIGHTMODE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_PP_InitPin_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_AskDebugMemoryAddress_0(u_long * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_PP_Config_0(AUDIO_PP_CONFIG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_PP_SRC_Config_0(AUDIO_SRC_CONFIG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_PP_PL2_Config_0(AUDIO_PROLOGIC2_CONFIG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_PP_MIXER_Config_0(AUDIO_MIXER_CONFIG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_PP_BASS_MANAGEMENT_Config_0(AUDIO_BASS_MANAGEMENT_CONFIG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_PP_KEY_SHIFT_Config_0(AUDIO_KEY_SHIFT_CONFIG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_PP_REVERB_Config_0(AUDIO_REVERB_CONFIG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_PP_COMFORT_LISTEN_0(AUDIO_AGC_MODE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_PP_EQ_Config_0(AUDIO_EQUALIZER_CONFIG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_PP_VOCAL_REMOVER_Config_0(AUDIO_VOCAL_REMOVER_CONFIG * argp, CLNT_STRUCT * clnt);

extern "C" AUDIO_RPC_DEC_FORMAT_INFO * AUDIO_RPC_DEC_ToAgent_GetAudioFormatInfo_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_Capability_SetMask_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_AudioHalt_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * AUDIO_RPC_ToAgent_Full_Capability_SetMask_0(AUDIO_LICENSE_STATUS_CONFIG * argp, CLNT_STRUCT * clnt);

extern "C" AUDIO_RPC_PRIVATEINFO_RETURNVAL * AUDIO_RPC_ToAgent_PrivateInfo_0(AUDIO_RPC_PRIVATEINFO_PARAMETERS * argp, CLNT_STRUCT * clnt);


/*common/IPC/generate/src/system/RPCBaseDS_xdr.c*/
extern "C" bool_t xdr_HRESULT(XDR * xdrs, HRESULT * objp);

extern "C" bool_t xdr_RPCRES_LONG(XDR * xdrs, RPCRES_LONG * objp);

extern "C" bool_t xdr_RPC_CONNECTION(XDR * xdrs, RPC_CONNECTION * objp);

extern "C" bool_t xdr_RPC_SEND_LONG(XDR * xdrs, RPC_SEND_LONG * objp);


/*common/IPC/generate/src/system/VideoRPCBaseDS_xdr.c*/
extern "C" bool_t xdr_RPC_RINGBUFFER(XDR * xdrs, RPC_RINGBUFFER * objp);

extern "C" bool_t xdr_VIDEO_VF_TYPE(XDR * xdrs, VIDEO_VF_TYPE * objp);

extern "C" bool_t xdr_VIDEO_RATE_CONTROL_MODE(XDR * xdrs, VIDEO_RATE_CONTROL_MODE * objp);

extern "C" bool_t xdr_VIDEO_SOURCE(XDR * xdrs, VIDEO_SOURCE * objp);

extern "C" bool_t xdr_VIDEO_JPEG_ROTATION(XDR * xdrs, VIDEO_JPEG_ROTATION * objp);

extern "C" bool_t xdr_VIDEO_COLOR_FMT(XDR * xdrs, VIDEO_COLOR_FMT * objp);

extern "C" bool_t xdr_VIDEO_TRANSITION_TYPE(XDR * xdrs, VIDEO_TRANSITION_TYPE * objp);

extern "C" bool_t xdr_VIDEO_FORMAT(XDR * xdrs, VIDEO_FORMAT * objp);

extern "C" bool_t xdr_VIDEO_STREAM_TYPE(XDR * xdrs, VIDEO_STREAM_TYPE * objp);

extern "C" bool_t xdr_VIDEO_DECODER_CC_BYPASS_MODE(XDR * xdrs, VIDEO_DECODER_CC_BYPASS_MODE * objp);

extern "C" bool_t xdr_ENUM_DVD_VIDEO_ENCODER_OUTPUT_INFO_TYPE(XDR * xdrs, ENUM_DVD_VIDEO_ENCODER_OUTPUT_INFO_TYPE * objp);

extern "C" bool_t xdr_ENUM_VIDEO_ENCODER_RC_MODE(XDR * xdrs, ENUM_VIDEO_ENCODER_RC_MODE * objp);

extern "C" bool_t xdr_VO_STANDARD(XDR * xdrs, VO_STANDARD * objp);

extern "C" bool_t xdr_VO_PEDESTAL_TYPE(XDR * xdrs, VO_PEDESTAL_TYPE * objp);

extern "C" bool_t xdr_VO_TV_TYPE(XDR * xdrs, VO_TV_TYPE * objp);

extern "C" bool_t xdr_VO_HDMI_MODE(XDR * xdrs, VO_HDMI_MODE * objp);

extern "C" bool_t xdr_VO_HDMI_AUDIO_SAMPLE_FREQ(XDR * xdrs, VO_HDMI_AUDIO_SAMPLE_FREQ * objp);

extern "C" bool_t xdr_VO_HDMI_COLOR_FMT(XDR * xdrs, VO_HDMI_COLOR_FMT * objp);

extern "C" bool_t xdr_VO_VBI_ASPECT_RATIO(XDR * xdrs, VO_VBI_ASPECT_RATIO * objp);

extern "C" bool_t xdr_VO_VBI_COPY_MODE(XDR * xdrs, VO_VBI_COPY_MODE * objp);

extern "C" bool_t xdr_VO_VBI_APS(XDR * xdrs, VO_VBI_APS * objp);

extern "C" bool_t xdr_VO_VBI_SUBTITLE_MODE(XDR * xdrs, VO_VBI_SUBTITLE_MODE * objp);

extern "C" bool_t xdr_VO_VIDEO_PLANE(XDR * xdrs, VO_VIDEO_PLANE * objp);

extern "C" bool_t xdr_VO_RESCALE_MODE(XDR * xdrs, VO_RESCALE_MODE * objp);

extern "C" bool_t xdr_VO_DEINT_MODE(XDR * xdrs, VO_DEINT_MODE * objp);

extern "C" bool_t xdr_VO_OSD_LPF_TYPE(XDR * xdrs, VO_OSD_LPF_TYPE * objp);

extern "C" bool_t xdr_VO_OSD_COLOR_FORMAT(XDR * xdrs, VO_OSD_COLOR_FORMAT * objp);

extern "C" bool_t xdr_VO_OSD_RGB_ORDER(XDR * xdrs, VO_OSD_RGB_ORDER * objp);

extern "C" bool_t xdr_VO_GRAPHIC_PLANE(XDR * xdrs, VO_GRAPHIC_PLANE * objp);

extern "C" bool_t xdr_VO_GRAPHIC_STORAGE_MODE(XDR * xdrs, VO_GRAPHIC_STORAGE_MODE * objp);

extern "C" bool_t xdr_PVIN_MODE(XDR * xdrs, PVIN_MODE * objp);

extern "C" bool_t xdr_VO_COLOR(XDR * xdrs, VO_COLOR * objp);

extern "C" bool_t xdr_VO_RECTANGLE(XDR * xdrs, VO_RECTANGLE * objp);

extern "C" bool_t xdr_VO_SUBPIC_COLORMAP(XDR * xdrs, VO_SUBPIC_COLORMAP * objp);

extern "C" bool_t xdr_SP_STREAM_TYPE(XDR * xdrs, SP_STREAM_TYPE * objp);

extern "C" bool_t xdr_ENUM_TVD_VIDEO_FORMAT(XDR * xdrs, ENUM_TVD_VIDEO_FORMAT * objp);

extern "C" bool_t xdr_ENUM_TVD_INPUT_FORMAT(XDR * xdrs, ENUM_TVD_INPUT_FORMAT * objp);

extern "C" bool_t xdr_ENUM_TVD_YC_SEP_MODE(XDR * xdrs, ENUM_TVD_YC_SEP_MODE * objp);

extern "C" bool_t xdr_ENUM_TVD_VBI_DATA(XDR * xdrs, ENUM_TVD_VBI_DATA * objp);

extern "C" bool_t xdr_TVE_BOARD_TYPE(XDR * xdrs, TVE_BOARD_TYPE * objp);

extern "C" bool_t xdr_VIDEO_BUFFER_TYPE(XDR * xdrs, VIDEO_BUFFER_TYPE * objp);

extern "C" bool_t xdr_VIDEO_DNR_MODE(XDR * xdrs, VIDEO_DNR_MODE * objp);

extern "C" bool_t xdr_VIDEO_CODEC_CONTROL_BIT(XDR * xdrs, VIDEO_CODEC_CONTROL_BIT * objp);

extern "C" bool_t xdr_VIDEO_PHOTO_DEC_JPEG_CTRL(XDR * xdrs, VIDEO_PHOTO_DEC_JPEG_CTRL * objp);

extern "C" bool_t xdr_VIDEO_PHOTO_DEC_BITMAP_CTRL(XDR * xdrs, VIDEO_PHOTO_DEC_BITMAP_CTRL * objp);

extern "C" bool_t xdr_VIDEO_PHOTO_DEC_TIFF_CTRL(XDR * xdrs, VIDEO_PHOTO_DEC_TIFF_CTRL * objp);

extern "C" bool_t xdr_VIDEO_PHOTO_DEC_GIF_CTRL(XDR * xdrs, VIDEO_PHOTO_DEC_GIF_CTRL * objp);

extern "C" bool_t xdr_VIDEO_PHOTO_DEC_PNG_CTRL(XDR * xdrs, VIDEO_PHOTO_DEC_PNG_CTRL * objp);


/*common/IPC/generate/src/system/VideoRPC_Agent_svc.c*/
extern "C" REG_STRUCT * VIDEO_AGENT_0_register(REG_STRUCT * rnode);


/*common/IPC/generate/src/system/VideoRPC_Agent_xdr.c*/
extern "C" bool_t xdr_VIDEO_RPC_ENC_ELEM_GEN_INFO(XDR * xdrs, VIDEO_RPC_ENC_ELEM_GEN_INFO * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_ELEM_FRAME_INFO(XDR * xdrs, VIDEO_RPC_ENC_ELEM_FRAME_INFO * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENDOFSTREAM(XDR * xdrs, VIDEO_RPC_ENDOFSTREAM * objp);

extern "C" bool_t xdr_VIDEO_RPC_DEC_JPEG_INFO(XDR * xdrs, VIDEO_RPC_DEC_JPEG_INFO * objp);

extern "C" bool_t xdr_VIDEO_RPC_DEC_JPEG_CTRL(XDR * xdrs, VIDEO_RPC_DEC_JPEG_CTRL * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_VBID_WSS_INFO(XDR * xdrs, VIDEO_RPC_ENC_VBID_WSS_INFO * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_PAUSE_INFO(XDR * xdrs, VIDEO_RPC_ENC_PAUSE_INFO * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_AUTOPAUSE_INFO(XDR * xdrs, VIDEO_RPC_ENC_AUTOPAUSE_INFO * objp);

extern "C" bool_t xdr_VIDEO_RPC_DEC_ERROR_INFO(XDR * xdrs, VIDEO_RPC_DEC_ERROR_INFO * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_AUTOPAUSE(XDR * xdrs, VIDEO_RPC_ENC_AUTOPAUSE * objp);

extern "C" bool_t xdr_VIDEO_RPC_TRANSITION_EFFECT_CTRL(XDR * xdrs, VIDEO_RPC_TRANSITION_EFFECT_CTRL * objp);


/*common/IPC/generate/src/system/VideoRPC_System_clnt.c*/
extern "C" RPCRES_LONG * VIDEO_RPC_ToAgent_Create_0(VIDEO_RPC_INSTANCE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ToAgent_Connect_0(RPC_CONNECTION * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ToAgent_InitRingBuffer_0(RPC_RINGBUFFER * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ToAgent_Run_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ToAgent_Pause_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ToAgent_Stop_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ToAgent_Destroy_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ToAgent_Flush_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ToAgent_SetRefClock_0(VIDEO_RPC_SET_REFCLOCK * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ToAgent_VideoCreate_0(VIDEO_INIT_DATA * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ToAgent_VideoConfig_0(VIDEO_CONFIG_DATA * argp, CLNT_STRUCT * clnt);

extern "C" VIDEO_RPC_VIDEO_FREE_MEMORY * VIDEO_RPC_ToAgent_VideoMemoryConfig_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ToAgent_VideoDestroy_0(VIDEO_INIT_DATA * argp, CLNT_STRUCT * clnt);

extern "C" RPCRES_LONG * VIDEO_RPC_ToAgent_RequestBuffer_0(VIDEO_RPC_REQUEST_BUFFER * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ToAgent_ReleaseBuffer_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ToAgent_SetDebugMemory_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ToAgent_VideoHalt_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_DEC_ToAgent_SetSpeed_0(VIDEO_RPC_DEC_SET_SPEED * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_DEC_ToAgent_SetErrorConcealmentLevel_0(VIDEO_RPC_DEC_SET_ERR_CONCEALMENT_LEVEL * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_DEC_ToAgent_Init_0(VIDEO_RPC_DEC_INIT * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_DEC_ToAgent_SetDeblock_0(VIDEO_RPC_DEC_SET_DEBLOCK * argp, CLNT_STRUCT * clnt);

extern "C" VIDEO_RPC_DEC_SEQ_INFO * VIDEO_RPC_DEC_ToAgent_GetVideoSequenceInfo_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" VIDEO_RPC_DEC_BV_RESULT * VIDEO_RPC_DEC_ToAgent_BitstreamValidation_0(VIDEO_RPC_DEC_BITSTREAM_BUFFER * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_DEC_ToAgent_Capability_0(VIDEO_RPC_DEC_CAPABILITY * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_DEC_ToAgent_SetDecoderCCBypass_0(VIDEO_RPC_DEC_CC_BYPASS_MODE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_DEC_ToAgent_SetDNR_0(VIDEO_RPC_DEC_SET_DNR * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_THUMBNAIL_ToAgent_SetVscalerOutputFormat_0(VIDEO_RPC_THUMBNAIL_SET_VSCALER_OUTFORMAT * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_THUMBNAIL_ToAgent_SetThreshold_0(VIDEO_RPC_THUMBNAIL_SET_THRESHOLD * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_THUMBNAIL_ToAgent_SetStartPictureNumber_0(VIDEO_RPC_THUMBNAIL_SET_STARTPIC * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_Init_0(VIDEO_RPC_ENC_INIT * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_SetVideoSource_0(VIDEO_RPC_ENC_VIDEOSOURCE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_SetSourceFile_0(VIDEO_RPC_ENC_SOURCEFILE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_SetResolution_0(VIDEO_RPC_ENC_SET_RESOLUTION * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_SetBitRate_0(VIDEO_RPC_ENC_SET_BITRATE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_SetGOPStructure_0(VIDEO_RPC_ENC_SET_GOPSTRUCTURE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_SetNewGOPOnSceneChange_0(VIDEO_RPC_ENC_SET_NEWGOPONSC * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_SetInverseTelecineDetection_0(VIDEO_RPC_ENC_SET_INV32DETECT * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_SetTF_0(VIDEO_RPC_ENC_SET_TF * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_SetNR_0(VIDEO_RPC_ENC_SET_NR * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_SetEncodeFormat_0(VIDEO_RPC_ENC_SET_ENCFORMAT * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_ConfigureCCData_0(VIDEO_RPC_ENC_CONFIG_CCDATA * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_SetClosedGOPFrequency_0(VIDEO_RPC_ENC_SET_CLOSEDGOPFREQ * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_StartRecord_0(VIDEO_RPC_ENC_START_ENC * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_PauseRecord_0(VIDEO_RPC_ENC_PAUSE_ENC * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_StopRecord_0(VIDEO_RPC_ENC_STOP_ENC * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_ConfigVOBU_0(VIDEO_RPC_ENC_CONFIG_VOBU * argp, CLNT_STRUCT * clnt);

extern "C" RPCRES_LONG * VIDEO_RPC_ENC_ToAgent_MPEGIFrameEncode_0(VIDEO_RPC_ENC_MPEG_I_ENC * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_SetVbidWssFreq_0(VIDEO_RPC_ENC_SET_VBID_WSS_FREQ * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_IsRunnable_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_SetVBV_0(VIDEO_RPC_ENC_SET_VBV * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_SetNonRealTime_0(VIDEO_RPC_ENC_SET_NONREALTIME * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_ENC_ToAgent_SendTVDInfo_0(VIDEO_RPC_ENC_SEND_TVD_INFO * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_SetVideoStandard_0(VIDEO_RPC_VOUT_SET_VIDEO_STANDARD * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_SetHDMI_0(VIDEO_RPC_VOUT_SET_HDMI * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_ConfigHDMI_0(VIDEO_RPC_VOUT_CONFIG_HDMI * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_ConfigHdmiInfoFrame_0(VIDEO_RPC_VOUT_CONFIG_HDMI_INFO_FRAME * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_ConfigVideoStandard_0(VIDEO_RPC_VOUT_CONFIG_VIDEO_STANDARD * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_SetTVtype_0(VO_TV_TYPE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_SetBackground_0(VIDEO_RPC_VOUT_SET_BKGRND * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_SetClosedCaption_0(VIDEO_RPC_VOUT_SET_CC * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_SetAPS_0(VIDEO_RPC_VOUT_SET_APS * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_SetCopyMode_0(VIDEO_RPC_VOUT_SET_COPY_MODE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_SetAspectRatio_0(VIDEO_RPC_VOUT_SET_AR * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_ConfigureDisplayWindow_0(VIDEO_RPC_VOUT_CONFIG_DISP_WIN * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_SetV2alpha_0(u_char * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_SetRescaleMode_0(VIDEO_RPC_VOUT_SET_RESCALE_MODE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_SetDeintMode_0(VIDEO_RPC_VOUT_SET_DEINT_MODE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_Zoom_0(VIDEO_RPC_VOUT_ZOOM * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_Pan_Zoom_0(VIDEO_RPC_VOUT_PAN_ZOOM * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_ConfigureOSD_0(VIDEO_RPC_VOUT_CONFIG_OSD * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_ConfigureOSDPalette_0(VIDEO_RPC_VOUT_CONFIG_OSD_PALETTE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_CreateOSDwindow_0(VIDEO_RPC_VOUT_CREATE_OSD_WIN * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_SetOSDwindowPalette_0(VIDEO_RPC_VOUT_SET_OSD_WIN_PALETTE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_ModifyOSDwindow_0(VIDEO_RPC_VOUT_MODIFY_OSD_WIN * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_ModifyOSDwindowOnGo_0(VIDEO_RPC_VOUT_MODIFY_OSD_WIN * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_DeleteOSDwindow_0(u_char * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_DeleteOSDwindowOnGo_0(VIDEO_RPC_VOUT_DELETE_OSD_WIN * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_DrawOSDwindow_0(VIDEO_RPC_VOUT_DRAW_OSD_WIN * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_DrawOSDwindowOnGo_0(VIDEO_RPC_VOUT_DRAW_OSD_WIN * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_HideOSDwindow_0(u_char * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_HideOSDwindowOnGo_0(VIDEO_RPC_VOUT_HIDE_OSD_WIN * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_ConfigOSDCanvas_0(VIDEO_RPC_VOUT_CONFIG_OSD_CANVAS * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_ConfigureGraphicCanvas_0(VIDEO_RPC_VOUT_CONFIG_GRAPHIC_CANVAS * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_CreateGraphicWindow_0(VIDEO_RPC_VOUT_CREATE_GRAPHIC_WIN * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_HideGraphicWindow_0(VIDEO_RPC_VOUT_HIDE_GRAPHIC_WIN * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_ModifyGraphicWindow_0(VIDEO_RPC_VOUT_MODIFY_GRAPHIC_WIN * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_DeleteGraphicWindow_0(VIDEO_RPC_VOUT_DELETE_GRAPHIC_WIN * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_DrawGraphicWindow_0(VIDEO_RPC_VOUT_DRAW_GRAPHIC_WIN * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_DisplayGraphic_0(VIDEO_RPC_VOUT_DISPLAY_GRAPHIC * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_ConfigureCursor_0(VIDEO_RPC_VOUT_CONFIG_CURSOR * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_DrawCursor_0(VIDEO_RPC_VOUT_DRAW_CURSOR * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_HideCursor_0(void * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_SetPeakingStrength_0(u_char * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_SetBrightness_0(u_char * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_SetHue_0(u_char * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_SetSaturation_0(u_char * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_SetContrast_0(u_char * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_ConfigColorMatrix_0(VIDEO_RPC_VOUT_CONFIG_COLOR_MATRIX * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_VideoCapture_0(VIDEO_RPC_VOUT_VIDEO_CAPTURE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VOUT_ToAgent_SetSubtitleYoffset_0(short int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VO_FILTER_ToAgent_Display_0(VIDEO_RPC_VO_FILTER_DISPLAY * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VO_FILTER_ToAgent_SetSpeed_0(VIDEO_RPC_VO_FILTER_SET_SPEED * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VO_FILTER_ToAgent_Step_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VO_FILTER_ToAgent_ShowStillPicture_0(VIDEO_RPC_VO_FILTER_SHOW_STILL_PIC * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VO_FILTER_ToAgent_FillVideoBorder_0(VIDEO_RPC_VO_FILTER_FILL_VIDEO_BORDER * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VO_FILTER_ToAgent_SetFastDisplay_0(VIDEO_RPC_VO_FILTER_SET_FAST_DISPLAY * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_SUBPIC_DEC_ToAgent_EnableSubPicture_0(VIDEO_RPC_SUBPIC_DEC_ENABLE_SUBPIC * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_SUBPIC_DEC_ToAgent_ShowSubPicture_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_SUBPIC_DEC_ToAgent_HideSubPicture_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_SUBPIC_DEC_ToAgent_Configure_0(VIDEO_RPC_SUBPIC_DEC_CONFIGURE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_SUBPIC_DEC_ToAgent_Page_0(VIDEO_RPC_SUBPIC_DEC_PAGE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_TVD_ToAgent_TVD_Configure_0(VIDEO_RPC_TVD_CONFIG * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_TVD_ToAgent_Select_INFMT_0(VIDEO_RPC_TVD_INPUT_FORMAT * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_TVD_ToAgent_YC_Separation_0(VIDEO_RPC_TVD_YC_SEP_MODE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_TVD_ToAgent_VBI_Ctrl_0(VIDEO_RPC_TVD_VBI_CTRL * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_TVD_ToAgent_Adjust_Contrast_0(VIDEO_RPC_TVD_ADJ_CONTRAST * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_TVD_ToAgent_Adjust_Brightness_0(VIDEO_RPC_TVD_ADJ_BRIGHTNESS * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_TVD_ToAgent_Adjust_Saturation_0(VIDEO_RPC_TVD_ADJ_SATURATION * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_TVD_ToAgent_Adjust_Hue_0(VIDEO_RPC_TVD_ADJ_HUE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_TVD_ToAgent_Blue_Screen_Ctrl_0(VIDEO_RPC_TVD_BLUE_MODE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_TVD_ToAgent_Query_VIDEO_FORMAT_0(VIDEO_RPC_TVD_VIDEO_FORMAT * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_VIN_ToAgent_Adjust_Scale_Coef_0(VIDEO_RPC_VIN_ADJ_SCALE_COEF * argp, CLNT_STRUCT * clnt);

extern "C" CHANNEL_RES * VIDEO_RPC_TVD_ToAgent_ChangeChannel_Start_0(long int * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_JPEG_ToAgent_DEC_0(VIDEO_RPC_JPEG_DEC * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_JPEG_ToAgent_DEC_BATCH_0(VIDEO_RPC_JPEG_DEC_BATCH * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_TRANSITION_ToAgent_Start_0(VIDEO_RPC_TRANSITION_EFFECT * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_PVIN_ToAgent_Init_0(VIDEO_RPC_PVIN_INIT * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_PVIN_ToAgent_Schedule_EOS_0(VIDEO_RPC_PVIN_SCHEDULE_EOS * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_MUX_ToAgent_SetOutFile_0(VIDEO_RPC_MUX_SET_FILE * argp, CLNT_STRUCT * clnt);

extern "C" HRESULT * VIDEO_RPC_PVOUT_ToAgent_Init_0(VIDEO_RPC_PVOUT_INIT * argp, CLNT_STRUCT * clnt);


/*common/IPC/generate/src/system/VideoRPC_System_xdr.c*/
extern "C" bool_t xdr_VIDEO_INIT_DATA(XDR * xdrs, VIDEO_INIT_DATA * objp);

extern "C" bool_t xdr_VIDEO_CONFIG_DATA(XDR * xdrs, VIDEO_CONFIG_DATA * objp);

extern "C" bool_t xdr_VIDEO_RPC_INSTANCE(XDR * xdrs, VIDEO_RPC_INSTANCE * objp);

extern "C" bool_t xdr_VIDEO_RPC_PVIN_INIT(XDR * xdrs, VIDEO_RPC_PVIN_INIT * objp);

extern "C" bool_t xdr_VIDEO_RPC_PVIN_SCHEDULE_EOS(XDR * xdrs, VIDEO_RPC_PVIN_SCHEDULE_EOS * objp);

extern "C" bool_t xdr_VIDEO_RPC_MUX_SET_FILE(XDR * xdrs, VIDEO_RPC_MUX_SET_FILE * objp);

extern "C" bool_t xdr_VIDEO_RPC_PVOUT_INIT(XDR * xdrs, VIDEO_RPC_PVOUT_INIT * objp);

extern "C" bool_t xdr_VIDEO_RPC_SET_REFCLOCK(XDR * xdrs, VIDEO_RPC_SET_REFCLOCK * objp);

extern "C" bool_t xdr_VIDEO_RPC_REQUEST_BUFFER(XDR * xdrs, VIDEO_RPC_REQUEST_BUFFER * objp);

extern "C" bool_t xdr_VIDEO_RPC_DEC_SET_SPEED(XDR * xdrs, VIDEO_RPC_DEC_SET_SPEED * objp);

extern "C" bool_t xdr_VIDEO_RPC_DEC_SET_ERR_CONCEALMENT_LEVEL(XDR * xdrs, VIDEO_RPC_DEC_SET_ERR_CONCEALMENT_LEVEL * objp);

extern "C" bool_t xdr_VIDEO_RPC_DEC_INIT(XDR * xdrs, VIDEO_RPC_DEC_INIT * objp);

extern "C" bool_t xdr_VIDEO_RPC_DEC_SET_DEBLOCK(XDR * xdrs, VIDEO_RPC_DEC_SET_DEBLOCK * objp);

extern "C" bool_t xdr_VIDEO_RPC_DEC_BITSTREAM_BUFFER(XDR * xdrs, VIDEO_RPC_DEC_BITSTREAM_BUFFER * objp);

extern "C" bool_t xdr_VIDEO_RPC_DEC_BV_RESULT(XDR * xdrs, VIDEO_RPC_DEC_BV_RESULT * objp);

extern "C" bool_t xdr_VIDEO_RPC_DEC_SEQ_INFO(XDR * xdrs, VIDEO_RPC_DEC_SEQ_INFO * objp);

extern "C" bool_t xdr_VIDEO_MEM_CHUNK(XDR * xdrs, VIDEO_MEM_CHUNK * objp);

extern "C" bool_t xdr_VIDEO_RPC_VIDEO_FREE_MEMORY(XDR * xdrs, VIDEO_RPC_VIDEO_FREE_MEMORY * objp);

extern "C" bool_t xdr_VIDEO_RPC_DEC_CC_BYPASS_MODE(XDR * xdrs, VIDEO_RPC_DEC_CC_BYPASS_MODE * objp);

extern "C" bool_t xdr_VIDEO_RPC_DEC_SET_DNR(XDR * xdrs, VIDEO_RPC_DEC_SET_DNR * objp);

extern "C" bool_t xdr_VIDEO_RPC_DEC_CAPABILITY(XDR * xdrs, VIDEO_RPC_DEC_CAPABILITY * objp);

extern "C" bool_t xdr_VIDEO_RPC_THUMBNAIL_SET_VSCALER_OUTFORMAT(XDR * xdrs, VIDEO_RPC_THUMBNAIL_SET_VSCALER_OUTFORMAT * objp);

extern "C" bool_t xdr_VIDEO_RPC_THUMBNAIL_SET_THRESHOLD(XDR * xdrs, VIDEO_RPC_THUMBNAIL_SET_THRESHOLD * objp);

extern "C" bool_t xdr_VIDEO_RPC_THUMBNAIL_SET_STARTPIC(XDR * xdrs, VIDEO_RPC_THUMBNAIL_SET_STARTPIC * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_INIT(XDR * xdrs, VIDEO_RPC_ENC_INIT * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_VIDEOSOURCE(XDR * xdrs, VIDEO_RPC_ENC_VIDEOSOURCE * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_SOURCEFILE(XDR * xdrs, VIDEO_RPC_ENC_SOURCEFILE * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_SET_RESOLUTION(XDR * xdrs, VIDEO_RPC_ENC_SET_RESOLUTION * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_SET_BITRATE(XDR * xdrs, VIDEO_RPC_ENC_SET_BITRATE * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_SET_GOPSTRUCTURE(XDR * xdrs, VIDEO_RPC_ENC_SET_GOPSTRUCTURE * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_SET_NEWGOPONSC(XDR * xdrs, VIDEO_RPC_ENC_SET_NEWGOPONSC * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_SET_INV32DETECT(XDR * xdrs, VIDEO_RPC_ENC_SET_INV32DETECT * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_SET_TF(XDR * xdrs, VIDEO_RPC_ENC_SET_TF * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_SET_NR(XDR * xdrs, VIDEO_RPC_ENC_SET_NR * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_SET_ENCFORMAT(XDR * xdrs, VIDEO_RPC_ENC_SET_ENCFORMAT * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_CONFIG_CCDATA(XDR * xdrs, VIDEO_RPC_ENC_CONFIG_CCDATA * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_SET_CLOSEDGOPFREQ(XDR * xdrs, VIDEO_RPC_ENC_SET_CLOSEDGOPFREQ * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_START_ENC(XDR * xdrs, VIDEO_RPC_ENC_START_ENC * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_PAUSE_ENC(XDR * xdrs, VIDEO_RPC_ENC_PAUSE_ENC * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_STOP_ENC(XDR * xdrs, VIDEO_RPC_ENC_STOP_ENC * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_CONFIG_VOBU(XDR * xdrs, VIDEO_RPC_ENC_CONFIG_VOBU * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_MPEG_I_ENC(XDR * xdrs, VIDEO_RPC_ENC_MPEG_I_ENC * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_SET_VBID_WSS_FREQ(XDR * xdrs, VIDEO_RPC_ENC_SET_VBID_WSS_FREQ * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_SET_VBV(XDR * xdrs, VIDEO_RPC_ENC_SET_VBV * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_SET_NONREALTIME(XDR * xdrs, VIDEO_RPC_ENC_SET_NONREALTIME * objp);

extern "C" bool_t xdr_VIDEO_RPC_ENC_SEND_TVD_INFO(XDR * xdrs, VIDEO_RPC_ENC_SEND_TVD_INFO * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_SET_VIDEO_STANDARD(XDR * xdrs, VIDEO_RPC_VOUT_SET_VIDEO_STANDARD * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_CONFIG_VIDEO_STANDARD(XDR * xdrs, VIDEO_RPC_VOUT_CONFIG_VIDEO_STANDARD * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_SET_HDMI(XDR * xdrs, VIDEO_RPC_VOUT_SET_HDMI * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_CONFIG_HDMI(XDR * xdrs, VIDEO_RPC_VOUT_CONFIG_HDMI * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_CONFIG_HDMI_INFO_FRAME(XDR * xdrs, VIDEO_RPC_VOUT_CONFIG_HDMI_INFO_FRAME * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_SET_BKGRND(XDR * xdrs, VIDEO_RPC_VOUT_SET_BKGRND * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_SET_CC(XDR * xdrs, VIDEO_RPC_VOUT_SET_CC * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_SET_APS(XDR * xdrs, VIDEO_RPC_VOUT_SET_APS * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_SET_COPY_MODE(XDR * xdrs, VIDEO_RPC_VOUT_SET_COPY_MODE * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_SET_AR(XDR * xdrs, VIDEO_RPC_VOUT_SET_AR * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_CONFIG_DISP_WIN(XDR * xdrs, VIDEO_RPC_VOUT_CONFIG_DISP_WIN * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_SET_RESCALE_MODE(XDR * xdrs, VIDEO_RPC_VOUT_SET_RESCALE_MODE * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_SET_DEINT_MODE(XDR * xdrs, VIDEO_RPC_VOUT_SET_DEINT_MODE * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_ZOOM(XDR * xdrs, VIDEO_RPC_VOUT_ZOOM * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_PAN_ZOOM(XDR * xdrs, VIDEO_RPC_VOUT_PAN_ZOOM * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_CONFIG_OSD(XDR * xdrs, VIDEO_RPC_VOUT_CONFIG_OSD * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_CONFIG_OSD_PALETTE(XDR * xdrs, VIDEO_RPC_VOUT_CONFIG_OSD_PALETTE * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_CREATE_OSD_WIN(XDR * xdrs, VIDEO_RPC_VOUT_CREATE_OSD_WIN * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_SET_OSD_WIN_PALETTE(XDR * xdrs, VIDEO_RPC_VOUT_SET_OSD_WIN_PALETTE * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_MODIFY_OSD_WIN(XDR * xdrs, VIDEO_RPC_VOUT_MODIFY_OSD_WIN * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_DRAW_OSD_WIN(XDR * xdrs, VIDEO_RPC_VOUT_DRAW_OSD_WIN * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_HIDE_OSD_WIN(XDR * xdrs, VIDEO_RPC_VOUT_HIDE_OSD_WIN * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_DELETE_OSD_WIN(XDR * xdrs, VIDEO_RPC_VOUT_DELETE_OSD_WIN * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_CONFIG_OSD_CANVAS(XDR * xdrs, VIDEO_RPC_VOUT_CONFIG_OSD_CANVAS * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_CONFIG_CURSOR(XDR * xdrs, VIDEO_RPC_VOUT_CONFIG_CURSOR * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_DRAW_CURSOR(XDR * xdrs, VIDEO_RPC_VOUT_DRAW_CURSOR * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_CONFIG_COLOR_MATRIX(XDR * xdrs, VIDEO_RPC_VOUT_CONFIG_COLOR_MATRIX * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_CONFIG_GRAPHIC_CANVAS(XDR * xdrs, VIDEO_RPC_VOUT_CONFIG_GRAPHIC_CANVAS * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_CREATE_GRAPHIC_WIN(XDR * xdrs, VIDEO_RPC_VOUT_CREATE_GRAPHIC_WIN * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_MODIFY_GRAPHIC_WIN(XDR * xdrs, VIDEO_RPC_VOUT_MODIFY_GRAPHIC_WIN * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_DRAW_GRAPHIC_WIN(XDR * xdrs, VIDEO_RPC_VOUT_DRAW_GRAPHIC_WIN * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_HIDE_GRAPHIC_WIN(XDR * xdrs, VIDEO_RPC_VOUT_HIDE_GRAPHIC_WIN * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_DELETE_GRAPHIC_WIN(XDR * xdrs, VIDEO_RPC_VOUT_DELETE_GRAPHIC_WIN * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_DISPLAY_GRAPHIC_WIN(XDR * xdrs, VIDEO_RPC_VOUT_DISPLAY_GRAPHIC_WIN * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_DISPLAY_GRAPHIC(XDR * xdrs, VIDEO_RPC_VOUT_DISPLAY_GRAPHIC * objp);

extern "C" bool_t xdr_VIDEO_RPC_VOUT_VIDEO_CAPTURE(XDR * xdrs, VIDEO_RPC_VOUT_VIDEO_CAPTURE * objp);

extern "C" bool_t xdr_VIDEO_RPC_VO_FILTER_DISPLAY(XDR * xdrs, VIDEO_RPC_VO_FILTER_DISPLAY * objp);

extern "C" bool_t xdr_VIDEO_RPC_VO_FILTER_HIDE(XDR * xdrs, VIDEO_RPC_VO_FILTER_HIDE * objp);

extern "C" bool_t xdr_VIDEO_RPC_VO_FILTER_DISP_BD_COLOR(XDR * xdrs, VIDEO_RPC_VO_FILTER_DISP_BD_COLOR * objp);

extern "C" bool_t xdr_VIDEO_RPC_VO_FILTER_SET_SPEED(XDR * xdrs, VIDEO_RPC_VO_FILTER_SET_SPEED * objp);

extern "C" bool_t xdr_VIDEO_RPC_VO_FILTER_SHOW_STILL_PIC(XDR * xdrs, VIDEO_RPC_VO_FILTER_SHOW_STILL_PIC * objp);

extern "C" bool_t xdr_VIDEO_RPC_VO_FILTER_FILL_VIDEO_BORDER(XDR * xdrs, VIDEO_RPC_VO_FILTER_FILL_VIDEO_BORDER * objp);

extern "C" bool_t xdr_VIDEO_RPC_VO_FILTER_SET_FAST_DISPLAY(XDR * xdrs, VIDEO_RPC_VO_FILTER_SET_FAST_DISPLAY * objp);

extern "C" bool_t xdr_VIDEO_RPC_SUBPIC_DEC_ENABLE_SUBPIC(XDR * xdrs, VIDEO_RPC_SUBPIC_DEC_ENABLE_SUBPIC * objp);

extern "C" bool_t xdr_VIDEO_RPC_SUBPIC_DEC_CONFIGURE(XDR * xdrs, VIDEO_RPC_SUBPIC_DEC_CONFIGURE * objp);

extern "C" bool_t xdr_VIDEO_RPC_SUBPIC_DEC_PAGE(XDR * xdrs, VIDEO_RPC_SUBPIC_DEC_PAGE * objp);

extern "C" bool_t xdr_VIDEO_RPC_TVD_CONFIG(XDR * xdrs, VIDEO_RPC_TVD_CONFIG * objp);

extern "C" bool_t xdr_VIDEO_RPC_TVD_VIDEO_FORMAT(XDR * xdrs, VIDEO_RPC_TVD_VIDEO_FORMAT * objp);

extern "C" bool_t xdr_VIDEO_RPC_TVD_INPUT_FORMAT(XDR * xdrs, VIDEO_RPC_TVD_INPUT_FORMAT * objp);

extern "C" bool_t xdr_VIDEO_RPC_TVD_YC_SEP_MODE(XDR * xdrs, VIDEO_RPC_TVD_YC_SEP_MODE * objp);

extern "C" bool_t xdr_VIDEO_RPC_TVD_VBI_CTRL(XDR * xdrs, VIDEO_RPC_TVD_VBI_CTRL * objp);

extern "C" bool_t xdr_VIDEO_RPC_TVD_ADJ_CONTRAST(XDR * xdrs, VIDEO_RPC_TVD_ADJ_CONTRAST * objp);

extern "C" bool_t xdr_VIDEO_RPC_TVD_ADJ_BRIGHTNESS(XDR * xdrs, VIDEO_RPC_TVD_ADJ_BRIGHTNESS * objp);

extern "C" bool_t xdr_VIDEO_RPC_TVD_ADJ_SATURATION(XDR * xdrs, VIDEO_RPC_TVD_ADJ_SATURATION * objp);

extern "C" bool_t xdr_VIDEO_RPC_TVD_ADJ_HUE(XDR * xdrs, VIDEO_RPC_TVD_ADJ_HUE * objp);

extern "C" bool_t xdr_VIDEO_RPC_TVD_BLUE_MODE(XDR * xdrs, VIDEO_RPC_TVD_BLUE_MODE * objp);

extern "C" bool_t xdr_VIDEO_RPC_VIN_ADJ_SCALE_COEF(XDR * xdrs, VIDEO_RPC_VIN_ADJ_SCALE_COEF * objp);

extern "C" bool_t xdr_CHANNEL_RES(XDR * xdrs, CHANNEL_RES * objp);

extern "C" bool_t xdr_VIDEO_RPC_JPEG_DEC(XDR * xdrs, VIDEO_RPC_JPEG_DEC * objp);

extern "C" bool_t xdr_VIDEO_RPC_JPEG_DEC_BATCH(XDR * xdrs, VIDEO_RPC_JPEG_DEC_BATCH * objp);

extern "C" bool_t xdr_VIDEO_RPC_TRANSITION_EFFECT(XDR * xdrs, VIDEO_RPC_TRANSITION_EFFECT * objp);

extern "C" bool_t xdr_VIDEO_RPC_DEBUG_MEMORY(XDR * xdrs, VIDEO_RPC_DEBUG_MEMORY * objp);


/*common/IPC/src/ClientStub.c*/
extern "C" int client_call(RPC_STRUCT * rpc, u_long procedureID, int sendMode, xdrproc_t xdr_args, caddr_t args_ptr, long int args_size);

extern "C" RPC_STRUCT prepareRPCCall(CLNT_STRUCT * clnt, int result);

extern "C" void SendReply(u_long req_taskID, int req_context, char * ReplyParameter, u_long ParameterSize, xdrproc_t _xdr_result, int opt);


/*common/IPC/src/RPCProxy.c*/
extern THREAD_STRUCT * g_pStruct_a;

extern THREAD_STRUCT * g_pStruct_v;

extern int g_RPCThreadRunning;

extern pthread_t g_p_threads_a[3];

extern pthread_t g_p_threads_v[3];

extern "C" void DispatchRPCRequest(REG_STRUCT * reg, char * buf, int opt, pthread_mutex_t * pMutex);

extern "C" void RPCProxy_loop(THREAD_STRUCT * pData);

extern "C" int initRPCProxy(REG_STRUCT * reg);

extern "C" int DeInitRPCProxy();


/*common/IPC/src/RPCstruct.c*/
extern "C" bool_t xdr_RPC_STRUCT(XDR * xdrs, RPC_STRUCT * objp);

extern "C" CLNT_STRUCT prepareCLNT(int opt, long int programID, long int versionID);


/*common/IPC/src/SVCFunc.c*/
extern "C" int rpc_getargs(RPC_STRUCT * rpc, xdrproc_t _xdr_argument, caddr_t argument, int opt);

extern "C" void Reply_Handler(RPC_STRUCT * rpc, int opt, pthread_mutex_t * pMutex);

extern "C" REG_STRUCT * ipc_register(REG_STRUCT * reg, u_long programID, u_long versionID, void /*should not happen:void (*)(RPC_STRUCT * , int , pthread_mutex_t * )*/ * func);

extern "C" int ipc_unregister(REG_STRUCT * reg);

extern "C" REG_STRUCT * ReplyHandler_register(REG_STRUCT * reg);


/*common/IPC/src/rpcapi.c*/
extern int rfdp_a;

extern int rfdi_v;

extern char const * read_poll_dev_a;

extern char const * read_intr_dev_a;

extern char const * read_poll_dev_v;

extern char const * read_intr_dev_v;

extern "C" int openRPC();

extern "C" int closeRPC();

extern "C" void setTimeout(int msec);

extern "C" int readRingBuf(int opt, char * buf, int size);

extern "C" void ackTask(int taskid);


/*common/IPC/src/rpcstubapi.c*/
extern pthread_key_t tlsKey;

extern struct sigaction oldact;

typedef class {
  public:
    sigset_t newmask;
    sigset_t oldmask;
    sigset_t suspmask;
    unsigned char isAck;
  } sync_struct;

extern int wfdp_a;

extern int wfdi_v;

extern char const * write_poll_dev_a;

extern char const * write_intr_dev_a;

extern char const * write_poll_dev_v;

extern char const * write_intr_dev_v;

extern "C" int openStubRPC();

extern "C" int closeStubRPC();

extern "C" long int getTaskID();

extern "C" int writeRingBuf(int opt, char * buf, int size);

extern "C" void waitReply();

#define REPLYID 99   // for registering the Reply_Handler

#define NONBLOCK_MODE	0x00
#define	BLOCK_MODE	0x01
#define USE_POLL_BUF	0x00
#define USE_INTR_BUF	0x02
#define SEND_VIDEO_CPU	0x00
#define SEND_AUDIO_CPU	0x04

#define AUDIO_SYSTEM	201
#define VIDEO_SYSTEM	100
#define VERSION         0

#define D_PROGRAM 97
#define D_VERSION 0

#define S_OK 0x10000000

