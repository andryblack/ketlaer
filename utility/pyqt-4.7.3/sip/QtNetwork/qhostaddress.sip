// qhostaddress.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qhostaddress.h>
%End

class QHostAddress
{

%TypeHeaderCode
#include <qhostaddress.h>
%End

%ConvertToTypeCode
// SIP doesn't support automatic type convertors so we explicitly allow a
// QHostAddress::SpecialAddress to be used whenever a QHostAddress is expected.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QHostAddress_SpecialAddress)) ||
            sipCanConvertToType(sipPy, sipType_QHostAddress, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_QHostAddress_SpecialAddress)))
{
    *sipCppPtr = new QHostAddress((QHostAddress::SpecialAddress)SIPLong_AsLong(sipPy));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QHostAddress *>(sipConvertToType(sipPy, sipType_QHostAddress, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
%End

public:
    enum SpecialAddress
    {
        Null,
        Broadcast,
        LocalHost,
        LocalHostIPv6,
        Any,
        AnyIPv6,
    };

    QHostAddress();
    QHostAddress(QHostAddress::SpecialAddress /Constrained/);
    explicit QHostAddress(quint32);
    explicit QHostAddress(const QString &);
    QHostAddress(const QHostAddress &);
    ~QHostAddress();
    void setAddress(quint32);
    bool setAddress(const QString &);
    QAbstractSocket::NetworkLayerProtocol protocol() const;
    quint32 toIPv4Address() const;
    QString toString() const;
    QString scopeId() const;
    void setScopeId(const QString &);
    bool operator==(const QHostAddress &) const;
    bool operator==(QHostAddress::SpecialAddress) const;
%If (Qt_4_2_0 -)
    bool operator!=(const QHostAddress &) const;
%End
%If (Qt_4_2_0 -)
    bool operator!=(QHostAddress::SpecialAddress) const;
%End
    bool isNull() const;
    void clear();
%If (Qt_4_2_0 -)
    long __hash__() const;
%MethodCode
        sipRes = qHash(*sipCpp);
%End

%End
%If (Qt_4_5_0 -)
    bool isInSubnet(const QHostAddress &, int) const;
%End
%If (Qt_4_5_0 -)
    bool isInSubnet(const QPair<QHostAddress,int> &) const;
%End
%If (Qt_4_5_0 -)
    static QPair<QHostAddress,int> parseSubnet(const QString &);
%End
};

bool operator==(QHostAddress::SpecialAddress, const QHostAddress &);
%If (Qt_4_2_0 -)
QDataStream &operator<<(QDataStream &, const QHostAddress &);
%End
%If (Qt_4_2_0 -)
QDataStream &operator>>(QDataStream &, QHostAddress &);
%End
