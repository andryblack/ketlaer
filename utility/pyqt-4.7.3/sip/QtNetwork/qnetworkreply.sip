// qnetworkreply.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)

class QNetworkReply : QIODevice
{

%TypeHeaderCode
#include <qnetworkreply.h>
%End

public:
    enum NetworkError
    {
        NoError,
        ConnectionRefusedError,
        RemoteHostClosedError,
        HostNotFoundError,
        TimeoutError,
        OperationCanceledError,
        SslHandshakeFailedError,
        UnknownNetworkError,
        ProxyConnectionRefusedError,
        ProxyConnectionClosedError,
        ProxyNotFoundError,
        ProxyTimeoutError,
        ProxyAuthenticationRequiredError,
        UnknownProxyError,
        ContentAccessDenied,
        ContentOperationNotPermittedError,
        ContentNotFoundError,
        AuthenticationRequiredError,
        UnknownContentError,
        ProtocolUnknownError,
        ProtocolInvalidOperationError,
        ProtocolFailure,
%If (Qt_4_6_0 -)
        ContentReSendError,
%End
    };

    virtual ~QNetworkReply();
    virtual void abort() = 0;
    virtual void close();
    virtual bool isSequential() const;
    qint64 readBufferSize() const;
    virtual void setReadBufferSize(qint64);
    QNetworkAccessManager *manager() const;
    QNetworkAccessManager::Operation operation() const;
    QNetworkRequest request() const;
    QNetworkReply::NetworkError error() const;
    QUrl url() const;
    QVariant header(QNetworkRequest::KnownHeaders) const;
    bool hasRawHeader(const QByteArray &) const;
    QList<QByteArray> rawHeaderList() const;
    QByteArray rawHeader(const QByteArray &) const;
    QVariant attribute(QNetworkRequest::Attribute) const;
%If (PyQt_OpenSSL)
    QSslConfiguration sslConfiguration() const;
%End
%If (PyQt_OpenSSL)
    void setSslConfiguration(const QSslConfiguration &);
%End

public slots:
    virtual void ignoreSslErrors();

signals:
    void metaDataChanged();
    void finished();
    void error(QNetworkReply::NetworkError);
%If (PyQt_OpenSSL)
    void sslErrors(const QList<QSslError> &);
%End
    void uploadProgress(qint64, qint64);
    void downloadProgress(qint64, qint64);

protected:
    QNetworkReply(QObject *parent /TransferThis/ = 0);
    virtual qint64 writeData(const char * /Array/, qint64 /ArraySize/) /ReleaseGIL/;
    void setOperation(QNetworkAccessManager::Operation);
    void setRequest(const QNetworkRequest &);
    void setError(QNetworkReply::NetworkError, const QString &);
    void setUrl(const QUrl &);
    void setHeader(QNetworkRequest::KnownHeaders, const QVariant &);
    void setRawHeader(const QByteArray &, const QByteArray &);
    void setAttribute(QNetworkRequest::Attribute, const QVariant &);

public:
%If (Qt_4_6_0 -)
    bool isFinished() const;
%End
%If (Qt_4_6_0 -)
    bool isRunning() const;
%End
%If (Qt_4_6_0 -)
%If (PyQt_OpenSSL)
    void ignoreSslErrors(const QList<QSslError> &);
%End
%End
};

%End
