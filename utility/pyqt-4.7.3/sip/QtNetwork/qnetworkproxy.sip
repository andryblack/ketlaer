// qnetworkproxy.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QNetworkProxy
{

%TypeHeaderCode
#include <qnetworkproxy.h>
%End

public:
    enum ProxyType
    {
        DefaultProxy,
        Socks5Proxy,
        NoProxy,
%If (Qt_4_3_0 -)
        HttpProxy,
%End
%If (Qt_4_4_0 -)
        HttpCachingProxy,
%End
%If (Qt_4_4_0 -)
        FtpCachingProxy,
%End
    };

    QNetworkProxy();
    QNetworkProxy(QNetworkProxy::ProxyType, const QString &hostName /DocValue="Py_v3:''"/ = QString(), quint16 port = 0, const QString &user /DocValue="Py_v3:''"/ = QString(), const QString &password /DocValue="Py_v3:''"/ = QString());
    QNetworkProxy(const QNetworkProxy &);
    ~QNetworkProxy();
    void setType(QNetworkProxy::ProxyType);
    QNetworkProxy::ProxyType type() const;
    void setUser(const QString &);
    QString user() const;
    void setPassword(const QString &);
    QString password() const;
    void setHostName(const QString &);
    QString hostName() const;
    void setPort(quint16);
    quint16 port() const;
    static void setApplicationProxy(const QNetworkProxy &);
    static QNetworkProxy applicationProxy();
%If (Qt_4_4_0 -)
    bool isCachingProxy() const;
%End
%If (Qt_4_4_0 -)
    bool isTransparentProxy() const;
%End
%If (Qt_4_4_0 -)
    bool operator==(const QNetworkProxy &) const;
%End
%If (Qt_4_4_0 -)
    bool operator!=(const QNetworkProxy &) const;
%End
%If (Qt_4_5_0 -)

    enum Capability
    {
        TunnelingCapability,
        ListeningCapability,
        UdpTunnelingCapability,
        CachingCapability,
        HostNameLookupCapability,
    };

%End
%If (Qt_4_5_0 -)
    typedef QFlags<QNetworkProxy::Capability> Capabilities;
%End
%If (Qt_4_5_0 -)
    void setCapabilities(QFlags<QNetworkProxy::Capability>);
%End
%If (Qt_4_5_0 -)
    QFlags<QNetworkProxy::Capability> capabilities() const;
%End
};

%If (Qt_4_5_0 -)

class QNetworkProxyQuery
{

%TypeHeaderCode
#include <qnetworkproxy.h>
%End

public:
    enum QueryType
    {
        TcpSocket,
        UdpSocket,
        TcpServer,
        UrlRequest,
    };

    QNetworkProxyQuery();
    QNetworkProxyQuery(const QUrl &, QNetworkProxyQuery::QueryType type = QNetworkProxyQuery::UrlRequest);
    QNetworkProxyQuery(const QString &, int, const QString &protocolTag /DocValue="Py_v3:''"/ = QString(), QNetworkProxyQuery::QueryType type = QNetworkProxyQuery::TcpSocket);
    QNetworkProxyQuery(quint16, const QString &protocolTag /DocValue="Py_v3:''"/ = QString(), QNetworkProxyQuery::QueryType type = QNetworkProxyQuery::TcpServer);
    QNetworkProxyQuery(const QNetworkProxyQuery &);
    ~QNetworkProxyQuery();
    bool operator==(const QNetworkProxyQuery &) const;
    bool operator!=(const QNetworkProxyQuery &) const;
    QNetworkProxyQuery::QueryType queryType() const;
    void setQueryType(QNetworkProxyQuery::QueryType);
    int peerPort() const;
    void setPeerPort(int);
    QString peerHostName() const;
    void setPeerHostName(const QString &);
    int localPort() const;
    void setLocalPort(int);
    QString protocolTag() const;
    void setProtocolTag(const QString &);
    QUrl url() const;
    void setUrl(const QUrl &);
};

%End
%If (Qt_4_5_0 -)

class QNetworkProxyFactory /Supertype=sip.wrapper/
{

%TypeHeaderCode
#include <qnetworkproxy.h>
%End

public:
    QNetworkProxyFactory();
    virtual ~QNetworkProxyFactory();
    virtual QList<QNetworkProxy> queryProxy(const QNetworkProxyQuery &query = QNetworkProxyQuery()) = 0;
    static void setApplicationProxyFactory(QNetworkProxyFactory * /Transfer/);
    static QList<QNetworkProxy> proxyForQuery(const QNetworkProxyQuery &);
    static QList<QNetworkProxy> systemProxyForQuery(const QNetworkProxyQuery &query = QNetworkProxyQuery());
%If (Qt_4_6_0 -)
    static void setUseSystemConfiguration(bool);
%End
};

%End
