// qhttp.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QHttpHeader
{

%TypeHeaderCode
#include <qhttp.h>
%End

public:
    QHttpHeader();
    QHttpHeader(const QHttpHeader &);
    QHttpHeader(const QString &);
    virtual ~QHttpHeader();
    void setValue(const QString &, const QString &);
    void setValues(const QList<QPair<QString, QString> > &);
    void addValue(const QString &, const QString &);
    QList<QPair<QString, QString> > values() const;
    bool hasKey(const QString &) const;
    QStringList keys() const;
    QString value(const QString &) const;
    QStringList allValues(const QString &) const;
    void removeValue(const QString &);
    void removeAllValues(const QString &);
    bool hasContentLength() const;
    uint contentLength() const;
    void setContentLength(int);
    bool hasContentType() const;
    QString contentType() const;
    void setContentType(const QString &);
    virtual QString toString() const;
    bool isValid() const;
    virtual int majorVersion() const = 0;
    virtual int minorVersion() const = 0;

protected:
    virtual bool parseLine(const QString &, int);
    bool parse(const QString &);
    void setValid(bool);
};

class QHttpResponseHeader : QHttpHeader
{

%TypeHeaderCode
#include <qhttp.h>
%End

public:
    QHttpResponseHeader();
    QHttpResponseHeader(const QHttpResponseHeader &);
    QHttpResponseHeader(const QString &);
    QHttpResponseHeader(int, const QString &text /DocValue="Py_v3:''"/ = QString(), int major = 1, int minor = 1);
    void setStatusLine(int, const QString &text /DocValue="Py_v3:''"/ = QString(), int major = 1, int minor = 1);
    int statusCode() const;
    QString reasonPhrase() const;
    virtual int majorVersion() const;
    virtual int minorVersion() const;
    virtual QString toString() const;

protected:
    virtual bool parseLine(const QString &, int);
};

class QHttpRequestHeader : QHttpHeader
{

%TypeHeaderCode
#include <qhttp.h>
%End

public:
    QHttpRequestHeader();
    QHttpRequestHeader(const QString &, const QString &, int major = 1, int minor = 1);
    QHttpRequestHeader(const QHttpRequestHeader &);
    QHttpRequestHeader(const QString &);
    void setRequest(const QString &, const QString &, int major = 1, int minor = 1);
    QString method() const;
    QString path() const;
    virtual int majorVersion() const;
    virtual int minorVersion() const;
    virtual QString toString() const;

protected:
    virtual bool parseLine(const QString &, int);
};

class QHttp : QObject
{

%TypeHeaderCode
#include <qhttp.h>
%End

public:
    explicit QHttp(QObject *parent /TransferThis/ = 0);
    QHttp(const QString &, quint16 port = 80, QObject *parent /TransferThis/ = 0);
%If (Qt_4_3_0 -)
    QHttp(const QString &, QHttp::ConnectionMode, quint16 port = 0, QObject *parent /TransferThis/ = 0);
%End
    virtual ~QHttp();
%If (Qt_4_3_0 -)

    enum ConnectionMode
    {
        ConnectionModeHttp,
        ConnectionModeHttps,
    };

%End

    enum State
    {
        Unconnected,
        HostLookup,
        Connecting,
        Sending,
        Reading,
        Connected,
        Closing,
    };

    enum Error
    {
        NoError,
        UnknownError,
        HostNotFound,
        ConnectionRefused,
        UnexpectedClose,
        InvalidResponseHeader,
        WrongContentLength,
        Aborted,
%If (Qt_4_3_0 -)
        AuthenticationRequiredError,
%End
%If (Qt_4_3_0 -)
        ProxyAuthenticationRequiredError,
%End
    };

    int setHost(const QString &, quint16 port = 80);
%If (Qt_4_3_0 -)
    int setHost(const QString &, QHttp::ConnectionMode, quint16 port = 0);
%End
    int setSocket(QTcpSocket *);
    int setUser(const QString &, const QString &password /DocValue="Py_v3:''"/ = QString());
    int setProxy(const QString &, int, const QString &user /DocValue="Py_v3:''"/ = QString(), const QString &password /DocValue="Py_v3:''"/ = QString());
%If (Qt_4_3_0 -)
    int setProxy(const QNetworkProxy &);
%End
    int get(const QString &, QIODevice *to = 0);
    int post(const QString &, QIODevice *, QIODevice *to = 0);
    int post(const QString &, const QByteArray &, QIODevice *to = 0);
    int head(const QString &);
    int request(const QHttpRequestHeader &, QIODevice *data = 0, QIODevice *to = 0);
    int request(const QHttpRequestHeader &, const QByteArray &, QIODevice *to = 0);
    int close();
    qint64 bytesAvailable() const;
    SIP_PYOBJECT read(qint64 maxlen) /DocType="Py_v3:bytes;str",ReleaseGIL/;
%MethodCode
        // Return the data read or None if there was an error.
        if (a0 < 0)
        {
            PyErr_SetString(PyExc_ValueError, "maximum length of data to be read cannot be negative");
            sipIsErr = 1;
        }
        else
        {
            char *s = new char[a0];
            qint64 len;
        
            Py_BEGIN_ALLOW_THREADS
            len = sipCpp->read(s, a0);
            Py_END_ALLOW_THREADS
        
            if (len < 0)
            {
                Py_INCREF(Py_None);
                sipRes = Py_None;
            }
            else
            {
                sipRes = SIPBytes_FromStringAndSize(s, len);
        
                if (!sipRes)
                    sipIsErr = 1;
            }
        
            delete[] s;
        }
%End

    QByteArray readAll() /ReleaseGIL/;
    int currentId() const;
    QIODevice *currentSourceDevice() const;
    QIODevice *currentDestinationDevice() const;
    QHttpRequestHeader currentRequest() const;
    QHttpResponseHeader lastResponse() const;
    bool hasPendingRequests() const;
    void clearPendingRequests();
    QHttp::State state() const;
    QHttp::Error error() const;
    QString errorString() const;

public slots:
    void abort();
%If (Qt_4_3_0 -)
%If (PyQt_OpenSSL)
    void ignoreSslErrors();
%End
%End

signals:
    void stateChanged(int);
    void responseHeaderReceived(const QHttpResponseHeader &);
    void readyRead(const QHttpResponseHeader &);
    void dataSendProgress(int, int);
    void dataReadProgress(int, int);
    void requestStarted(int);
    void requestFinished(int, bool);
    void done(bool);
%If (Qt_4_3_0 -)
    void proxyAuthenticationRequired(const QNetworkProxy &, QAuthenticator *);
%End
%If (Qt_4_3_0 -)
    void authenticationRequired(const QString &, quint16, QAuthenticator *);
%End
%If (Qt_4_3_0 -)
%If (PyQt_OpenSSL)
    void sslErrors(const QList<QSslError> &);
%End
%End

private:
    QHttp(const QHttp &);
};
