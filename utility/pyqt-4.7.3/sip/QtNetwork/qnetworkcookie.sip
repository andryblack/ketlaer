// qnetworkcookie.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtNetwork Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)

class QNetworkCookie
{

%TypeHeaderCode
#include <qnetworkcookie.h>
%End

public:
    enum RawForm
    {
        NameAndValueOnly,
        Full,
    };

    QNetworkCookie(const QByteArray &name = QByteArray(), const QByteArray &value = QByteArray());
    QNetworkCookie(const QNetworkCookie &);
    ~QNetworkCookie();
    bool isSecure() const;
    void setSecure(bool);
    bool isSessionCookie() const;
    QDateTime expirationDate() const;
    void setExpirationDate(const QDateTime &);
    QString domain() const;
    void setDomain(const QString &);
    QString path() const;
    void setPath(const QString &);
    QByteArray name() const;
    void setName(const QByteArray &);
    QByteArray value() const;
    void setValue(const QByteArray &);
    QByteArray toRawForm(QNetworkCookie::RawForm form = QNetworkCookie::Full) const;
    static QList<QNetworkCookie> parseCookies(const QByteArray &);
    bool operator==(const QNetworkCookie &) const;
    bool operator!=(const QNetworkCookie &) const;
%If (Qt_4_5_0 -)
    bool isHttpOnly() const;
%End
%If (Qt_4_5_0 -)
    void setHttpOnly(bool);
%End
};

%End
%If (Qt_4_4_0 - Qt_4_6_0)

class QNetworkCookieJar : QObject
{

%TypeHeaderCode
#include <qnetworkcookie.h>
%End

public:
    QNetworkCookieJar(QObject *parent /TransferThis/ = 0);
    virtual ~QNetworkCookieJar();
    virtual QList<QNetworkCookie> cookiesForUrl(const QUrl &) const;
    virtual bool setCookiesFromUrl(const QList<QNetworkCookie> &, const QUrl &);

protected:
    QList<QNetworkCookie> allCookies() const;
    void setAllCookies(const QList<QNetworkCookie> &);

private:
    QNetworkCookieJar(const QNetworkCookieJar &);
};

%End
