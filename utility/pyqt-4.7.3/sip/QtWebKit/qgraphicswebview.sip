// qgraphicswebview.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtWebKit Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_6_0 -)

class QGraphicsWebView : QGraphicsWidget
{

%TypeHeaderCode
#include <qgraphicswebview.h>
%End

%ConvertToSubClassCode
    sipType = 0;
    
    // For some reason Qt doesn't allocate a new type for this so we have to test
    // the numeric and QObject types.
    if (sipCpp->type() == 11)
    {
        QGraphicsWidget *gw = static_cast<QGraphicsWidget *>(sipCpp);
    
        if (gw->inherits("QGraphicsWebView"))
        {
            *sipCppRet = static_cast<QGraphicsWebView *>(gw);
            sipType = sipType_QGraphicsWebView;
        }
    }
%End

public:
    explicit QGraphicsWebView(QGraphicsItem *parent /TransferThis/ = 0);
    virtual ~QGraphicsWebView();
    QWebPage *page() const;
    void setPage(QWebPage *);
    QUrl url() const;
    void setUrl(const QUrl &);
    QString title() const;
    QIcon icon() const;
    qreal zoomFactor() const;
    void setZoomFactor(qreal);
    bool isModified() const;
    void load(const QUrl &) /ReleaseGIL/;
    void load(const QNetworkRequest &, QNetworkAccessManager::Operation operation = QNetworkAccessManager::GetOperation, const QByteArray &body = QByteArray()) /ReleaseGIL/;
    void setHtml(const QString &, const QUrl &baseUrl = QUrl());
    void setContent(const QByteArray &, const QString &mimeType = QString(), const QUrl &baseUrl = QUrl());
    QWebHistory *history() const;
    QWebSettings *settings() const;
    QAction *pageAction(QWebPage::WebAction) const;
    void triggerPageAction(QWebPage::WebAction, bool checked = false);
    bool findText(const QString &, QFlags<QWebPage::FindFlag> options = 0);
    virtual void setGeometry(const QRectF &);
    virtual void updateGeometry();
    virtual void paint(QPainter *, const QStyleOptionGraphicsItem *, QWidget *widget = 0);
    virtual QVariant itemChange(QGraphicsItem::GraphicsItemChange, const QVariant &);
    virtual bool event(QEvent *);
    virtual QSizeF sizeHint(Qt::SizeHint, const QSizeF &) const;
    virtual QVariant inputMethodQuery(Qt::InputMethodQuery) const;

public slots:
    void stop();
    void back();
    void forward();
    void reload();

signals:
    void loadStarted();
    void loadFinished(bool);
    void loadProgress(int);
    void urlChanged(const QUrl &);
    void titleChanged(const QString &);
    void iconChanged();
    void statusBarMessage(const QString &);
    void linkClicked(const QUrl &);

protected:
    virtual void mousePressEvent(QGraphicsSceneMouseEvent *);
    virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent *);
    virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent *);
    virtual void mouseMoveEvent(QGraphicsSceneMouseEvent *);
    virtual void hoverMoveEvent(QGraphicsSceneHoverEvent *);
    virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent *);
    virtual void wheelEvent(QGraphicsSceneWheelEvent *);
    virtual void keyPressEvent(QKeyEvent *);
    virtual void keyReleaseEvent(QKeyEvent *);
    virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent *);
    virtual void dragEnterEvent(QGraphicsSceneDragDropEvent *);
    virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent *);
    virtual void dragMoveEvent(QGraphicsSceneDragDropEvent *);
    virtual void dropEvent(QGraphicsSceneDragDropEvent *);
    virtual void focusInEvent(QFocusEvent *);
    virtual void focusOutEvent(QFocusEvent *);
    virtual void inputMethodEvent(QInputMethodEvent *);
    virtual bool focusNextPrevChild(bool);
    virtual bool sceneEvent(QEvent *);
};

%End

%ModuleHeaderCode
#if QT_VERSION >= 0x040600
// This is needed by the %ConvertSubClassCode.
#include <QGraphicsWebView>
#endif
%End
