// qwebelement.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtWebKit Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_6_0 -)

class QWebElement
{

%TypeHeaderCode
#include <qwebelement.h>
%End

public:
    QWebElement();
    QWebElement(const QWebElement &);
    ~QWebElement();
    bool operator==(const QWebElement &) const;
    bool operator!=(const QWebElement &) const;
    bool isNull() const;
    QWebElementCollection findAll(const QString &) const;
    QWebElement findFirst(const QString &) const;
    void setPlainText(const QString &);
    QString toPlainText() const;
    void setOuterXml(const QString &);
    QString toOuterXml() const;
    void setInnerXml(const QString &);
    QString toInnerXml() const;
    void setAttribute(const QString &, const QString &);
    void setAttributeNS(const QString &, const QString &, const QString &);
    QString attribute(const QString &, const QString &defaultValue = QString()) const;
    QString attributeNS(const QString &, const QString &, const QString &defaultValue = QString()) const;
    bool hasAttribute(const QString &) const;
    bool hasAttributeNS(const QString &, const QString &) const;
    void removeAttribute(const QString &);
    void removeAttributeNS(const QString &, const QString &);
    bool hasAttributes() const;
    QStringList attributeNames(const QString &namespaceUri = QString()) const;
    QStringList classes() const;
    bool hasClass(const QString &) const;
    void addClass(const QString &);
    void removeClass(const QString &);
    void toggleClass(const QString &);
    bool hasFocus() const;
    void setFocus();
    QRect geometry() const;
    QString tagName() const;
    QString prefix() const;
    QString localName() const;
    QString namespaceUri() const;
    QWebElement parent() const;
    QWebElement firstChild() const;
    QWebElement lastChild() const;
    QWebElement nextSibling() const;
    QWebElement previousSibling() const;
    QWebElement document() const;
    QWebFrame *webFrame() const;
    void appendInside(const QString &);
    void appendInside(const QWebElement &);
    void prependInside(const QString &);
    void prependInside(const QWebElement &);
    void appendOutside(const QString &);
    void appendOutside(const QWebElement &);
    void prependOutside(const QString &);
    void prependOutside(const QWebElement &);
    void encloseContentsWith(const QWebElement &);
    void encloseContentsWith(const QString &);
    void encloseWith(const QString &);
    void encloseWith(const QWebElement &);
    void replace(const QString &);
    void replace(const QWebElement &);
    QWebElement clone() const;
    QWebElement &takeFromDocument();
    void removeFromDocument();
    void removeAllChildren();
    QVariant evaluateJavaScript(const QString &);

    enum StyleResolveStrategy
    {
        InlineStyle,
        CascadedStyle,
        ComputedStyle,
    };

    QString styleProperty(const QString &, QWebElement::StyleResolveStrategy) const;
    void setStyleProperty(const QString &, const QString &);
    void render(QPainter *);
};

%End
%If (Qt_4_6_0 -)

class QWebElementCollection
{

%TypeHeaderCode
#include <qwebelement.h>
%End

public:
    QWebElementCollection();
    QWebElementCollection(const QWebElement &, const QString &);
    QWebElementCollection(const QWebElementCollection &);
    ~QWebElementCollection();
    QWebElementCollection operator+(const QWebElementCollection &) const;
    QWebElementCollection &operator+=(const QWebElementCollection &);
    void append(const QWebElementCollection &);
    int count() const;
    QWebElement at(int) const;
    QWebElement operator[](int) const;
    QWebElement first() const;
    QWebElement last() const;
    QList<QWebElement> toList() const;
};

%End
