// abstractformwindow.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtDesigner Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QDesignerFormWindowInterface : QWidget /Abstract/
{

%TypeHeaderCode
#include <abstractformwindow.h>
%End

public:
    enum FeatureFlag
    {
        EditFeature,
        GridFeature,
        TabOrderFeature,
        DefaultFeature,
    };

    typedef QFlags<QDesignerFormWindowInterface::FeatureFlag> Feature;
    QDesignerFormWindowInterface(QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0);
    virtual ~QDesignerFormWindowInterface();
    virtual QString fileName() const = 0;
    virtual QDir absoluteDir() const = 0;
    virtual QString contents() const = 0;
    virtual void setContents(QIODevice *) = 0;
    virtual QFlags<QDesignerFormWindowInterface::FeatureFlag> features() const = 0;
    virtual bool hasFeature(QFlags<QDesignerFormWindowInterface::FeatureFlag>) const = 0;
    virtual QString author() const = 0;
    virtual void setAuthor(const QString &) = 0;
    virtual QString comment() const = 0;
    virtual void setComment(const QString &) = 0;
    virtual void layoutDefault(int *, int *) = 0;
    virtual void setLayoutDefault(int, int) = 0;
    virtual void layoutFunction(QString * /Out/, QString * /Out/) = 0;
    virtual void setLayoutFunction(const QString &, const QString &) = 0;
    virtual QString pixmapFunction() const = 0;
    virtual void setPixmapFunction(const QString &) = 0;
    virtual QString exportMacro() const = 0;
    virtual void setExportMacro(const QString &) = 0;
    virtual QStringList includeHints() const = 0;
    virtual void setIncludeHints(const QStringList &) = 0;
    virtual QDesignerFormEditorInterface *core() const;
    virtual QDesignerFormWindowCursorInterface *cursor() const = 0;
    virtual QPoint grid() const = 0;
    virtual QWidget *mainContainer() const = 0;
    virtual void setMainContainer(QWidget *) = 0;
    virtual bool isManaged(QWidget *) const = 0;
    virtual bool isDirty() const = 0;
    static QDesignerFormWindowInterface *findFormWindow(QWidget *);
%If (Qt_4_4_0 -)
    static QDesignerFormWindowInterface *findFormWindow(QObject *);
%End
    virtual void emitSelectionChanged() = 0;
    virtual QStringList resourceFiles() const = 0;
    virtual void addResourceFile(const QString &) = 0;
    virtual void removeResourceFile(const QString &) = 0;

public slots:
    virtual void manageWidget(QWidget *) = 0;
    virtual void unmanageWidget(QWidget *) = 0;
    virtual void setFeatures(QFlags<QDesignerFormWindowInterface::FeatureFlag>) = 0;
    virtual void setDirty(bool) = 0;
    virtual void clearSelection(bool update = true) = 0;
    virtual void selectWidget(QWidget *, bool select = true) = 0;
    virtual void setGrid(const QPoint &) = 0;
    virtual void setFileName(const QString &) = 0;
    virtual void setContents(const QString &) = 0;

signals:
    void mainContainerChanged(QWidget *);
    void fileNameChanged(const QString &);
    void featureChanged(QFlags<QDesignerFormWindowInterface::FeatureFlag>);
    void selectionChanged();
    void geometryChanged();
    void resourceFilesChanged();
    void widgetManaged(QWidget *);
    void widgetUnmanaged(QWidget *);
    void aboutToUnmanageWidget(QWidget *);
    void activated(QWidget *);
    void changed();
    void widgetRemoved(QWidget *);
%If (Qt_4_5_0 -)
    void objectRemoved(QObject *);
%End
};
