// qfilesystemmodel.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)

class QFileSystemModel : QAbstractItemModel
{

%TypeHeaderCode
#include <qfilesystemmodel.h>
%End

public:
    enum Roles
    {
        FileIconRole,
        FilePathRole,
        FileNameRole,
        FilePermissions,
    };

    explicit QFileSystemModel(QObject *parent /TransferThis/ = 0);
    virtual ~QFileSystemModel();
    virtual QModelIndex index(int, int, const QModelIndex &parent = QModelIndex()) const;
    QModelIndex index(const QString &, int column = 0) const;
    virtual QModelIndex parent(const QModelIndex &) const;
    virtual bool hasChildren(const QModelIndex &parent = QModelIndex()) const;
    virtual bool canFetchMore(const QModelIndex &) const;
    virtual void fetchMore(const QModelIndex &);
    virtual int rowCount(const QModelIndex &parent = QModelIndex()) const;
    virtual int columnCount(const QModelIndex &parent = QModelIndex()) const;
    QVariant myComputer(int role = Qt::DisplayRole) const;
    virtual QVariant data(const QModelIndex &, int role = Qt::DisplayRole) const;
    virtual bool setData(const QModelIndex &, const QVariant &, int role = Qt::EditRole);
    virtual QVariant headerData(int, Qt::Orientation, int role = Qt::DisplayRole) const;
    virtual Qt::ItemFlags flags(const QModelIndex &) const;
    virtual void sort(int, Qt::SortOrder order = Qt::AscendingOrder);
    virtual QStringList mimeTypes() const;
    virtual QMimeData *mimeData(const QModelIndexList &) const;
    virtual bool dropMimeData(const QMimeData *, Qt::DropAction, int, int, const QModelIndex &);
    virtual Qt::DropActions supportedDropActions() const;
    QModelIndex setRootPath(const QString &);
    QString rootPath() const;
    QDir rootDirectory() const;
    void setIconProvider(QFileIconProvider * /KeepReference/);
    QFileIconProvider *iconProvider() const;
    void setFilter(QFlags<QDir::Filter>);
    QFlags<QDir::Filter> filter() const;
    void setResolveSymlinks(bool);
    bool resolveSymlinks() const;
    void setReadOnly(bool);
    bool isReadOnly() const;
    void setNameFilterDisables(bool);
    bool nameFilterDisables() const;
    void setNameFilters(const QStringList &);
    QStringList nameFilters() const;
    QString filePath(const QModelIndex &) const;
    bool isDir(const QModelIndex &) const;
    qint64 size(const QModelIndex &) const;
    QString type(const QModelIndex &) const;
    QDateTime lastModified(const QModelIndex &) const;
    QModelIndex mkdir(const QModelIndex &, const QString &);
    QFlags<QFile::Permission> permissions(const QModelIndex &) const;
    bool rmdir(const QModelIndex &) const;
    QString fileName(const QModelIndex &) const;
    QIcon fileIcon(const QModelIndex &) const;
    QFileInfo fileInfo(const QModelIndex &) const;
    bool remove(const QModelIndex &) const;

signals:
    void fileRenamed(const QString &, const QString &, const QString &);
    void rootPathChanged(const QString &);

protected:
%If (Qt_4_4_1 -)
    virtual bool event(QEvent *);
%End
    virtual void timerEvent(QTimerEvent *);

private:
    QFileSystemModel(const QFileSystemModel &);
};

%End
