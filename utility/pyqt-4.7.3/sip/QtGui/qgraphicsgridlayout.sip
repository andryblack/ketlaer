// qgraphicsgridlayout.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)

class QGraphicsGridLayout : QGraphicsLayout
{

%TypeHeaderCode
#include <qgraphicsgridlayout.h>
%End

public:
    QGraphicsGridLayout(QGraphicsLayoutItem *parent /TransferThis/ = 0);
    virtual ~QGraphicsGridLayout();
    void addItem(QGraphicsLayoutItem * /Transfer/, int, int, int, int, Qt::Alignment alignment = 0);
    void addItem(QGraphicsLayoutItem * /TransferThis/, int, int, Qt::Alignment alignment = 0);
    void setHorizontalSpacing(qreal);
    qreal horizontalSpacing() const;
    void setVerticalSpacing(qreal);
    qreal verticalSpacing() const;
    void setSpacing(qreal);
    void setRowSpacing(int, qreal);
    qreal rowSpacing(int) const;
    void setColumnSpacing(int, qreal);
    qreal columnSpacing(int) const;
    void setRowStretchFactor(int, int);
    int rowStretchFactor(int) const;
    void setColumnStretchFactor(int, int);
    int columnStretchFactor(int) const;
    void setRowMinimumHeight(int, qreal);
    qreal rowMinimumHeight(int) const;
    void setRowPreferredHeight(int, qreal);
    qreal rowPreferredHeight(int) const;
    void setRowMaximumHeight(int, qreal);
    qreal rowMaximumHeight(int) const;
    void setRowFixedHeight(int, qreal);
    void setColumnMinimumWidth(int, qreal);
    qreal columnMinimumWidth(int) const;
    void setColumnPreferredWidth(int, qreal);
    qreal columnPreferredWidth(int) const;
    void setColumnMaximumWidth(int, qreal);
    qreal columnMaximumWidth(int) const;
    void setColumnFixedWidth(int, qreal);
    void setRowAlignment(int, Qt::Alignment);
    Qt::Alignment rowAlignment(int) const;
    void setColumnAlignment(int, Qt::Alignment);
    Qt::Alignment columnAlignment(int) const;
    void setAlignment(QGraphicsLayoutItem *, Qt::Alignment);
    Qt::Alignment alignment(QGraphicsLayoutItem *) const;
    int rowCount() const;
    int columnCount() const;
    QGraphicsLayoutItem *itemAt(int, int) const;
    virtual int count() const;
    virtual QGraphicsLayoutItem *itemAt(int) const;
    virtual void removeAt(int);
%MethodCode
        // The ownership of any existing item must be passed back to Python.
        QGraphicsLayoutItem *itm;
        
        if (a0 < sipCpp->count())
            itm = sipCpp->itemAt(a0);
        else
            itm = 0;
        
        Py_BEGIN_ALLOW_THREADS
        sipSelfWasArg ? sipCpp->QGraphicsGridLayout::removeAt(a0)
                      : sipCpp->removeAt(a0);
        Py_END_ALLOW_THREADS
        
        if (itm)
        {
            PyObject *itmo = sipGetPyObject(itm, sipType_QGraphicsLayoutItem);
        
            if (itmo)
                sipTransferBack(itmo);
        }
%End

    virtual void invalidate();
    virtual void setGeometry(const QRectF &);
    virtual QSizeF sizeHint(Qt::SizeHint, const QSizeF &constraint = QSizeF()) const;

private:
    QGraphicsGridLayout(const QGraphicsGridLayout &);
};

%End
