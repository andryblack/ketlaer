// qmatrix.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qmatrix.h>
%End

class QMatrix
{

%TypeHeaderCode
#include <qmatrix.h>
%End

%PickleCode
    sipRes = Py_BuildValue((char *)"dddddd", sipCpp->m11(), sipCpp->m12(), sipCpp->m21(), sipCpp->m22(), sipCpp->dx(), sipCpp->dy());
%End

public:
    QMatrix();
    QMatrix(qreal, qreal, qreal, qreal, qreal, qreal);
    QMatrix(const QMatrix &);
    void setMatrix(qreal, qreal, qreal, qreal, qreal, qreal);
    qreal m11() const;
    qreal m12() const;
    qreal m21() const;
    qreal m22() const;
    qreal dx() const;
    qreal dy() const;
    void map(int /Constrained/, int /Constrained/, int *, int *) const;
    void map(qreal, qreal, qreal *, qreal *) const;
    QRect mapRect(const QRect &) const;
    QRectF mapRect(const QRectF &) const;
    QPoint map(const QPoint &) const;
    QPointF map(const QPointF &) const;
    QLine map(const QLine &) const;
    QLineF map(const QLineF &) const;
    QPolygonF map(const QPolygonF &) const;
    QPolygon map(const QPolygon &) const;
    QRegion map(const QRegion &) const;
    QPainterPath map(const QPainterPath &) const;
    QPolygon mapToPolygon(const QRect &) const;
    void reset();
    QMatrix &translate(qreal, qreal);
    QMatrix &scale(qreal, qreal);
    QMatrix &shear(qreal, qreal);
    QMatrix &rotate(qreal);
    bool isInvertible() const;
    qreal det() const;
    QMatrix inverted(bool *invertible = 0) const;
    bool operator==(const QMatrix &) const;
    bool operator!=(const QMatrix &) const;
    QMatrix &operator*=(const QMatrix &);
    QMatrix operator*(const QMatrix &) const;
    bool isIdentity() const;
%If (Qt_4_6_0 -)
    qreal determinant() const;
%End
};

QPoint operator*(const QPoint &, const QMatrix &);
QPointF operator*(const QPointF &, const QMatrix &);
QLineF operator*(const QLineF &, const QMatrix &);
QLine operator*(const QLine &, const QMatrix &);
QPolygon operator*(const QPolygon &, const QMatrix &);
QPolygonF operator*(const QPolygonF &, const QMatrix &);
QRegion operator*(const QRegion &, const QMatrix &);
QPainterPath operator*(const QPainterPath &, const QMatrix &);
QDataStream &operator<<(QDataStream &, const QMatrix & /Constrained/);
QDataStream &operator>>(QDataStream &, QMatrix & /Constrained/);
%If (Qt_4_6_0 -)
bool qFuzzyCompare(const QMatrix &, const QMatrix &);
%End
