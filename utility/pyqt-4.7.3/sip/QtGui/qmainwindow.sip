// qmainwindow.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qmainwindow.h>
%End

class QMainWindow : QWidget
{

%TypeHeaderCode
#include <qmainwindow.h>
%End

public:
%If (Qt_4_2_0 -)
    QMainWindow(QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0);
%End
%If (- Qt_4_2_0)
    QMainWindow(QWidget *parent /TransferThis/ = 0, Qt::WFlags flags = 0);
%End
    virtual ~QMainWindow();
    QSize iconSize() const;
    void setIconSize(const QSize &);
    Qt::ToolButtonStyle toolButtonStyle() const;
    void setToolButtonStyle(Qt::ToolButtonStyle);
    QMenuBar *menuBar() const /Transfer/;
    void setMenuBar(QMenuBar * /Transfer/);
    QStatusBar *statusBar() const /Transfer/;
    void setStatusBar(QStatusBar * /Transfer/);
    QWidget *centralWidget() const;
    void setCentralWidget(QWidget * /Transfer/);
    void setCorner(Qt::Corner, Qt::DockWidgetArea);
    Qt::DockWidgetArea corner(Qt::Corner) const;
    void addToolBarBreak(Qt::ToolBarArea area = Qt::TopToolBarArea);
    void insertToolBarBreak(QToolBar *);
    void addToolBar(Qt::ToolBarArea, QToolBar * /Transfer/);
    void addToolBar(QToolBar * /Transfer/);
    QToolBar *addToolBar(const QString &) /Transfer/;
    void insertToolBar(QToolBar *, QToolBar * /Transfer/);
    void removeToolBar(QToolBar * /TransferBack/);
    Qt::ToolBarArea toolBarArea(QToolBar *) const;
    void addDockWidget(Qt::DockWidgetArea, QDockWidget * /Transfer/);
    void addDockWidget(Qt::DockWidgetArea, QDockWidget * /Transfer/, Qt::Orientation);
    void splitDockWidget(QDockWidget *, QDockWidget * /Transfer/, Qt::Orientation);
    void removeDockWidget(QDockWidget * /TransferBack/);
    Qt::DockWidgetArea dockWidgetArea(QDockWidget *) const;
    QByteArray saveState(int version = 0) const;
    bool restoreState(const QByteArray &, int version = 0);
    virtual QMenu *createPopupMenu() /Factory/;

public slots:
%If (Qt_4_2_0 -)
    void setAnimated(bool);
%End
%If (Qt_4_2_0 -)
    void setDockNestingEnabled(bool);
%End

signals:
    void iconSizeChanged(const QSize &);
    void toolButtonStyleChanged(Qt::ToolButtonStyle);

protected:
    virtual void contextMenuEvent(QContextMenuEvent *);
    virtual bool event(QEvent *);

public:
%If (Qt_4_2_0 -)
    bool isAnimated() const;
%End
%If (Qt_4_2_0 -)
    bool isDockNestingEnabled() const;
%End
%If (Qt_4_2_0 -)
    bool isSeparator(const QPoint &) const;
%End
%If (Qt_4_2_0 -)
    QWidget *menuWidget() const;
%End
%If (Qt_4_2_0 -)
    void setMenuWidget(QWidget * /Transfer/);
%End
%If (Qt_4_2_0 -)
    void tabifyDockWidget(QDockWidget *, QDockWidget *);
%End
%If (Qt_4_3_0 -)

    enum DockOption
    {
        AnimatedDocks,
        AllowNestedDocks,
        AllowTabbedDocks,
        ForceTabbedDocks,
        VerticalTabs,
    };

%End
%If (Qt_4_3_0 -)
    typedef QFlags<QMainWindow::DockOption> DockOptions;
%End
%If (Qt_4_3_0 -)
    void setDockOptions(QFlags<QMainWindow::DockOption>);
%End
%If (Qt_4_3_0 -)
    QFlags<QMainWindow::DockOption> dockOptions() const;
%End
%If (Qt_4_3_0 -)
    void removeToolBarBreak(QToolBar *);
%End
%If (Qt_4_3_0 -)
    bool toolBarBreak(QToolBar *) const;
%End
%If (Qt_4_3_0 -)
    void setUnifiedTitleAndToolBarOnMac(bool);
%End
%If (Qt_4_3_0 -)
    bool unifiedTitleAndToolBarOnMac() const;
%End
%If (Qt_4_4_0 -)
    bool restoreDockWidget(QDockWidget *);
%End
%If (Qt_4_5_0 -)
    bool documentMode() const;
%End
%If (Qt_4_5_0 -)
    void setDocumentMode(bool);
%End
%If (Qt_4_5_0 -)
    QTabWidget::TabShape tabShape() const;
%End
%If (Qt_4_5_0 -)
    void setTabShape(QTabWidget::TabShape);
%End
%If (Qt_4_5_0 -)
    QTabWidget::TabPosition tabPosition(Qt::DockWidgetArea) const;
%End
%If (Qt_4_5_0 -)
    void setTabPosition(Qt::DockWidgetAreas, QTabWidget::TabPosition);
%End
%If (Qt_4_5_0 -)
    QList<QDockWidget*> tabifiedDockWidgets(QDockWidget *) const;
%End

private:
    QMainWindow(const QMainWindow &);
};

%If (Qt_4_3_0 -)
QFlags<QMainWindow::DockOption> operator|(QMainWindow::DockOption, QFlags<QMainWindow::DockOption>);
%End
