// qgridlayout.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QGridLayout : QLayout
{

%TypeHeaderCode
#include <qgridlayout.h>
%End

public:
    explicit QGridLayout(QWidget * /TransferThis/);
    QGridLayout();
    virtual ~QGridLayout();
    virtual QSize sizeHint() const;
    virtual QSize minimumSize() const;
    virtual QSize maximumSize() const;
    void setRowStretch(int, int);
    void setColumnStretch(int, int);
    int rowStretch(int) const;
    int columnStretch(int) const;
    void setRowMinimumHeight(int, int);
    void setColumnMinimumWidth(int, int);
    int rowMinimumHeight(int) const;
    int columnMinimumWidth(int) const;
    int columnCount() const;
    int rowCount() const;
    QRect cellRect(int, int) const;
    virtual bool hasHeightForWidth() const;
    virtual int heightForWidth(int) const;
    virtual int minimumHeightForWidth(int) const;
    virtual Qt::Orientations expandingDirections() const;
    virtual void invalidate();
    void addWidget(QWidget * /Transfer/);
    void addWidget(QWidget * /Transfer/, int, int, Qt::Alignment alignment = 0);
    void addWidget(QWidget * /Transfer/, int, int, int, int, Qt::Alignment alignment = 0);
    void addLayout(QLayout * /Transfer/, int, int, Qt::Alignment alignment = 0);
    void addLayout(QLayout * /Transfer/, int, int, int, int, Qt::Alignment alignment = 0);
    void setOriginCorner(Qt::Corner);
    Qt::Corner originCorner() const;
    virtual QLayoutItem *itemAt(int) const;
    virtual QLayoutItem *takeAt(int) /TransferBack/;
    virtual int count() const;
    virtual void setGeometry(const QRect &);
    void addItem(QLayoutItem * /Transfer/, int, int, int rowSpan = 1, int columnSpan = 1, Qt::Alignment alignment = 0);
    void setDefaultPositioning(int, Qt::Orientation);
    void getItemPosition(int, int *, int *, int *, int *);
%If (Qt_4_3_0 -)
    void setHorizontalSpacing(int);
%End
%If (Qt_4_3_0 -)
    int horizontalSpacing() const;
%End
%If (Qt_4_3_0 -)
    void setVerticalSpacing(int);
%End
%If (Qt_4_3_0 -)
    int verticalSpacing() const;
%End
%If (Qt_4_3_0 -)
    void setSpacing(int);
%End
%If (Qt_4_3_0 -)
    int spacing() const;
%End
%If (Qt_4_4_0 -)
    QLayoutItem *itemAtPosition(int, int) const;
%End

protected:
    virtual void addItem(QLayoutItem * /Transfer/);

private:
    QGridLayout(const QGridLayout &);
};
