// qgraphicslayoutitem.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)

class QGraphicsLayoutItem /Supertype=sip.wrapper/
{

%TypeHeaderCode
#include <qgraphicslayoutitem.h>
%End

public:
    QGraphicsLayoutItem(QGraphicsLayoutItem *parent /TransferThis/ = 0, bool isLayout = false);
    virtual ~QGraphicsLayoutItem();
    void setSizePolicy(const QSizePolicy &);
    void setSizePolicy(QSizePolicy::Policy, QSizePolicy::Policy, QSizePolicy::ControlType controlType = QSizePolicy::DefaultType);
    QSizePolicy sizePolicy() const;
    void setMinimumSize(const QSizeF &);
    QSizeF minimumSize() const;
    void setMinimumWidth(qreal);
    void setMinimumHeight(qreal);
    void setPreferredSize(const QSizeF &);
    QSizeF preferredSize() const;
    void setPreferredWidth(qreal);
    void setPreferredHeight(qreal);
    void setMaximumSize(const QSizeF &);
    QSizeF maximumSize() const;
    void setMaximumWidth(qreal);
    void setMaximumHeight(qreal);
    virtual void setGeometry(const QRectF &);
    QRectF geometry() const;
    virtual void getContentsMargins(qreal *, qreal *, qreal *, qreal *) const;
    QRectF contentsRect() const;
    QSizeF effectiveSizeHint(Qt::SizeHint, const QSizeF &constraint = QSizeF()) const;
    virtual void updateGeometry();
    QGraphicsLayoutItem *parentLayoutItem() const;
    void setParentLayoutItem(QGraphicsLayoutItem * /TransferThis/);
    bool isLayout() const;
    void setMinimumSize(qreal, qreal);
    void setPreferredSize(qreal, qreal);
    void setMaximumSize(qreal, qreal);
    qreal minimumWidth() const;
    qreal minimumHeight() const;
    qreal preferredWidth() const;
    qreal preferredHeight() const;
    qreal maximumWidth() const;
    qreal maximumHeight() const;
%If (Qt_4_5_0 -)
    QGraphicsItem *graphicsItem() const;
%End
%If (Qt_4_5_0 -)
    bool ownedByLayout() const;
%End

protected:
    virtual QSizeF sizeHint(Qt::SizeHint, const QSizeF &constraint = QSizeF()) const = 0;
%If (Qt_4_5_0 -)
    void setGraphicsItem(QGraphicsItem *);
%End
%If (Qt_4_5_0 -)
    void setOwnedByLayout(bool);
%End

private:
%If (Qt_4_6_0 -)
    QGraphicsLayoutItem(const QGraphicsLayoutItem &);
%End
};

%End
