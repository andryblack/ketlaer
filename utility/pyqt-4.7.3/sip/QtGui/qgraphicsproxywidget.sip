// qgraphicsproxywidget.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)

class QGraphicsProxyWidget : QGraphicsWidget
{

%TypeHeaderCode
#include <qgraphicsproxywidget.h>
%End

public:
    QGraphicsProxyWidget(QGraphicsItem *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0);
    virtual ~QGraphicsProxyWidget();
    void setWidget(QWidget * /Transfer/);
%MethodCode
        // The ownership of any existing widget must be passed back to Python.
        QWidget *w = sipCpp->widget();
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setWidget(a0);
        Py_END_ALLOW_THREADS
        
        if (w)
        {
            PyObject *wo = sipGetPyObject(w, sipType_QWidget);
        
            if (wo)
                sipTransferBack(wo);
        }
%End

    QWidget *widget() const;
    QRectF subWidgetRect(const QWidget *) const;
    virtual void setGeometry(const QRectF &);
    virtual void paint(QPainter *, const QStyleOptionGraphicsItem *, QWidget *);
    virtual int type() const;
%If (Qt_4_5_0 -)
    QGraphicsProxyWidget *createProxyForChildWidget(QWidget *) /Factory/;
%End

protected:
    virtual QVariant itemChange(QGraphicsItem::GraphicsItemChange, const QVariant &);
    virtual bool event(QEvent *);
    virtual bool eventFilter(QObject *, QEvent *);
    virtual void showEvent(QShowEvent *);
    virtual void hideEvent(QHideEvent *);
    virtual void contextMenuEvent(QGraphicsSceneContextMenuEvent *);
    virtual void hoverEnterEvent(QGraphicsSceneHoverEvent *);
    virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent *);
    virtual void hoverMoveEvent(QGraphicsSceneHoverEvent *);
    virtual void grabMouseEvent(QEvent *);
    virtual void ungrabMouseEvent(QEvent *);
    virtual void mouseMoveEvent(QGraphicsSceneMouseEvent *);
    virtual void mousePressEvent(QGraphicsSceneMouseEvent *);
    virtual void mouseReleaseEvent(QGraphicsSceneMouseEvent *);
    virtual void mouseDoubleClickEvent(QGraphicsSceneMouseEvent *);
    virtual void wheelEvent(QGraphicsSceneWheelEvent *);
    virtual void keyPressEvent(QKeyEvent *);
    virtual void keyReleaseEvent(QKeyEvent *);
    virtual void focusInEvent(QFocusEvent *);
    virtual void focusOutEvent(QFocusEvent *);
    virtual bool focusNextPrevChild(bool);
    virtual QSizeF sizeHint(Qt::SizeHint, const QSizeF &constraint = QSizeF()) const;
    virtual void resizeEvent(QGraphicsSceneResizeEvent *);
%If (Qt_4_5_0 -)
    virtual void dragEnterEvent(QGraphicsSceneDragDropEvent *);
%End
%If (Qt_4_5_0 -)
    virtual void dragLeaveEvent(QGraphicsSceneDragDropEvent *);
%End
%If (Qt_4_5_0 -)
    virtual void dragMoveEvent(QGraphicsSceneDragDropEvent *);
%End
%If (Qt_4_5_0 -)
    virtual void dropEvent(QGraphicsSceneDragDropEvent *);
%End
%If (Qt_4_5_0 -)
    QGraphicsProxyWidget *newProxyWidget(const QWidget *) /Factory/;
%End

private:
    QGraphicsProxyWidget(const QGraphicsProxyWidget &);
};

%End
