// qtabbar.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QTabBar : QWidget
{

%TypeHeaderCode
#include <qtabbar.h>
%End

public:
    explicit QTabBar(QWidget *parent /TransferThis/ = 0);
    virtual ~QTabBar();

    enum Shape
    {
        RoundedNorth,
        RoundedSouth,
        RoundedWest,
        RoundedEast,
        TriangularNorth,
        TriangularSouth,
        TriangularWest,
        TriangularEast,
    };

    QTabBar::Shape shape() const;
    void setShape(QTabBar::Shape);
    int addTab(const QString &);
    int addTab(const QIcon &, const QString &);
    int insertTab(int, const QString &);
    int insertTab(int, const QIcon &, const QString &);
    void removeTab(int);
    bool isTabEnabled(int) const;
    void setTabEnabled(int, bool);
    QString tabText(int) const;
    void setTabText(int, const QString &);
    QColor tabTextColor(int) const;
    void setTabTextColor(int, const QColor &);
    QIcon tabIcon(int) const;
    void setTabIcon(int, const QIcon &);
%If (PyQt_ToolTip)
    void setTabToolTip(int, const QString &);
%End
%If (PyQt_ToolTip)
    QString tabToolTip(int) const;
%End
%If (PyQt_WhatsThis)
    void setTabWhatsThis(int, const QString &);
%End
%If (PyQt_WhatsThis)
    QString tabWhatsThis(int) const;
%End
    void setTabData(int, const QVariant &);
    QVariant tabData(int) const;
%If (Qt_4_3_0 -)
    int tabAt(const QPoint &) const;
%End
    QRect tabRect(int) const;
    int currentIndex() const;
    int count() const;
    virtual QSize sizeHint() const;
    virtual QSize minimumSizeHint() const;
    void setDrawBase(bool);
    bool drawBase() const;
    QSize iconSize() const;
    void setIconSize(const QSize &);
%If (Qt_4_2_0 -)
    Qt::TextElideMode elideMode() const;
%End
%If (Qt_4_2_0 -)
    void setElideMode(Qt::TextElideMode);
%End
%If (Qt_4_2_0 -)
    void setUsesScrollButtons(bool);
%End
%If (Qt_4_2_0 -)
    bool usesScrollButtons() const;
%End

public slots:
    void setCurrentIndex(int);

signals:
    void currentChanged(int);

protected:
%If (Qt_4_3_0 -)
    void initStyleOption(QStyleOptionTab *, int) const;
%End
    virtual QSize tabSizeHint(int) const;
    virtual void tabInserted(int);
    virtual void tabRemoved(int);
    virtual void tabLayoutChange();
    virtual bool event(QEvent *);
    virtual void resizeEvent(QResizeEvent *);
    virtual void showEvent(QShowEvent *);
    virtual void paintEvent(QPaintEvent *);
    virtual void mousePressEvent(QMouseEvent *);
    virtual void mouseMoveEvent(QMouseEvent *);
    virtual void mouseReleaseEvent(QMouseEvent *);
    virtual void keyPressEvent(QKeyEvent *);
    virtual void changeEvent(QEvent *);

public:
%If (Qt_4_5_0 -)

    enum ButtonPosition
    {
        LeftSide,
        RightSide,
    };

%End
%If (Qt_4_5_0 -)

    enum SelectionBehavior
    {
        SelectLeftTab,
        SelectRightTab,
        SelectPreviousTab,
    };

%End
%If (Qt_4_5_0 -)
    void moveTab(int, int);
%End
%If (Qt_4_5_0 -)
    bool tabsClosable() const;
%End
%If (Qt_4_5_0 -)
    void setTabsClosable(bool);
%End
%If (Qt_4_5_0 -)
    void setTabButton(int, QTabBar::ButtonPosition, QWidget * /Transfer/);
%End
%If (Qt_4_5_0 -)
    QWidget *tabButton(int, QTabBar::ButtonPosition) const;
%End
%If (Qt_4_5_0 -)
    QTabBar::SelectionBehavior selectionBehaviorOnRemove() const;
%End
%If (Qt_4_5_0 -)
    void setSelectionBehaviorOnRemove(QTabBar::SelectionBehavior);
%End
%If (Qt_4_5_0 -)
    bool expanding() const;
%End
%If (Qt_4_5_0 -)
    void setExpanding(bool);
%End
%If (Qt_4_5_0 -)
    bool isMovable() const;
%End
%If (Qt_4_5_0 -)
    void setMovable(bool);
%End
%If (Qt_4_5_0 -)
    bool documentMode() const;
%End
%If (Qt_4_5_0 -)
    void setDocumentMode(bool);
%End

signals:
%If (Qt_4_5_0 -)
    void tabCloseRequested(int);
%End
%If (Qt_4_5_0 -)
    void tabMoved(int, int);
%End

protected:
%If (Qt_4_5_0 -)
    virtual void hideEvent(QHideEvent *);
%End
%If (Qt_4_5_0 -)
    virtual void wheelEvent(QWheelEvent *);
%End

private:
    QTabBar(const QTabBar &);
};
