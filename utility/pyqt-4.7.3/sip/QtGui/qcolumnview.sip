// qcolumnview.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_3_0 -)

class QColumnView : QAbstractItemView
{

%TypeHeaderCode
#include <qcolumnview.h>
%End

public:
    explicit QColumnView(QWidget *parent /TransferThis/ = 0);
    virtual ~QColumnView();
    QList<int> columnWidths() const;
    QWidget *previewWidget() const;
    bool resizeGripsVisible() const;
    void setColumnWidths(const QList<int> &);
    void setPreviewWidget(QWidget * /Transfer/);
    void setResizeGripsVisible(bool);
    virtual QModelIndex indexAt(const QPoint &) const;
    virtual void scrollTo(const QModelIndex &, QAbstractItemView::ScrollHint hint = QAbstractItemView::EnsureVisible);
    virtual QSize sizeHint() const;
    virtual QRect visualRect(const QModelIndex &) const;
    virtual void setModel(QAbstractItemModel * /KeepReference/);
    virtual void setSelectionModel(QItemSelectionModel * /KeepReference/);
    virtual void setRootIndex(const QModelIndex &);
    virtual void selectAll();

signals:
    void updatePreviewWidget(const QModelIndex &);

protected:
    virtual QAbstractItemView *createColumn(const QModelIndex &);
%If (Qt_4_4_0 -)
    void initializeColumn(QAbstractItemView *) const;
%End
    virtual bool isIndexHidden(const QModelIndex &) const;
    virtual QModelIndex moveCursor(QAbstractItemView::CursorAction, Qt::KeyboardModifiers);
    virtual void resizeEvent(QResizeEvent *);
    virtual void setSelection(const QRect &, QFlags<QItemSelectionModel::SelectionFlag>);
    virtual QRegion visualRegionForSelection(const QItemSelection &) const;
    virtual int horizontalOffset() const;
    virtual int verticalOffset() const;
    virtual void scrollContentsBy(int, int);
%If (Qt_4_6_0 -)
    virtual void rowsInserted(const QModelIndex &, int, int);
%End

protected slots:
    virtual void currentChanged(const QModelIndex &, const QModelIndex &);

private:
    QColumnView(const QColumnView &);
};

%End
