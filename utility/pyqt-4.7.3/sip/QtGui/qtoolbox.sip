// qtoolbox.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QToolBox : QFrame
{

%TypeHeaderCode
#include <qtoolbox.h>
%End

public:
%If (Qt_4_2_0 -)
    QToolBox(QWidget *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0);
%End
%If (- Qt_4_2_0)
    QToolBox(QWidget *parent /TransferThis/ = 0, Qt::WFlags flags = 0);
%End
    virtual ~QToolBox();
    int addItem(QWidget * /Transfer/, const QString &);
    int addItem(QWidget * /Transfer/, const QIcon &, const QString &);
    int insertItem(int, QWidget * /Transfer/, const QString &);
    int insertItem(int, QWidget * /Transfer/, const QIcon &, const QString &);
    void removeItem(int);
    void setItemEnabled(int, bool);
    bool isItemEnabled(int) const;
    void setItemText(int, const QString &);
    QString itemText(int) const;
    void setItemIcon(int, const QIcon &);
    QIcon itemIcon(int) const;
    void setItemToolTip(int, const QString &);
    QString itemToolTip(int) const;
    int currentIndex() const;
    QWidget *currentWidget() const;
    QWidget *widget(int) const;
    int indexOf(QWidget *) const;
    int count() const;

public slots:
    void setCurrentIndex(int);
    void setCurrentWidget(QWidget *);

signals:
    void currentChanged(int);

protected:
    virtual void itemInserted(int);
    virtual void itemRemoved(int);
    virtual bool event(QEvent *);
    virtual void showEvent(QShowEvent *);
    virtual void changeEvent(QEvent *);

private:
    QToolBox(const QToolBox &);
};
