// qregion.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qregion.h>
%End

class QRegion
{

%TypeHeaderCode
#include <qregion.h>
%End

public:
    enum RegionType
    {
        Rectangle,
        Ellipse,
    };

    QRegion();
    QRegion(int, int, int, int, QRegion::RegionType type = QRegion::Rectangle);
    QRegion(const QRect &, QRegion::RegionType type = QRegion::Rectangle);
    QRegion(const QPolygon &, Qt::FillRule fillRule = Qt::OddEvenFill);
    QRegion(const QBitmap &);
    QRegion(const QRegion &);
    QRegion(const QVariant &variant) /NoDerived/;
%MethodCode
        sipCpp = new QRegion(qVariantValue<QRegion>(*a0));
%End

    ~QRegion();
    bool isEmpty() const;
    int __bool__() const;
%MethodCode
        sipRes = !sipCpp->isEmpty();
%End

    bool contains(const QPoint &) const;
    int __contains__(const QPoint &p) const;
%MethodCode
        sipRes = sipCpp->contains(*a0);
%End

    bool contains(const QRect &) const;
    int __contains__(const QRect &r) const;
%MethodCode
        sipRes = sipCpp->contains(*a0);
%End

    void translate(int, int);
    void translate(const QPoint &);
    QRegion translated(int, int) const;
    QRegion translated(const QPoint &) const;
    QRegion unite(const QRegion &) const;
%If (Qt_4_2_0 -)
    QRegion united(const QRegion &) const;
%End
%If (Qt_4_4_0 -)
    QRegion united(const QRect &) const;
%End
    QRegion intersect(const QRegion &) const;
    QRegion subtract(const QRegion &) const;
    QRegion eor(const QRegion &) const;
    QRect boundingRect() const;
    QVector<QRect> rects() const;
    const QRegion operator|(const QRegion &) const;
    const QRegion operator+(const QRegion &) const;
%If (Qt_4_4_0 -)
    const QRegion operator+(const QRect &) const;
%End
    const QRegion operator&(const QRegion &) const;
%If (Qt_4_4_0 -)
    const QRegion operator&(const QRect &) const;
%End
    const QRegion operator-(const QRegion &) const;
    const QRegion operator^(const QRegion &) const;
    QRegion &operator|=(const QRegion &);
    QRegion &operator+=(const QRegion &);
%If (Qt_4_4_0 -)
    QRegion &operator+=(const QRect &);
%End
    QRegion &operator&=(const QRegion &);
%If (Qt_4_4_0 -)
    QRegion &operator&=(const QRect &);
%End
    QRegion &operator-=(const QRegion &);
    QRegion &operator^=(const QRegion &);
    bool operator==(const QRegion &) const;
    bool operator!=(const QRegion &) const;
%If (Qt_4_2_0 -)
    QRegion intersected(const QRegion &) const;
%End
%If (Qt_4_4_0 -)
    QRegion intersected(const QRect &) const;
%End
%If (Qt_4_2_0 -)
    QRegion subtracted(const QRegion &) const;
%End
%If (Qt_4_2_0 -)
    QRegion xored(const QRegion &) const;
%End
%If (Qt_4_2_0 -)
    bool intersects(const QRegion &) const;
%End
%If (Qt_4_2_0 -)
    bool intersects(const QRect &) const;
%End
%If (Qt_4_4_0 -)
    int numRects() const;
%End
%If (Qt_4_6_0 -)
    int rectCount() const;
%End
};

QDataStream &operator<<(QDataStream &, const QRegion & /Constrained/);
QDataStream &operator>>(QDataStream &, QRegion & /Constrained/);
