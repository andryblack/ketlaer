// qgraphicswidget.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 - Qt_4_6_0)

class QGraphicsWidget : QObject, QGraphicsItem, QGraphicsLayoutItem
{

%TypeHeaderCode
#include <qgraphicswidget.h>
%End

%TypeCode
// Transfer ownership of all widgets in a layout to their new parent.
static void qtgui_TransferGraphicsLayoutWidgets(QGraphicsLayout *lay, PyObject *pw)
{
    int n = lay->count();

    for (int i = 0; i < n; ++i)
    {
        QGraphicsLayoutItem *item = lay->itemAt(i);

        if (item->isLayout())
            qtgui_TransferGraphicsLayoutWidgets(static_cast<QGraphicsLayout *>(item), pw);
        else
        {
            PyObject *obj = sipGetPyObject(static_cast<QGraphicsWidget *>(item), sipType_QGraphicsWidget);

            if (obj)
                sipTransferTo(obj, pw);
        }
    }
}
%End

public:
    QGraphicsWidget(QGraphicsItem *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0);
    virtual ~QGraphicsWidget();
    QGraphicsLayout *layout() const;
    void setLayout(QGraphicsLayout * /Transfer/);
%MethodCode
        Py_BEGIN_ALLOW_THREADS
        sipCpp->setLayout(a0);
        Py_END_ALLOW_THREADS
        
        // Internally Qt has reparented all of the widgets in the layout, so we need
        // to update the ownership hierachy.
        qtgui_TransferGraphicsLayoutWidgets(a0, sipSelf);
%End

    void adjustSize();
    Qt::LayoutDirection layoutDirection() const;
    void setLayoutDirection(Qt::LayoutDirection);
    void unsetLayoutDirection();
    QStyle *style() const;
    void setStyle(QStyle *);
    QFont font() const;
    void setFont(const QFont &);
    QPalette palette() const;
    void setPalette(const QPalette &);
    void resize(const QSizeF &);
    void resize(qreal, qreal);
    QSizeF size() const;
    virtual void setGeometry(const QRectF &);
    void setGeometry(qreal, qreal, qreal, qreal);
    QRectF rect() const;
    void setContentsMargins(qreal, qreal, qreal, qreal);
    virtual void getContentsMargins(qreal *, qreal *, qreal *, qreal *) const;
    void setWindowFrameMargins(qreal, qreal, qreal, qreal);
    void getWindowFrameMargins(qreal *, qreal *, qreal *, qreal *) const;
    void unsetWindowFrameMargins();
    QRectF windowFrameGeometry() const;
    QRectF windowFrameRect() const;
    Qt::WindowFlags windowFlags() const;
    Qt::WindowType windowType() const;
    void setWindowFlags(Qt::WindowFlags);
    bool isActiveWindow() const;
    void setWindowTitle(const QString &);
    QString windowTitle() const;
    Qt::FocusPolicy focusPolicy() const;
    void setFocusPolicy(Qt::FocusPolicy);
    static void setTabOrder(QGraphicsWidget *, QGraphicsWidget *);
    QGraphicsWidget *focusWidget() const;
    void setAttribute(Qt::WidgetAttribute, bool on = true);
    bool testAttribute(Qt::WidgetAttribute) const;
    virtual int type() const;
    virtual void paint(QPainter *, const QStyleOptionGraphicsItem *, QWidget *widget = 0);
    virtual void paintWindowFrame(QPainter *, const QStyleOptionGraphicsItem *, QWidget *widget = 0);
    virtual QRectF boundingRect() const;
    virtual QPainterPath shape() const;
    const QObjectList &children() const;

public slots:
    bool close();

protected:
    virtual void initStyleOption(QStyleOption *) const;
    virtual QSizeF sizeHint(Qt::SizeHint, const QSizeF &constraint = QSizeF()) const;
    virtual void updateGeometry();
    virtual QVariant itemChange(QGraphicsItem::GraphicsItemChange, const QVariant &);
    virtual bool sceneEvent(QEvent *);
    virtual bool windowFrameEvent(QEvent *);
    virtual Qt::WindowFrameSection windowFrameSectionAt(const QPointF &) const;
    virtual bool event(QEvent *);
    virtual void changeEvent(QEvent *);
    virtual void closeEvent(QCloseEvent *);
    virtual void focusInEvent(QFocusEvent *);
    virtual bool focusNextPrevChild(bool);
    virtual void focusOutEvent(QFocusEvent *);
    virtual void hideEvent(QHideEvent *);
    virtual void moveEvent(QGraphicsSceneMoveEvent *);
    virtual void polishEvent();
    virtual void resizeEvent(QGraphicsSceneResizeEvent *);
    virtual void showEvent(QShowEvent *);
    virtual void hoverMoveEvent(QGraphicsSceneHoverEvent *);
    virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent *);
    virtual void grabMouseEvent(QEvent *);
    virtual void ungrabMouseEvent(QEvent *);
    virtual void grabKeyboardEvent(QEvent *);
    virtual void ungrabKeyboardEvent(QEvent *);

public:
%If (Qt_4_5_0 -)
    int grabShortcut(const QKeySequence &, Qt::ShortcutContext context = Qt::WindowShortcut);
%End
%If (Qt_4_5_0 -)
    void releaseShortcut(int);
%End
%If (Qt_4_5_0 -)
    void setShortcutEnabled(int, bool enabled = true);
%End
%If (Qt_4_5_0 -)
    void setShortcutAutoRepeat(int, bool enabled = true);
%End
%If (Qt_4_5_0 -)
    void addAction(QAction *);
%End
%If (Qt_4_5_0 -)
    void addActions(QList<QAction*>);
%End
%If (Qt_4_5_0 -)
    void insertAction(QAction *, QAction *);
%End
%If (Qt_4_5_0 -)
    void insertActions(QAction *, QList<QAction*>);
%End
%If (Qt_4_5_0 -)
    void removeAction(QAction *);
%End
%If (Qt_4_5_0 -)
    QList<QAction*> actions() const;
%End

private:
    QGraphicsWidget(const QGraphicsWidget &);
};

%End
%If (Qt_4_6_0 -)

class QGraphicsWidget : QGraphicsObject, QGraphicsLayoutItem
{

%TypeHeaderCode
#include <qgraphicswidget.h>
%End

public:
    QGraphicsWidget(QGraphicsItem *parent /TransferThis/ = 0, Qt::WindowFlags flags = 0);
    virtual ~QGraphicsWidget();
    QGraphicsLayout *layout() const;
    void setLayout(QGraphicsLayout * /Transfer/);
    void adjustSize();
    Qt::LayoutDirection layoutDirection() const;
    void setLayoutDirection(Qt::LayoutDirection);
    void unsetLayoutDirection();
    QStyle *style() const;
    void setStyle(QStyle *);
    QFont font() const;
    void setFont(const QFont &);
    QPalette palette() const;
    void setPalette(const QPalette &);
    void resize(const QSizeF &);
    void resize(qreal, qreal);
    QSizeF size() const;
    virtual void setGeometry(const QRectF &);
    QRectF rect() const;
    void setContentsMargins(qreal, qreal, qreal, qreal);
    virtual void getContentsMargins(qreal *, qreal *, qreal *, qreal *) const;
    void setWindowFrameMargins(qreal, qreal, qreal, qreal);
    void getWindowFrameMargins(qreal *, qreal *, qreal *, qreal *) const;
    void unsetWindowFrameMargins();
    QRectF windowFrameGeometry() const;
    QRectF windowFrameRect() const;
    Qt::WindowFlags windowFlags() const;
    Qt::WindowType windowType() const;
    void setWindowFlags(Qt::WindowFlags);
    bool isActiveWindow() const;
    void setWindowTitle(const QString &);
    QString windowTitle() const;
    Qt::FocusPolicy focusPolicy() const;
    void setFocusPolicy(Qt::FocusPolicy);
    static void setTabOrder(QGraphicsWidget *, QGraphicsWidget *);
    QGraphicsWidget *focusWidget() const;
    int grabShortcut(const QKeySequence &, Qt::ShortcutContext context = Qt::WindowShortcut);
    void releaseShortcut(int);
    void setShortcutEnabled(int, bool enabled = true);
    void setShortcutAutoRepeat(int, bool enabled = true);
    void addAction(QAction *);
    void addActions(QList<QAction*>);
    void insertAction(QAction *, QAction *);
    void insertActions(QAction *, QList<QAction*>);
    void removeAction(QAction *);
    QList<QAction*> actions() const;
    void setAttribute(Qt::WidgetAttribute, bool on = true);
    bool testAttribute(Qt::WidgetAttribute) const;
    virtual int type() const;
    virtual void paint(QPainter *, const QStyleOptionGraphicsItem *, QWidget *widget = 0);
    virtual void paintWindowFrame(QPainter *, const QStyleOptionGraphicsItem *, QWidget *widget = 0);
    virtual QRectF boundingRect() const;
    virtual QPainterPath shape() const;
    void setGeometry(qreal, qreal, qreal, qreal);

public slots:
    bool close();

protected:
    virtual void initStyleOption(QStyleOption *) const;
    virtual QSizeF sizeHint(Qt::SizeHint, const QSizeF &constraint = QSizeF()) const;
    virtual void updateGeometry();
    virtual QVariant itemChange(QGraphicsItem::GraphicsItemChange, const QVariant &);
    virtual bool sceneEvent(QEvent *);
    virtual bool windowFrameEvent(QEvent *);
    virtual Qt::WindowFrameSection windowFrameSectionAt(const QPointF &) const;
    virtual bool event(QEvent *);
    virtual void changeEvent(QEvent *);
    virtual void closeEvent(QCloseEvent *);
    virtual void focusInEvent(QFocusEvent *);
    virtual bool focusNextPrevChild(bool);
    virtual void focusOutEvent(QFocusEvent *);
    virtual void hideEvent(QHideEvent *);
    virtual void moveEvent(QGraphicsSceneMoveEvent *);
    virtual void polishEvent();
    virtual void resizeEvent(QGraphicsSceneResizeEvent *);
    virtual void showEvent(QShowEvent *);
    virtual void hoverMoveEvent(QGraphicsSceneHoverEvent *);
    virtual void hoverLeaveEvent(QGraphicsSceneHoverEvent *);
    virtual void grabMouseEvent(QEvent *);
    virtual void ungrabMouseEvent(QEvent *);
    virtual void grabKeyboardEvent(QEvent *);
    virtual void ungrabKeyboardEvent(QEvent *);

private:
    QGraphicsWidget(const QGraphicsWidget &);
};

%End
