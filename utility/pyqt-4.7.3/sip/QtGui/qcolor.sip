// qcolor.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qcolor.h>
%End

class QColor
{

%TypeHeaderCode
#include <qcolor.h>
%End

%ConvertToTypeCode
// SIP doesn't support automatic type convertors so we explicitly allow a
// Qt::GlobalColor to be used whenever a QColor is expected.  Note that SIP
// must process QColor before QBrush so that the former's QVariant cast
// operator is applied before the latter's.

if (sipIsErr == NULL)
    return (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_GlobalColor)) ||
            sipCanConvertToType(sipPy, sipType_QColor, SIP_NO_CONVERTORS));

if (PyObject_TypeCheck(sipPy, sipTypeAsPyTypeObject(sipType_Qt_GlobalColor)))
{
    *sipCppPtr = new QColor((Qt::GlobalColor)SIPLong_AsLong(sipPy));

    return sipGetState(sipTransferObj);
}

*sipCppPtr = reinterpret_cast<QColor *>(sipConvertToType(sipPy, sipType_QColor, sipTransferObj, SIP_NO_CONVERTORS, 0, sipIsErr));

return 0;
%End

%PickleCode
    sipRes = Py_BuildValue((char *)"iiii", sipCpp->red(), sipCpp->green(), sipCpp->blue(), sipCpp->alpha());
%End

public:
    enum Spec
    {
        Invalid,
        Rgb,
        Hsv,
        Cmyk,
%If (Qt_4_6_0 -)
        Hsl,
%End
    };

    QColor(Qt::GlobalColor /Constrained/);
    QColor(QRgb);
    QColor(const QVariant &variant) /NoDerived/;
%MethodCode
        sipCpp = new QColor(qVariantValue<QColor>(*a0));
%End

    QString name() const;
    void setNamedColor(const QString &);
    static QStringList colorNames();
    QColor::Spec spec() const;
    int alpha() const;
    void setAlpha(int);
    qreal alphaF() const;
    void setAlphaF(qreal);
    int red() const;
    int green() const;
    int blue() const;
    void setRed(int);
    void setGreen(int);
    void setBlue(int);
    qreal redF() const;
    qreal greenF() const;
    qreal blueF() const;
    void setRedF(qreal);
    void setGreenF(qreal);
    void setBlueF(qreal);
    void getRgb(int *, int *, int *, int *alpha = 0) const;
    void setRgb(int, int, int, int alpha = 255);
    void getRgbF(qreal *, qreal *, qreal *, qreal *alpha = 0) const;
    void setRgbF(qreal, qreal, qreal, qreal alpha = 1.0e+0);
    QRgb rgba() const;
    void setRgba(QRgb);
    QRgb rgb() const;
    void setRgb(QRgb);
    int hue() const;
    int saturation() const;
    int value() const;
    qreal hueF() const;
    qreal saturationF() const;
    qreal valueF() const;
    void getHsv(int *, int *, int *, int *alpha = 0) const;
    void setHsv(int, int, int, int alpha = 255);
    void getHsvF(qreal *, qreal *, qreal *, qreal *alpha = 0) const;
    void setHsvF(qreal, qreal, qreal, qreal alpha = 1.0e+0);
    int cyan() const;
    int magenta() const;
    int yellow() const;
    int black() const;
    qreal cyanF() const;
    qreal magentaF() const;
    qreal yellowF() const;
    qreal blackF() const;
    void getCmyk(int *, int *, int *, int *, int *alpha = 0);
    void setCmyk(int, int, int, int, int alpha = 255);
    void getCmykF(qreal *, qreal *, qreal *, qreal *, qreal *alpha = 0);
    void setCmykF(qreal, qreal, qreal, qreal, qreal alpha = 1.0e+0);
    QColor toRgb() const;
    QColor toHsv() const;
    QColor toCmyk() const;
    QColor convertTo(QColor::Spec) const;
    static QColor fromRgb(QRgb);
    static QColor fromRgba(QRgb);
    static QColor fromRgb(int, int, int, int alpha = 255);
    static QColor fromRgbF(qreal, qreal, qreal, qreal alpha = 1.0e+0);
    static QColor fromHsv(int, int, int, int alpha = 255);
    static QColor fromHsvF(qreal, qreal, qreal, qreal alpha = 1.0e+0);
    static QColor fromCmyk(int, int, int, int, int alpha = 255);
    static QColor fromCmykF(qreal, qreal, qreal, qreal, qreal alpha = 1.0e+0);
    QColor light(int factor = 150) const;
    QColor dark(int factor = 200) const;
    bool operator==(const QColor &) const;
    bool operator!=(const QColor &) const;
    QColor();
    QColor(int, int, int, int alpha = 255);
    QColor(const QString &);
    QColor(const QColor &);
    bool isValid() const;
%If (Qt_4_3_0 -)
%If (WS_X11)
    static bool allowX11ColorNames();
%End
%End
%If (Qt_4_3_0 -)
%If (WS_X11)
    static void setAllowX11ColorNames(bool);
%End
%End
%If (Qt_4_3_0 -)
    QColor lighter(int factor = 150) const;
%End
%If (Qt_4_3_0 -)
    QColor darker(int factor = 200) const;
%End
%If (Qt_4_6_0 -)
    int hsvHue() const;
%End
%If (Qt_4_6_0 -)
    int hsvSaturation() const;
%End
%If (Qt_4_6_0 -)
    qreal hsvHueF() const;
%End
%If (Qt_4_6_0 -)
    qreal hsvSaturationF() const;
%End
%If (Qt_4_6_0 -)
    int hslHue() const;
%End
%If (Qt_4_6_0 -)
    int hslSaturation() const;
%End
%If (Qt_4_6_0 -)
    int lightness() const;
%End
%If (Qt_4_6_0 -)
    qreal hslHueF() const;
%End
%If (Qt_4_6_0 -)
    qreal hslSaturationF() const;
%End
%If (Qt_4_6_0 -)
    qreal lightnessF() const;
%End
%If (Qt_4_6_0 -)
    void getHsl(int *, int *, int *, int *alpha = 0) const;
%End
%If (Qt_4_6_0 -)
    void setHsl(int, int, int, int alpha = 255);
%End
%If (Qt_4_6_0 -)
    void getHslF(qreal *, qreal *, qreal *, qreal *alpha = 0) const;
%End
%If (Qt_4_6_0 -)
    void setHslF(qreal, qreal, qreal, qreal alpha = 1.0e+0);
%End
%If (Qt_4_6_0 -)
    QColor toHsl() const;
%End
%If (Qt_4_6_0 -)
    static QColor fromHsl(int, int, int, int alpha = 255);
%End
%If (Qt_4_6_0 -)
    static QColor fromHslF(qreal, qreal, qreal, qreal alpha = 1.0e+0);
%End
};

QDataStream &operator<<(QDataStream &, const QColor & /Constrained/);
QDataStream &operator>>(QDataStream &, QColor & /Constrained/);
