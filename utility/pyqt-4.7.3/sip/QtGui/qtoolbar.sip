// qtoolbar.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QToolBar : QWidget
{

%TypeHeaderCode
#include <qtoolbar.h>
%End

public:
    QToolBar(const QString &, QWidget *parent /TransferThis/ = 0);
    explicit QToolBar(QWidget *parent /TransferThis/ = 0);
    virtual ~QToolBar();
    void setMovable(bool);
    bool isMovable() const;
    void setAllowedAreas(Qt::ToolBarAreas);
    Qt::ToolBarAreas allowedAreas() const;
    bool isAreaAllowed(Qt::ToolBarArea) const;
    void setOrientation(Qt::Orientation);
    Qt::Orientation orientation() const;
    void clear();
    void addAction(QAction *);
    QAction *addAction(const QString &) /Transfer/;
    QAction *addAction(const QIcon &, const QString &) /Transfer/;
    QAction *addAction(const QString &, SIP_RXOBJ_CON, SIP_SLOT_CON()) /Transfer/ [QAction * (const QString &text, const QObject *receiver, const char *member)];
    QAction *addAction(const QIcon &, const QString &, SIP_RXOBJ_CON, SIP_SLOT_CON()) /Transfer/ [QAction * (const QIcon &icon, const QString &text, const QObject *receiver, const char *member)];
    QAction *addSeparator() /Transfer/;
    QAction *insertSeparator(QAction *) /Transfer/;
    QAction *addWidget(QWidget * /Transfer/) /Transfer/;
    QAction *insertWidget(QAction *, QWidget * /Transfer/) /Transfer/;
    QRect actionGeometry(QAction *) const;
    QAction *actionAt(const QPoint &) const;
    QAction *actionAt(int, int) const;
    QAction *toggleViewAction() const;
    QSize iconSize() const;
    Qt::ToolButtonStyle toolButtonStyle() const;
%If (Qt_4_2_0 -)
    QWidget *widgetForAction(QAction *) const;
%End

public slots:
    void setIconSize(const QSize &);
    void setToolButtonStyle(Qt::ToolButtonStyle);

signals:
    void actionTriggered(QAction *);
    void movableChanged(bool);
    void allowedAreasChanged(Qt::ToolBarAreas);
    void orientationChanged(Qt::Orientation);
    void iconSizeChanged(const QSize &);
    void toolButtonStyleChanged(Qt::ToolButtonStyle);
%If (Qt_4_6_0 -)
    void topLevelChanged(bool);
%End

protected:
%If (Qt_4_3_0 -)
    void initStyleOption(QStyleOptionToolBar *) const;
%End
    virtual void actionEvent(QActionEvent *);
    virtual void changeEvent(QEvent *);
    virtual void childEvent(QChildEvent *);
    virtual void paintEvent(QPaintEvent *);
    virtual void resizeEvent(QResizeEvent *);
    virtual bool event(QEvent *);

public:
%If (Qt_4_3_0 -)
    bool isFloatable() const;
%End
%If (Qt_4_3_0 -)
    void setFloatable(bool);
%End
%If (Qt_4_3_0 -)
    bool isFloating() const;
%End

private:
    QToolBar(const QToolBar &);
};
