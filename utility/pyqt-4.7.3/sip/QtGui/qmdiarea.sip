// qmdiarea.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_3_0 -)
%ModuleCode
#include <qmdiarea.h>
%End
%End

%If (Qt_4_3_0 -)

class QMdiArea : QAbstractScrollArea
{

%TypeHeaderCode
#include <qmdiarea.h>
%End

public:
    enum AreaOption
    {
        DontMaximizeSubWindowOnActivation,
    };

    typedef QFlags<QMdiArea::AreaOption> AreaOptions;
%If (Qt_4_4_0 -)

    enum ViewMode
    {
        SubWindowView,
        TabbedView,
    };

%End

    enum WindowOrder
    {
        CreationOrder,
        StackingOrder,
%If (Qt_4_4_0 -)
        ActivationHistoryOrder,
%End
    };

    QMdiArea(QWidget *parent /TransferThis/ = 0);
    virtual ~QMdiArea();
    virtual QSize sizeHint() const;
    virtual QSize minimumSizeHint() const;
    QMdiSubWindow *activeSubWindow() const;
    QMdiSubWindow *addSubWindow(QWidget * /Transfer/, Qt::WindowFlags flags = 0);
    QList<QMdiSubWindow*> subWindowList(QMdiArea::WindowOrder order = QMdiArea::CreationOrder) const;
    QMdiSubWindow *currentSubWindow() const;
    void removeSubWindow(QWidget * /GetWrapper/);
%MethodCode
        // We need to implement /TransferBack/ on the argument, but it might be the
        // QMdiSubWindow that wraps the widget we are really after.
        QMdiSubWindow *swin = qobject_cast<QMdiSubWindow *>(a0);
        
        if (swin)
        {
            QWidget *w = swin->widget();
        
            a0Wrapper = (w ? sipGetPyObject(w, sipType_QWidget) : 0);
        }
        else
            a0Wrapper = 0;
        
        Py_BEGIN_ALLOW_THREADS
        sipCpp->removeSubWindow(a0);
        Py_END_ALLOW_THREADS
        
        if (a0Wrapper)
            sipTransferBack(a0Wrapper);
%End

    QBrush background() const;
    void setBackground(const QBrush &);
    void setOption(QMdiArea::AreaOption, bool on = true);
    bool testOption(QMdiArea::AreaOption) const;

signals:
    void subWindowActivated(QMdiSubWindow *);

public slots:
    void setActiveSubWindow(QMdiSubWindow *);
    void tileSubWindows();
    void cascadeSubWindows();
    void closeActiveSubWindow();
    void closeAllSubWindows();
    void activateNextSubWindow();
    void activatePreviousSubWindow();

protected:
    void setupViewport(QWidget *);
    virtual bool event(QEvent *);
    virtual bool eventFilter(QObject *, QEvent *);
    virtual void paintEvent(QPaintEvent *);
    virtual void childEvent(QChildEvent *);
    virtual void resizeEvent(QResizeEvent *);
    virtual void timerEvent(QTimerEvent *);
    virtual void showEvent(QShowEvent *);
    virtual bool viewportEvent(QEvent *);
    virtual void scrollContentsBy(int, int);

public:
%If (Qt_4_4_0 -)
    QMdiArea::WindowOrder activationOrder() const;
%End
%If (Qt_4_4_0 -)
    void setActivationOrder(QMdiArea::WindowOrder);
%End
%If (Qt_4_4_0 -)
    void setViewMode(QMdiArea::ViewMode);
%End
%If (Qt_4_4_0 -)
    QMdiArea::ViewMode viewMode() const;
%End
%If (Qt_4_4_0 -)
    void setTabShape(QTabWidget::TabShape);
%End
%If (Qt_4_4_0 -)
    QTabWidget::TabShape tabShape() const;
%End
%If (Qt_4_4_0 -)
    void setTabPosition(QTabWidget::TabPosition);
%End
%If (Qt_4_4_0 -)
    QTabWidget::TabPosition tabPosition() const;
%End
%If (Qt_4_5_0 -)
    bool documentMode() const;
%End
%If (Qt_4_5_0 -)
    void setDocumentMode(bool);
%End

private:
    QMdiArea(const QMdiArea &);
};

%End
%If (Qt_4_3_0 -)
QFlags<QMdiArea::AreaOption> operator|(QMdiArea::AreaOption, QFlags<QMdiArea::AreaOption>);
%End
