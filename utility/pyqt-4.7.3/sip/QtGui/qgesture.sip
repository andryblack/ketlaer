// qgesture.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_6_0 -)

class QGesture : QObject
{

%TypeHeaderCode
#include <qgesture.h>
%End

public:
    explicit QGesture(QObject *parent /TransferThis/ = 0);
    virtual ~QGesture();
    Qt::GestureType gestureType() const;
    Qt::GestureState state() const;
    QPointF hotSpot() const;
    void setHotSpot(const QPointF &);
    bool hasHotSpot() const;
    void unsetHotSpot();

    enum GestureCancelPolicy
    {
        CancelNone,
        CancelAllInContext,
    };

    void setGestureCancelPolicy(QGesture::GestureCancelPolicy);
    QGesture::GestureCancelPolicy gestureCancelPolicy() const;
};

%End
%If (Qt_4_6_0 -)

class QPanGesture : QGesture
{

%TypeHeaderCode
#include <qgesture.h>
%End

public:
    QPanGesture(QObject *parent /TransferThis/ = 0);
    QPointF lastOffset() const;
    QPointF offset() const;
    QPointF delta() const;
    qreal acceleration() const;
    void setLastOffset(const QPointF &);
    void setOffset(const QPointF &);
    void setAcceleration(qreal);
};

%End
%If (Qt_4_6_0 -)

class QPinchGesture : QGesture
{

%TypeHeaderCode
#include <qgesture.h>
%End

public:
    enum ChangeFlag
    {
        ScaleFactorChanged,
        RotationAngleChanged,
        CenterPointChanged,
    };

    typedef QFlags<QPinchGesture::ChangeFlag> ChangeFlags;
    QPinchGesture(QObject *parent /TransferThis/ = 0);
    QFlags<QPinchGesture::ChangeFlag> totalChangeFlags() const;
    void setTotalChangeFlags(QFlags<QPinchGesture::ChangeFlag>);
    QFlags<QPinchGesture::ChangeFlag> changeFlags() const;
    void setChangeFlags(QFlags<QPinchGesture::ChangeFlag>);
    QPointF startCenterPoint() const;
    QPointF lastCenterPoint() const;
    QPointF centerPoint() const;
    void setStartCenterPoint(const QPointF &);
    void setLastCenterPoint(const QPointF &);
    void setCenterPoint(const QPointF &);
    qreal totalScaleFactor() const;
    qreal lastScaleFactor() const;
    qreal scaleFactor() const;
    void setTotalScaleFactor(qreal);
    void setLastScaleFactor(qreal);
    void setScaleFactor(qreal);
    qreal totalRotationAngle() const;
    qreal lastRotationAngle() const;
    qreal rotationAngle() const;
    void setTotalRotationAngle(qreal);
    void setLastRotationAngle(qreal);
    void setRotationAngle(qreal);
};

%End
%If (Qt_4_6_0 -)

class QSwipeGesture : QGesture
{

%TypeHeaderCode
#include <qgesture.h>
%End

public:
    enum SwipeDirection
    {
        NoDirection,
        Left,
        Right,
        Up,
        Down,
    };

    QSwipeGesture(QObject *parent /TransferThis/ = 0);
    QSwipeGesture::SwipeDirection horizontalDirection() const;
    QSwipeGesture::SwipeDirection verticalDirection() const;
    qreal swipeAngle() const;
    void setSwipeAngle(qreal);
};

%End
%If (Qt_4_6_0 -)

class QTapGesture : QGesture
{

%TypeHeaderCode
#include <qgesture.h>
%End

public:
    QTapGesture(QObject *parent /TransferThis/ = 0);
    QPointF position() const;
    void setPosition(const QPointF &);
};

%End
%If (Qt_4_6_0 -)

class QTapAndHoldGesture : QGesture
{

%TypeHeaderCode
#include <qgesture.h>
%End

public:
    QTapAndHoldGesture(QObject *parent /TransferThis/ = 0);
    QPointF position() const;
    void setPosition(const QPointF &);
};

%End
