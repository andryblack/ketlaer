// qmenu.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QMenu : QWidget
{

%TypeHeaderCode
#include <qmenu.h>
%End

public:
    explicit QMenu(QWidget *parent /TransferThis/ = 0);
    QMenu(const QString &, QWidget *parent /TransferThis/ = 0);
    virtual ~QMenu();
    void addAction(QAction *);
    QAction *addAction(const QString &) /Transfer/;
    QAction *addAction(const QIcon &, const QString &) /Transfer/;
    QAction *addAction(const QString &, SIP_RXOBJ_CON, SIP_SLOT_CON(), const QKeySequence &shortcut = 0) /Transfer/ [QAction * (const QString &text, const QObject *receiver, const char *member, const QKeySequence &shortcut = 0)];
    QAction *addAction(const QIcon &, const QString &, SIP_RXOBJ_CON, SIP_SLOT_CON(), const QKeySequence &shortcut = 0) /Transfer/ [QAction * (const QIcon &icon, const QString &text, const QObject *receiver, const char *member, const QKeySequence &shortcut = 0)];
    QAction *addMenu(QMenu *);
    QMenu *addMenu(const QString &) /Transfer/;
    QMenu *addMenu(const QIcon &, const QString &) /Transfer/;
    QAction *addSeparator() /Transfer/;
    QAction *insertMenu(QAction *, QMenu *);
    QAction *insertSeparator(QAction *) /Transfer/;
    void clear();
    void setTearOffEnabled(bool);
    bool isTearOffEnabled() const;
    bool isTearOffMenuVisible() const;
    void hideTearOffMenu();
    void setDefaultAction(QAction *);
    QAction *defaultAction() const;
    void setActiveAction(QAction *);
    QAction *activeAction() const;
    void popup(const QPoint &, QAction *action = 0);
    QAction *exec() /PostHook=__pyQtPostEventLoopHook__,PreHook=__pyQtPreEventLoopHook__,PyName=exec_,ReleaseGIL/;
%If (Py_v3)
    QAction *exec() /ReleaseGIL/;
%End
    QAction *exec(const QPoint &, QAction *action = 0) /PostHook=__pyQtPostEventLoopHook__,PreHook=__pyQtPreEventLoopHook__,PyName=exec_,ReleaseGIL/;
%If (Py_v3)
    QAction *exec(const QPoint &pos, QAction *action = 0) /ReleaseGIL/;
%End
    static QAction *exec(QList<QAction*>, const QPoint &, QAction *action = 0) /PostHook=__pyQtPostEventLoopHook__,PreHook=__pyQtPreEventLoopHook__,PyName=exec_,ReleaseGIL/;
%If (Py_v3)
    static QAction *exec(QList<QAction*> actions, const QPoint &pos, QAction *action = 0) /ReleaseGIL/;
%End
%If (Qt_4_5_0 -)
    static QAction *exec(QList<QAction*>, const QPoint &, QAction *, QWidget *) /PostHook=__pyQtPostEventLoopHook__,PreHook=__pyQtPreEventLoopHook__,PyName=exec_,ReleaseGIL/;
%End
%If (Qt_4_5_0 -)
%If (Py_v3)
    static QAction *exec(QList<QAction*> actions, const QPoint &pos, QAction *at, QWidget *parent) /ReleaseGIL/;
%End
%End
    virtual QSize sizeHint() const;
    QRect actionGeometry(QAction *) const;
    QAction *actionAt(const QPoint &) const;
    QAction *menuAction() const;
    QString title() const;
    void setTitle(const QString &);
    QIcon icon() const;
    void setIcon(const QIcon &);
    void setNoReplayFor(QWidget *);

signals:
%If (Qt_4_2_0 -)
    void aboutToHide();
%End
    void aboutToShow();
    void hovered(QAction *);
    void triggered(QAction *);

protected:
    int columnCount() const;
%If (Qt_4_3_0 -)
    void initStyleOption(QStyleOptionMenuItem *, const QAction *) const;
%End
    virtual void changeEvent(QEvent *);
    virtual void keyPressEvent(QKeyEvent *);
    virtual void mouseReleaseEvent(QMouseEvent *);
    virtual void mousePressEvent(QMouseEvent *);
    virtual void mouseMoveEvent(QMouseEvent *);
    virtual void wheelEvent(QWheelEvent *);
    virtual void enterEvent(QEvent *);
    virtual void leaveEvent(QEvent *);
    virtual void hideEvent(QHideEvent *);
    virtual void paintEvent(QPaintEvent *);
    virtual void actionEvent(QActionEvent *);
    virtual void timerEvent(QTimerEvent *);
    virtual bool event(QEvent *);
%If (Qt_4_2_0 -)
    virtual bool focusNextPrevChild(bool);
%End

public:
%If (Qt_4_2_0 -)
    bool isEmpty() const;
%End
%If (Qt_4_2_0 -)
    bool separatorsCollapsible() const;
%End
%If (Qt_4_2_0 -)
    void setSeparatorsCollapsible(bool);
%End

private:
    QMenu(const QMenu &);
};
