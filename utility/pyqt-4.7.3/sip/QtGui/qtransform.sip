// qtransform.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_3_0 -)
%ModuleCode
#include <qtransform.h>
%End
%End

%If (Qt_4_3_0 -)

class QTransform
{

%TypeHeaderCode
#include <qtransform.h>
%End

%PickleCode
    sipRes = Py_BuildValue((char *)"ddddddddd", sipCpp->m11(), sipCpp->m12(), sipCpp->m13(), sipCpp->m21(), sipCpp->m22(), sipCpp->m23(), sipCpp->m31(), sipCpp->m32(), sipCpp->m33());
%End

public:
    enum TransformationType
    {
        TxNone,
        TxTranslate,
        TxScale,
        TxRotate,
        TxShear,
        TxProject,
    };

    QTransform();
    QTransform(qreal, qreal, qreal, qreal, qreal, qreal, qreal, qreal, qreal m33 = 1.0e+0);
    QTransform(qreal, qreal, qreal, qreal, qreal, qreal);
    explicit QTransform(const QMatrix &);
    QTransform::TransformationType type() const;
    void setMatrix(qreal, qreal, qreal, qreal, qreal, qreal, qreal, qreal, qreal);
    QTransform inverted(bool *invertible = 0) const;
    QTransform adjoint() const;
    QTransform transposed() const;
    QTransform &translate(qreal, qreal);
    QTransform &scale(qreal, qreal);
    QTransform &shear(qreal, qreal);
    QTransform &rotate(qreal, Qt::Axis axis = Qt::ZAxis);
    QTransform &rotateRadians(qreal, Qt::Axis axis = Qt::ZAxis);
    static bool squareToQuad(const QPolygonF &, QTransform &);
    static bool quadToSquare(const QPolygonF &, QTransform &);
    static bool quadToQuad(const QPolygonF &, const QPolygonF &, QTransform &);
    bool operator==(const QTransform &) const;
    bool operator!=(const QTransform &) const;
    QTransform &operator*=(const QTransform &);
    QTransform operator*(const QTransform &) const;
    void reset();
    void map(int /Constrained/, int /Constrained/, int *, int *) const;
    void map(qreal, qreal, qreal *, qreal *) const;
    QPoint map(const QPoint &) const;
    QPointF map(const QPointF &) const;
    QLine map(const QLine &) const;
    QLineF map(const QLineF &) const;
    QPolygonF map(const QPolygonF &) const;
    QPolygon map(const QPolygon &) const;
    QRegion map(const QRegion &) const;
    QPainterPath map(const QPainterPath &) const;
    QPolygon mapToPolygon(const QRect &) const;
    QRect mapRect(const QRect &) const;
    QRectF mapRect(const QRectF &) const;
    const QMatrix &toAffine() const;
    bool isAffine() const;
    bool isIdentity() const;
    bool isInvertible() const;
    bool isScaling() const;
    bool isRotating() const;
    bool isTranslating() const;
    qreal determinant() const;
    qreal det() const;
    qreal m11() const;
    qreal m12() const;
    qreal m13() const;
    qreal m21() const;
    qreal m22() const;
    qreal m23() const;
    qreal m31() const;
    qreal m32() const;
    qreal m33() const;
    qreal dx() const;
    qreal dy() const;
%If (Qt_4_5_0 -)
    static QTransform fromTranslate(qreal, qreal);
%End
%If (Qt_4_5_0 -)
    static QTransform fromScale(qreal, qreal);
%End
    QTransform &operator*=(qreal);
    QTransform &operator/=(qreal);
    QTransform &operator+=(qreal);
    QTransform &operator-=(qreal);
};

%End
%If (Qt_4_3_0 -)
QDataStream &operator<<(QDataStream &, const QTransform & /Constrained/);
%End
%If (Qt_4_3_0 -)
QDataStream &operator>>(QDataStream &, QTransform & /Constrained/);
%End
%If (Qt_4_3_0 -)
QPoint operator*(const QPoint &, const QTransform &);
%End
%If (Qt_4_3_0 -)
QPointF operator*(const QPointF &, const QTransform &);
%End
%If (Qt_4_3_0 -)
QLineF operator*(const QLineF &, const QTransform &);
%End
%If (Qt_4_3_0 -)
QLine operator*(const QLine &, const QTransform &);
%End
%If (Qt_4_3_0 -)
QPolygon operator*(const QPolygon &, const QTransform &);
%End
%If (Qt_4_3_0 -)
QPolygonF operator*(const QPolygonF &, const QTransform &);
%End
%If (Qt_4_3_0 -)
QRegion operator*(const QRegion &, const QTransform &);
%End
%If (Qt_4_3_0 -)
QPainterPath operator*(const QPainterPath &, const QTransform &);
%End
%If (Qt_4_3_0 -)
QTransform operator*(const QTransform &, qreal);
%End
%If (Qt_4_3_0 -)
QTransform operator/(const QTransform &, qreal);
%End
%If (Qt_4_3_0 -)
QTransform operator+(const QTransform &, qreal);
%End
%If (Qt_4_3_0 -)
QTransform operator-(const QTransform &, qreal);
%End
%If (Qt_4_6_0 -)
bool qFuzzyCompare(const QTransform &, const QTransform &);
%End
