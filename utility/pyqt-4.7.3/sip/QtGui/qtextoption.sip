// qtextoption.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qtextoption.h>
%End

class QTextOption
{

%TypeHeaderCode
#include <qtextoption.h>
%End

public:
    QTextOption();
    QTextOption(Qt::Alignment);
    ~QTextOption();
    QTextOption(const QTextOption &);
    Qt::Alignment alignment() const;
    void setTextDirection(Qt::LayoutDirection);
    Qt::LayoutDirection textDirection() const;

    enum WrapMode
    {
        NoWrap,
        WordWrap,
        ManualWrap,
        WrapAnywhere,
        WrapAtWordBoundaryOrAnywhere,
    };

    void setWrapMode(QTextOption::WrapMode);
    QTextOption::WrapMode wrapMode() const;

    enum Flag
    {
        IncludeTrailingSpaces,
%If (Qt_4_5_0 -)
        ShowTabsAndSpaces,
%End
%If (Qt_4_5_0 -)
        ShowLineAndParagraphSeparators,
%End
%If (Qt_4_5_0 -)
        AddSpaceForLineAndParagraphSeparators,
%End
%If (Qt_4_5_0 -)
        SuppressColors,
%End
    };

    typedef QFlags<QTextOption::Flag> Flags;
    QFlags<QTextOption::Flag> flags() const;
    qreal tabStop() const;
    void setTabArray(QList<qreal>);
    QList<qreal> tabArray() const;
    void setUseDesignMetrics(bool);
    bool useDesignMetrics() const;
    void setAlignment(Qt::Alignment);
    void setFlags(QFlags<QTextOption::Flag>);
    void setTabStop(qreal);
%If (Qt_4_4_0 -)

    enum TabType
    {
        LeftTab,
        RightTab,
        CenterTab,
        DelimiterTab,
    };

%End
%If (Qt_4_4_0 -)

    struct Tab
    {

%TypeHeaderCode
#include <qtextoption.h>
%End

        Tab();
        bool operator==(const QTextOption::Tab &) const;
        bool operator!=(const QTextOption::Tab &) const;
        qreal position;
        QTextOption::TabType type;
        QChar delimiter;
    };

%End
%If (Qt_4_4_0 -)
    void setTabs(QList<QTextOption::Tab>);
%End
%If (Qt_4_4_0 -)
    QList<QTextOption::Tab> tabs() const;
%End
};

QFlags<QTextOption::Flag> operator|(QTextOption::Flag, QFlags<QTextOption::Flag>);
