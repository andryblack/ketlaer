// qvalidator.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QValidator : QObject
{

%TypeHeaderCode
#include <qvalidator.h>
%End

public:
%If (- Qt_4_6_0)
    explicit QValidator(QObject * /TransferThis/);
%End
%If (Qt_4_6_0 -)
    explicit QValidator(QObject *parent /TransferThis/ = 0);
%End
    virtual ~QValidator();

    enum State
    {
        Invalid,
        Intermediate,
        Acceptable,
    };

    virtual QValidator::State validate(QString & /In,Out/, int & /In,Out/) const = 0 /API=QString:2 - /;
    virtual QValidator::State validate(QString & /Constrained/, int & /In,Out/) const = 0 /API=QString: - 2/;
    virtual void fixup(QString &input /In,Out/) const /API=QString:2 - /;
    virtual void fixup(QString & /Constrained/) const /API=QString: - 2/;
%If (Qt_4_3_0 -)
    void setLocale(const QLocale &);
%End
%If (Qt_4_3_0 -)
    QLocale locale() const;
%End

private:
    QValidator(const QValidator &);
};

class QIntValidator : QValidator
{

%TypeHeaderCode
#include <qvalidator.h>
%End

public:
%If (- Qt_4_6_0)
    explicit QIntValidator(QObject * /TransferThis/);
%End
%If (Qt_4_6_0 -)
    explicit QIntValidator(QObject *parent /TransferThis/ = 0);
%End
    QIntValidator(int, int, QObject * /TransferThis/);
    virtual ~QIntValidator();
    virtual QValidator::State validate(QString & /In,Out/, int & /In,Out/) const /API=QString:2 - /;
    virtual QValidator::State validate(QString & /Constrained/, int & /In,Out/) const /API=QString: - 2/;
    void setBottom(int);
    void setTop(int);
    virtual void setRange(int, int);
    int bottom() const;
    int top() const;

private:
    QIntValidator(const QIntValidator &);
};

class QDoubleValidator : QValidator
{

%TypeHeaderCode
#include <qvalidator.h>
%End

public:
    explicit QDoubleValidator(QObject * /TransferThis/);
    QDoubleValidator(double, double, int, QObject * /TransferThis/);
    virtual ~QDoubleValidator();
    virtual QValidator::State validate(QString & /In,Out/, int & /In,Out/) const /API=QString:2 - /;
    virtual QValidator::State validate(QString & /Constrained/, int & /In,Out/) const /API=QString: - 2/;
    virtual void setRange(double, double, int decimals = 0);
    void setBottom(double);
    void setTop(double);
    void setDecimals(int);
    double bottom() const;
    double top() const;
    int decimals() const;
%If (Qt_4_3_0 -)

    enum Notation
    {
        StandardNotation,
        ScientificNotation,
    };

%End
%If (Qt_4_3_0 -)
    void setNotation(QDoubleValidator::Notation);
%End
%If (Qt_4_3_0 -)
    QDoubleValidator::Notation notation() const;
%End

private:
    QDoubleValidator(const QDoubleValidator &);
};

class QRegExpValidator : QValidator
{

%TypeHeaderCode
#include <qvalidator.h>
%End

public:
    explicit QRegExpValidator(QObject * /TransferThis/);
    QRegExpValidator(const QRegExp &, QObject * /TransferThis/);
    virtual ~QRegExpValidator();
    virtual QValidator::State validate(QString &input /In,Out/, int &pos /In,Out/) const /API=QString:2 - /;
    virtual QValidator::State validate(QString & /Constrained/, int & /In,Out/) const /API=QString: - 2/;
    void setRegExp(const QRegExp &);
    const QRegExp &regExp() const;

private:
    QRegExpValidator(const QRegExpValidator &);
};
