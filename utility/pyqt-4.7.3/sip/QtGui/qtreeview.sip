// qtreeview.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QTreeView : QAbstractItemView
{

%TypeHeaderCode
#include <qtreeview.h>
%End

public:
    explicit QTreeView(QWidget *parent /TransferThis/ = 0);
    virtual ~QTreeView();
    virtual void setModel(QAbstractItemModel * /KeepReference/);
    virtual void setRootIndex(const QModelIndex &);
    virtual void setSelectionModel(QItemSelectionModel * /KeepReference/);
    QHeaderView *header() const;
    void setHeader(QHeaderView *);
    int indentation() const;
    void setIndentation(int);
    bool rootIsDecorated() const;
    void setRootIsDecorated(bool);
    bool uniformRowHeights() const;
    void setUniformRowHeights(bool);
    bool itemsExpandable() const;
    void setItemsExpandable(bool);
    int columnViewportPosition(int) const;
    int columnWidth(int) const;
    int columnAt(int) const;
    bool isColumnHidden(int) const;
    void setColumnHidden(int, bool);
    bool isRowHidden(int, const QModelIndex &) const;
    void setRowHidden(int, const QModelIndex &, bool);
    bool isExpanded(const QModelIndex &) const;
    void setExpanded(const QModelIndex &, bool);
    virtual void keyboardSearch(const QString &);
    virtual QRect visualRect(const QModelIndex &) const;
    virtual void scrollTo(const QModelIndex &, QAbstractItemView::ScrollHint hint = QAbstractItemView::EnsureVisible);
    virtual QModelIndex indexAt(const QPoint &) const;
    QModelIndex indexAbove(const QModelIndex &) const;
    QModelIndex indexBelow(const QModelIndex &) const;
    virtual void doItemsLayout();
    virtual void reset();

signals:
    void expanded(const QModelIndex &);
    void collapsed(const QModelIndex &);

public slots:
    virtual void dataChanged(const QModelIndex &, const QModelIndex &);
    void hideColumn(int);
    void showColumn(int);
    void expand(const QModelIndex &);
%If (Qt_4_2_0 -)
    void expandAll();
%End
    void collapse(const QModelIndex &);
%If (Qt_4_2_0 -)
    void collapseAll();
%End
    void resizeColumnToContents(int);
    void sortByColumn(int);
    virtual void selectAll();

protected slots:
    void columnResized(int, int, int);
    void columnCountChanged(int, int);
    void columnMoved();
    void reexpand();
    void rowsRemoved(const QModelIndex &, int, int);

protected:
    virtual void scrollContentsBy(int, int);
    virtual void rowsInserted(const QModelIndex &, int, int);
    virtual void rowsAboutToBeRemoved(const QModelIndex &, int, int);
    virtual QModelIndex moveCursor(QAbstractItemView::CursorAction, Qt::KeyboardModifiers);
    virtual int horizontalOffset() const;
    virtual int verticalOffset() const;
    virtual void setSelection(const QRect &, QFlags<QItemSelectionModel::SelectionFlag>);
    virtual QRegion visualRegionForSelection(const QItemSelection &) const;
    virtual QModelIndexList selectedIndexes() const;
    virtual void paintEvent(QPaintEvent *);
    virtual void timerEvent(QTimerEvent *);
    virtual void mouseReleaseEvent(QMouseEvent *);
    virtual void drawRow(QPainter *, const QStyleOptionViewItem &, const QModelIndex &) const;
    virtual void drawBranches(QPainter *, const QRect &, const QModelIndex &) const;
%If (Qt_4_2_0 -)
    void drawTree(QPainter *, const QRegion &) const;
%End
    virtual void mousePressEvent(QMouseEvent *);
%If (Qt_4_2_0 -)
    virtual void mouseMoveEvent(QMouseEvent *);
%End
    virtual void mouseDoubleClickEvent(QMouseEvent *);
%If (Qt_4_2_0 -)
    virtual void keyPressEvent(QKeyEvent *);
%End
    virtual void updateGeometries();
    virtual int sizeHintForColumn(int) const;
    int indexRowSizeHint(const QModelIndex &) const;
    virtual void horizontalScrollbarAction(int);
    virtual bool isIndexHidden(const QModelIndex &) const;

public:
%If (Qt_4_2_0 -)
    void setColumnWidth(int, int);
%End
%If (Qt_4_2_0 -)
    void setSortingEnabled(bool);
%End
%If (Qt_4_2_0 -)
    bool isSortingEnabled() const;
%End
%If (Qt_4_2_0 -)
    void setAnimated(bool);
%End
%If (Qt_4_2_0 -)
    bool isAnimated() const;
%End
%If (Qt_4_2_0 -)
    void setAllColumnsShowFocus(bool);
%End
%If (Qt_4_2_0 -)
    bool allColumnsShowFocus() const;
%End
%If (Qt_4_2_0 -)
    void sortByColumn(int, Qt::SortOrder);
%End
%If (Qt_4_3_0 -)
    int autoExpandDelay() const;
%End
%If (Qt_4_3_0 -)
    void setAutoExpandDelay(int);
%End
%If (Qt_4_3_0 -)
    bool isFirstColumnSpanned(int, const QModelIndex &) const;
%End
%If (Qt_4_3_0 -)
    void setFirstColumnSpanned(int, const QModelIndex &, bool);
%End
%If (Qt_4_3_0 -)
    void setWordWrap(bool);
%End
%If (Qt_4_3_0 -)
    bool wordWrap() const;
%End

public slots:
%If (Qt_4_3_0 -)
    void expandToDepth(int);
%End

protected:
%If (Qt_4_3_0 -)
    virtual void dragMoveEvent(QDragMoveEvent *);
%End
%If (Qt_4_3_0 -)
    virtual bool viewportEvent(QEvent *);
%End
%If (Qt_4_3_0 -)
    int rowHeight(const QModelIndex &) const;
%End
%If (Qt_4_3_0 -)
    virtual void selectionChanged(const QItemSelection &, const QItemSelection &);
%End
%If (Qt_4_3_0 -)
    virtual void currentChanged(const QModelIndex &, const QModelIndex &);
%End

public:
%If (Qt_4_4_0 -)
    bool expandsOnDoubleClick() const;
%End
%If (Qt_4_4_0 -)
    void setExpandsOnDoubleClick(bool);
%End
%If (Qt_4_4_0 -)
    bool isHeaderHidden() const;
%End
%If (Qt_4_4_0 -)
    void setHeaderHidden(bool);
%End

private:
    QTreeView(const QTreeView &);
};
