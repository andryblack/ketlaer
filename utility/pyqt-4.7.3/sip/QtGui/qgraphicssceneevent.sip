// qgraphicssceneevent.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_2_0 -)

class QGraphicsSceneEvent : QEvent /NoDefaultCtors/
{

%TypeHeaderCode
#include <qgraphicssceneevent.h>
%End

public:
    virtual ~QGraphicsSceneEvent();
    QWidget *widget() const;
    void setWidget(QWidget *);

private:
%If (Qt_4_6_0 -)
    QGraphicsSceneEvent(const QGraphicsSceneEvent &);
%End
};

%End
%If (Qt_4_2_0 -)

class QGraphicsSceneMouseEvent : QGraphicsSceneEvent /NoDefaultCtors/
{

%TypeHeaderCode
#include <qgraphicssceneevent.h>
%End

public:
    virtual ~QGraphicsSceneMouseEvent();
    QPointF pos() const;
    QPointF scenePos() const;
    QPoint screenPos() const;
    QPointF buttonDownPos(Qt::MouseButton) const;
    QPointF buttonDownScenePos(Qt::MouseButton) const;
    QPoint buttonDownScreenPos(Qt::MouseButton) const;
    QPointF lastPos() const;
    QPointF lastScenePos() const;
    QPoint lastScreenPos() const;
    Qt::MouseButtons buttons() const;
    Qt::MouseButton button() const;
    Qt::KeyboardModifiers modifiers() const;
};

%End
%If (Qt_4_2_0 -)

class QGraphicsSceneWheelEvent : QGraphicsSceneEvent /NoDefaultCtors/
{

%TypeHeaderCode
#include <qgraphicssceneevent.h>
%End

public:
    virtual ~QGraphicsSceneWheelEvent();
    QPointF pos() const;
    QPointF scenePos() const;
    QPoint screenPos() const;
    Qt::MouseButtons buttons() const;
    Qt::KeyboardModifiers modifiers() const;
    int delta() const;
%If (Qt_4_3_0 -)
    Qt::Orientation orientation() const;
%End
};

%End
%If (Qt_4_2_0 -)

class QGraphicsSceneContextMenuEvent : QGraphicsSceneEvent /NoDefaultCtors/
{

%TypeHeaderCode
#include <qgraphicssceneevent.h>
%End

public:
    enum Reason
    {
        Mouse,
        Keyboard,
        Other,
    };

    virtual ~QGraphicsSceneContextMenuEvent();
    QPointF pos() const;
    QPointF scenePos() const;
    QPoint screenPos() const;
    Qt::KeyboardModifiers modifiers() const;
    QGraphicsSceneContextMenuEvent::Reason reason() const;
};

%End
%If (Qt_4_2_0 -)

class QGraphicsSceneHoverEvent : QGraphicsSceneEvent /NoDefaultCtors/
{

%TypeHeaderCode
#include <qgraphicssceneevent.h>
%End

public:
    virtual ~QGraphicsSceneHoverEvent();
    QPointF pos() const;
    QPointF scenePos() const;
    QPoint screenPos() const;
%If (Qt_4_4_0 -)
    QPointF lastPos() const;
%End
%If (Qt_4_4_0 -)
    QPointF lastScenePos() const;
%End
%If (Qt_4_4_0 -)
    QPoint lastScreenPos() const;
%End
%If (Qt_4_4_0 -)
    Qt::KeyboardModifiers modifiers() const;
%End
};

%End
%If (Qt_4_2_0 -)

class QGraphicsSceneHelpEvent : QGraphicsSceneEvent /NoDefaultCtors/
{

%TypeHeaderCode
#include <qgraphicssceneevent.h>
%End

public:
    virtual ~QGraphicsSceneHelpEvent();
    QPointF scenePos() const;
    QPoint screenPos() const;
};

%End
%If (Qt_4_2_0 -)

class QGraphicsSceneDragDropEvent : QGraphicsSceneEvent /NoDefaultCtors/
{

%TypeHeaderCode
#include <qgraphicssceneevent.h>
%End

public:
    virtual ~QGraphicsSceneDragDropEvent();
    QPointF pos() const;
    QPointF scenePos() const;
    QPoint screenPos() const;
    Qt::MouseButtons buttons() const;
    Qt::KeyboardModifiers modifiers() const;
    Qt::DropActions possibleActions() const;
    Qt::DropAction proposedAction() const;
    void acceptProposedAction();
    Qt::DropAction dropAction() const;
    void setDropAction(Qt::DropAction);
    QWidget *source() const;
    const QMimeData *mimeData() const;
};

%End
%If (Qt_4_4_0 -)

class QGraphicsSceneResizeEvent : QGraphicsSceneEvent
{

%TypeHeaderCode
#include <qgraphicssceneevent.h>
%End

public:
    QGraphicsSceneResizeEvent();
    virtual ~QGraphicsSceneResizeEvent();
    QSizeF oldSize() const;
    QSizeF newSize() const;
};

%End
%If (Qt_4_4_0 -)

class QGraphicsSceneMoveEvent : QGraphicsSceneEvent
{

%TypeHeaderCode
#include <qgraphicssceneevent.h>
%End

public:
    QGraphicsSceneMoveEvent();
    virtual ~QGraphicsSceneMoveEvent();
    QPointF oldPos() const;
    QPointF newPos() const;
};

%End
