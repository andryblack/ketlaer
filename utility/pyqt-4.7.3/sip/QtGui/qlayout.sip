// qlayout.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QLayout : QObject, QLayoutItem
{

%TypeHeaderCode
#include <qlayout.h>
%End

public:
    enum SizeConstraint
    {
        SetDefaultConstraint,
        SetNoConstraint,
        SetMinimumSize,
        SetFixedSize,
        SetMaximumSize,
        SetMinAndMaxSize,
    };

    QLayout(QWidget * /TransferThis/);
    QLayout();
    virtual ~QLayout();
    int margin() const;
    int spacing() const;
    void setMargin(int);
    void setSpacing(int);
    bool setAlignment(QWidget *, Qt::Alignment);
    bool setAlignment(QLayout *, Qt::Alignment);
    void setAlignment(Qt::Alignment);
    void setSizeConstraint(QLayout::SizeConstraint);
    QLayout::SizeConstraint sizeConstraint() const;
    void setMenuBar(QWidget * /Transfer/);
    QWidget *menuBar() const;
    QWidget *parentWidget() const;
    virtual void invalidate();
    virtual QRect geometry() const;
    bool activate();
    void update();
    void addWidget(QWidget * /Transfer/);
    virtual void addItem(QLayoutItem * /Transfer/) = 0;
    void removeWidget(QWidget *);
    void removeItem(QLayoutItem * /TransferBack/);
    virtual Qt::Orientations expandingDirections() const;
    virtual QSize minimumSize() const;
    virtual QSize maximumSize() const;
    virtual void setGeometry(const QRect &);
    virtual QLayoutItem *itemAt(int) const = 0;
    virtual QLayoutItem *takeAt(int) = 0 /TransferBack/;
    virtual int indexOf(QWidget *) const;
    virtual int count() const = 0;
    virtual bool isEmpty() const;
    int totalHeightForWidth(int) const;
    QSize totalMinimumSize() const;
    QSize totalMaximumSize() const;
    QSize totalSizeHint() const;
    virtual QLayout *layout();
    void setEnabled(bool);
    bool isEnabled() const;
    static QSize closestAcceptableSize(const QWidget *, const QSize &);

protected:
    void widgetEvent(QEvent *);
    virtual void childEvent(QChildEvent *);
    void addChildLayout(QLayout * /Transfer/);
    void addChildWidget(QWidget * /Transfer/);
    QRect alignmentRect(const QRect &) const;

public:
%If (Qt_4_3_0 -)
    void setContentsMargins(int, int, int, int);
%End
%If (Qt_4_3_0 -)
    void getContentsMargins(int *, int *, int *, int *) const;
%End
%If (Qt_4_3_0 -)
    QRect contentsRect() const;
%End
%If (Qt_4_6_0 -)
    void setContentsMargins(const QMargins &);
%End
%If (Qt_4_6_0 -)
    QMargins contentsMargins() const;
%End

private:
    QLayout(const QLayout &);
};
