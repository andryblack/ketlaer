// qsplitter.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qsplitter.h>
%End

class QSplitter : QFrame
{

%TypeHeaderCode
#include <qsplitter.h>
%End

public:
    explicit QSplitter(QWidget *parent /TransferThis/ = 0);
    QSplitter(Qt::Orientation, QWidget *parent /TransferThis/ = 0);
    virtual ~QSplitter();
    void addWidget(QWidget * /Transfer/);
    void insertWidget(int, QWidget * /Transfer/);
    void setOrientation(Qt::Orientation);
    Qt::Orientation orientation() const;
    void setChildrenCollapsible(bool);
    bool childrenCollapsible() const;
    void setCollapsible(int, bool);
    bool isCollapsible(int) const;
    void setOpaqueResize(bool opaque = true);
    bool opaqueResize() const;
    void refresh();
    virtual QSize sizeHint() const;
    virtual QSize minimumSizeHint() const;
    QList<int> sizes() const;
    void setSizes(const QList<int> &);
    QByteArray saveState() const;
    bool restoreState(const QByteArray &);
    int handleWidth() const;
    void setHandleWidth(int);
    int indexOf(QWidget *) const;
    QWidget *widget(int) const;
    int count() const;
    void getRange(int, int *, int *) const;
    QSplitterHandle *handle(int) const /Transfer/;
    void setStretchFactor(int, int);

signals:
    void splitterMoved(int, int);

protected:
    virtual QSplitterHandle *createHandle() /Transfer/;
    virtual void childEvent(QChildEvent *);
    virtual bool event(QEvent *);
    virtual void resizeEvent(QResizeEvent *);
    virtual void changeEvent(QEvent *);
    void moveSplitter(int, int);
    void setRubberBand(int);
    int closestLegalPosition(int, int);

private:
    QSplitter(const QSplitter &);
};

QTextStream &operator<<(QTextStream &, const QSplitter &);
QTextStream &operator>>(QTextStream &, QSplitter &);

class QSplitterHandle : QWidget
{

%TypeHeaderCode
#include <qsplitter.h>
%End

public:
    QSplitterHandle(Qt::Orientation, QSplitter * /TransferThis/);
    void setOrientation(Qt::Orientation);
    Qt::Orientation orientation() const;
    bool opaqueResize() const;
    QSplitter *splitter() const;
    virtual QSize sizeHint() const;

protected:
    virtual void paintEvent(QPaintEvent *);
    virtual void mouseMoveEvent(QMouseEvent *);
    virtual void mousePressEvent(QMouseEvent *);
    virtual void mouseReleaseEvent(QMouseEvent *);
    virtual bool event(QEvent *);
    void moveSplitter(int);
    int closestLegalPosition(int);

private:
    QSplitterHandle(const QSplitterHandle &);
};
