// qfont.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qfont.h>
%End

class QFont
{

%TypeHeaderCode
#include <qfont.h>
%End

public:
    enum StyleHint
    {
        Helvetica,
        SansSerif,
        Times,
        Serif,
        Courier,
        TypeWriter,
        OldEnglish,
        Decorative,
        System,
        AnyStyle,
    };

    enum StyleStrategy
    {
        PreferDefault,
        PreferBitmap,
        PreferDevice,
        PreferOutline,
        ForceOutline,
        PreferMatch,
        PreferQuality,
        PreferAntialias,
        NoAntialias,
        OpenGLCompatible,
%If (Qt_4_2_0 -)
        NoFontMerging,
%End
    };

    enum Weight
    {
        Light,
        Normal,
        DemiBold,
        Bold,
        Black,
    };

    enum Style
    {
        StyleNormal,
        StyleItalic,
        StyleOblique,
    };

    enum Stretch
    {
        UltraCondensed,
        ExtraCondensed,
        Condensed,
        SemiCondensed,
        Unstretched,
        SemiExpanded,
        Expanded,
        ExtraExpanded,
        UltraExpanded,
    };

    QFont();
    QFont(const QString &, int pointSize = -1, int weight = -1, bool italic = false);
    QFont(const QFont &, QPaintDevice *);
    QFont(const QFont &);
    QFont(const QVariant &variant) /NoDerived/;
%MethodCode
        sipCpp = new QFont(qVariantValue<QFont>(*a0));
%End

    ~QFont();
    QString family() const;
    void setFamily(const QString &);
    int pointSize() const;
    void setPointSize(int);
    qreal pointSizeF() const;
    void setPointSizeF(qreal);
    int pixelSize() const;
    void setPixelSize(int);
    int weight() const;
    void setWeight(int);
    void setStyle(QFont::Style);
    QFont::Style style() const;
    bool underline() const;
    void setUnderline(bool);
    bool overline() const;
    void setOverline(bool);
    bool strikeOut() const;
    void setStrikeOut(bool);
    bool fixedPitch() const;
    void setFixedPitch(bool);
    bool kerning() const;
    void setKerning(bool);
    QFont::StyleHint styleHint() const;
    QFont::StyleStrategy styleStrategy() const;
    void setStyleHint(QFont::StyleHint, QFont::StyleStrategy strategy = QFont::PreferDefault);
    void setStyleStrategy(QFont::StyleStrategy);
    int stretch() const;
    void setStretch(int);
    bool rawMode() const;
    void setRawMode(bool);
    bool exactMatch() const;
    bool operator==(const QFont &) const;
    bool operator!=(const QFont &) const;
    bool operator<(const QFont &) const;
    bool isCopyOf(const QFont &) const;
%If (WS_WIN)
    HFONT handle() const;
%End
%If (WS_X11 || WS_MACX)
    Qt::HANDLE handle() const;
%End
    void setRawName(const QString &);
    QString rawName() const;
    QString key() const;
    QString toString() const;
    bool fromString(const QString &);
    static QString substitute(const QString &);
    static QStringList substitutes(const QString &);
    static QStringList substitutions();
    static void insertSubstitution(const QString &, const QString &);
    static void insertSubstitutions(const QString &, const QStringList &);
    static void removeSubstitution(const QString &);
    static void initialize();
    static void cleanup();
%If (WS_WIN || WS_X11 || WS_MACX)
    static void cacheStatistics();
%End
    QString defaultFamily() const;
    QString lastResortFamily() const;
    QString lastResortFont() const;
    QFont resolve(const QFont &) const;
    bool bold() const;
    void setBold(bool);
    bool italic() const;
    void setItalic(bool);
%If (Qt_4_4_0 -)

    enum Capitalization
    {
        MixedCase,
        AllUppercase,
        AllLowercase,
        SmallCaps,
        Capitalize,
    };

%End
%If (Qt_4_4_0 -)

    enum SpacingType
    {
        PercentageSpacing,
        AbsoluteSpacing,
    };

%End
%If (Qt_4_4_0 -)
    qreal letterSpacing() const;
%End
%If (Qt_4_4_0 -)
    QFont::SpacingType letterSpacingType() const;
%End
%If (Qt_4_4_0 -)
    void setLetterSpacing(QFont::SpacingType, qreal);
%End
%If (Qt_4_4_0 -)
    qreal wordSpacing() const;
%End
%If (Qt_4_4_0 -)
    void setWordSpacing(qreal);
%End
%If (Qt_4_4_0 -)
    void setCapitalization(QFont::Capitalization);
%End
%If (Qt_4_4_0 -)
    QFont::Capitalization capitalization() const;
%End
};

QDataStream &operator<<(QDataStream &, const QFont & /Constrained/);
QDataStream &operator>>(QDataStream &, QFont & /Constrained/);
