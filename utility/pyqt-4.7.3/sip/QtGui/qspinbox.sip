// qspinbox.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QSpinBox : QAbstractSpinBox
{

%TypeHeaderCode
#include <qspinbox.h>
%End

public:
    explicit QSpinBox(QWidget *parent /TransferThis/ = 0);
    int value() const;
    QString prefix() const;
    void setPrefix(const QString &);
    QString suffix() const;
    void setSuffix(const QString &);
    QString cleanText() const;
    int singleStep() const;
    void setSingleStep(int);
    int minimum() const;
    void setMinimum(int);
    int maximum() const;
    void setMaximum(int);
    void setRange(int, int);

protected:
    virtual QValidator::State validate(QString &input /In,Out/, int &pos /In,Out/) const /API=QString:2 - /;
    virtual QValidator::State validate(QString & /Constrained/, int & /In,Out/) const /API=QString: - 2/;
    virtual int valueFromText(const QString &) const;
    virtual QString textFromValue(int) const;
    virtual void fixup(QString &str /In,Out/) const /API=QString:2 - /;
    virtual void fixup(QString & /Constrained/) const /API=QString: - 2/;
    virtual bool event(QEvent *);

public slots:
    void setValue(int);

signals:
    void valueChanged(int);
    void valueChanged(const QString &);

private:
    QSpinBox(const QSpinBox &);
};

class QDoubleSpinBox : QAbstractSpinBox
{

%TypeHeaderCode
#include <qspinbox.h>
%End

public:
    explicit QDoubleSpinBox(QWidget *parent /TransferThis/ = 0);
    double value() const;
    QString prefix() const;
    void setPrefix(const QString &);
    QString suffix() const;
    void setSuffix(const QString &);
    QString cleanText() const;
    double singleStep() const;
    void setSingleStep(double);
    double minimum() const;
    void setMinimum(double);
    double maximum() const;
    void setMaximum(double);
    void setRange(double, double);
    int decimals() const;
    void setDecimals(int);
    virtual QValidator::State validate(QString &input /In,Out/, int &pos /In,Out/) const /API=QString:2 - /;
    virtual QValidator::State validate(QString & /Constrained/, int & /In,Out/) const /API=QString: - 2/;
    virtual double valueFromText(const QString &) const;
    virtual QString textFromValue(double) const;
    virtual void fixup(QString &str /In,Out/) const /API=QString:2 - /;
    virtual void fixup(QString & /Constrained/) const /API=QString: - 2/;

public slots:
    void setValue(double);

signals:
    void valueChanged(double);
    void valueChanged(const QString &);

private:
    QDoubleSpinBox(const QDoubleSpinBox &);
};
