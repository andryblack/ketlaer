// qtextlayout.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QTextInlineObject
{

%TypeHeaderCode
#include <qtextlayout.h>
%End

public:
    bool isValid() const;
    QRectF rect() const;
    qreal width() const;
    qreal ascent() const;
    qreal descent() const;
    qreal height() const;
    Qt::LayoutDirection textDirection() const;
    void setWidth(qreal);
    void setAscent(qreal);
    void setDescent(qreal);
    int textPosition() const;
    int formatIndex() const;
    QTextFormat format() const;
};

class QTextLayout
{

%TypeHeaderCode
#include <qtextlayout.h>
%End

public:
    QTextLayout();
    QTextLayout(const QString &);
    QTextLayout(const QString &, const QFont &, QPaintDevice *paintDevice = 0);
    QTextLayout(const QTextBlock &);
    ~QTextLayout();
    void setFont(const QFont &);
    QFont font() const;
    void setText(const QString &);
    QString text() const;
    void setTextOption(const QTextOption &);
    QTextOption textOption() const;
    void setPreeditArea(int, const QString &);
    int preeditAreaPosition() const;
    QString preeditAreaText() const;

    struct FormatRange
    {

%TypeHeaderCode
#include <qtextlayout.h>
%End

        int start;
        int length;
        QTextCharFormat format;
    };

    void setAdditionalFormats(const QList<QTextLayout::FormatRange> &);
    QList<QTextLayout::FormatRange> additionalFormats() const;
    void clearAdditionalFormats();
    void setCacheEnabled(bool);
    bool cacheEnabled() const;
    void beginLayout();
    void endLayout();
    QTextLine createLine();
    int lineCount() const;
    QTextLine lineAt(int) const;
    QTextLine lineForTextPosition(int) const;

    enum CursorMode
    {
        SkipCharacters,
        SkipWords,
    };

    bool isValidCursorPosition(int) const;
    int nextCursorPosition(int, QTextLayout::CursorMode mode = QTextLayout::SkipCharacters) const;
    int previousCursorPosition(int, QTextLayout::CursorMode mode = QTextLayout::SkipCharacters) const;
    void draw(QPainter *, const QPointF &, const QVector<QTextLayout::FormatRange> &selections /DocValue="list-of-QTextLayout.FormatRange"/ = QVector<QTextLayout::FormatRange>(), const QRectF &clip = QRectF()) const;
    void drawCursor(QPainter *, const QPointF &, int) const;
%If (Qt_4_2_0 -)
    void drawCursor(QPainter *, const QPointF &, int, int) const;
%End
    QPointF position() const;
    void setPosition(const QPointF &);
    QRectF boundingRect() const;
    qreal minimumWidth() const;
    qreal maximumWidth() const;
%If (Qt_4_4_0 -)
    void clearLayout();
%End

private:
    QTextLayout(const QTextLayout &);
};

class QTextLine
{

%TypeHeaderCode
#include <qtextlayout.h>
%End

public:
    QTextLine();
    bool isValid() const;
    QRectF rect() const;
    qreal x() const;
    qreal y() const;
    qreal width() const;
    qreal ascent() const;
    qreal descent() const;
    qreal height() const;
    qreal naturalTextWidth() const;
    QRectF naturalTextRect() const;

    enum Edge
    {
        Leading,
        Trailing,
    };

    enum CursorPosition
    {
        CursorBetweenCharacters,
        CursorOnCharacter,
    };

    qreal cursorToX(int * /In,Out/, QTextLine::Edge edge = QTextLine::Leading) const;
    int xToCursor(qreal, QTextLine::CursorPosition edge = QTextLine::CursorBetweenCharacters) const;
    void setLineWidth(qreal);
    void setNumColumns(int);
%If (Qt_4_3_0 -)
    void setNumColumns(int, qreal);
%End
    void setPosition(const QPointF &);
    int textStart() const;
    int textLength() const;
    int lineNumber() const;
    void draw(QPainter *, const QPointF &, const QTextLayout::FormatRange *selection = 0) const;
%If (Qt_4_2_0 -)
    QPointF position() const;
%End
%If (Qt_4_6_0 -)
    qreal leading() const;
%End
%If (Qt_4_6_0 -)
    void setLeadingIncluded(bool);
%End
%If (Qt_4_6_0 -)
    bool leadingIncluded() const;
%End
};
