// qlistview.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QListView : QAbstractItemView
{

%TypeHeaderCode
#include <qlistview.h>
%End

public:
    enum Movement
    {
        Static,
        Free,
        Snap,
    };

    enum Flow
    {
        LeftToRight,
        TopToBottom,
    };

    enum ResizeMode
    {
        Fixed,
        Adjust,
    };

    enum LayoutMode
    {
        SinglePass,
        Batched,
    };

    enum ViewMode
    {
        ListMode,
        IconMode,
    };

    explicit QListView(QWidget *parent /TransferThis/ = 0);
    virtual ~QListView();
    void setMovement(QListView::Movement);
    QListView::Movement movement() const;
    void setFlow(QListView::Flow);
    QListView::Flow flow() const;
    void setWrapping(bool);
    bool isWrapping() const;
    void setResizeMode(QListView::ResizeMode);
    QListView::ResizeMode resizeMode() const;
    void setLayoutMode(QListView::LayoutMode);
    QListView::LayoutMode layoutMode() const;
    void setSpacing(int);
    int spacing() const;
    void setGridSize(const QSize &);
    QSize gridSize() const;
    void setViewMode(QListView::ViewMode);
    QListView::ViewMode viewMode() const;
    void clearPropertyFlags();
    bool isRowHidden(int) const;
    void setRowHidden(int, bool);
    void setModelColumn(int);
    int modelColumn() const;
    void setUniformItemSizes(bool);
    bool uniformItemSizes() const;
    virtual QRect visualRect(const QModelIndex &) const;
    virtual void scrollTo(const QModelIndex &, QAbstractItemView::ScrollHint hint = QAbstractItemView::EnsureVisible);
    virtual QModelIndex indexAt(const QPoint &) const;
    virtual void doItemsLayout();
    virtual void reset();
    virtual void setRootIndex(const QModelIndex &);

signals:
%If (Qt_4_2_0 -)
    void indexesMoved(const QModelIndexList &);
%End

protected:
    virtual void scrollContentsBy(int, int);
    virtual void dataChanged(const QModelIndex &, const QModelIndex &);
    virtual void rowsInserted(const QModelIndex &, int, int);
    virtual void rowsAboutToBeRemoved(const QModelIndex &, int, int);
    virtual bool event(QEvent *);
    virtual void mouseMoveEvent(QMouseEvent *);
    virtual void mouseReleaseEvent(QMouseEvent *);
    virtual void timerEvent(QTimerEvent *);
    virtual void resizeEvent(QResizeEvent *);
    virtual void dragMoveEvent(QDragMoveEvent *);
    virtual void dragLeaveEvent(QDragLeaveEvent *);
    virtual void dropEvent(QDropEvent *);
    virtual void startDrag(Qt::DropActions);
    virtual QStyleOptionViewItem viewOptions() const;
    virtual void paintEvent(QPaintEvent *);
    virtual int horizontalOffset() const;
    virtual int verticalOffset() const;
    virtual QModelIndex moveCursor(QAbstractItemView::CursorAction, Qt::KeyboardModifiers);
    QRect rectForIndex(const QModelIndex &) const;
    void setPositionForIndex(const QPoint &, const QModelIndex &);
    virtual void setSelection(const QRect &, QFlags<QItemSelectionModel::SelectionFlag>);
    virtual QRegion visualRegionForSelection(const QItemSelection &) const;
    virtual QModelIndexList selectedIndexes() const;
    virtual void updateGeometries();
    virtual bool isIndexHidden(const QModelIndex &) const;

public:
%If (Qt_4_2_0 -)
    void setBatchSize(int);
%End
%If (Qt_4_2_0 -)
    int batchSize() const;
%End
%If (Qt_4_2_0 -)
    void setWordWrap(bool);
%End
%If (Qt_4_2_0 -)
    bool wordWrap() const;
%End
%If (Qt_4_3_0 -)
    void setSelectionRectVisible(bool);
%End
%If (Qt_4_3_0 -)
    bool isSelectionRectVisible() const;
%End

protected:
%If (Qt_4_3_0 -)
    virtual void selectionChanged(const QItemSelection &, const QItemSelection &);
%End
%If (Qt_4_3_0 -)
    virtual void currentChanged(const QModelIndex &, const QModelIndex &);
%End

private:
    QListView(const QListView &);
};
