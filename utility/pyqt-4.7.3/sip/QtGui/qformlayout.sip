// qformlayout.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)

class QFormLayout : QLayout
{

%TypeHeaderCode
#include <qformlayout.h>
%End

public:
    enum FieldGrowthPolicy
    {
        FieldsStayAtSizeHint,
        ExpandingFieldsGrow,
        AllNonFixedFieldsGrow,
    };

    enum RowWrapPolicy
    {
        DontWrapRows,
        WrapLongRows,
        WrapAllRows,
    };

    enum ItemRole
    {
        LabelRole,
        FieldRole,
%If (Qt_4_5_0 -)
        SpanningRole,
%End
    };

    explicit QFormLayout(QWidget *parent /TransferThis/ = 0);
    virtual ~QFormLayout();
    void setFieldGrowthPolicy(QFormLayout::FieldGrowthPolicy);
    QFormLayout::FieldGrowthPolicy fieldGrowthPolicy() const;
    void setRowWrapPolicy(QFormLayout::RowWrapPolicy);
    QFormLayout::RowWrapPolicy rowWrapPolicy() const;
    void setLabelAlignment(Qt::Alignment);
    Qt::Alignment labelAlignment() const;
    void setFormAlignment(Qt::Alignment);
    Qt::Alignment formAlignment() const;
    void setHorizontalSpacing(int);
    int horizontalSpacing() const;
    void setVerticalSpacing(int);
    int verticalSpacing() const;
    int spacing() const;
    void setSpacing(int);
    void addRow(QWidget * /Transfer/, QWidget * /Transfer/);
    void addRow(QWidget * /Transfer/, QLayout * /Transfer/);
    void addRow(const QString &, QWidget * /Transfer/);
    void addRow(const QString &, QLayout * /Transfer/);
    void addRow(QWidget * /Transfer/);
    void addRow(QLayout * /Transfer/);
    void insertRow(int, QWidget * /Transfer/, QWidget * /Transfer/);
    void insertRow(int, QWidget * /Transfer/, QLayout * /Transfer/);
    void insertRow(int, const QString &, QWidget * /Transfer/);
    void insertRow(int, const QString &, QLayout * /Transfer/);
    void insertRow(int, QWidget * /Transfer/);
    void insertRow(int, QLayout * /Transfer/);
    void setItem(int, QFormLayout::ItemRole, QLayoutItem * /Transfer/);
    void setWidget(int, QFormLayout::ItemRole, QWidget * /Transfer/);
    void setLayout(int, QFormLayout::ItemRole, QLayout * /Transfer/);
    QLayoutItem *itemAt(int, QFormLayout::ItemRole) const;
    void getItemPosition(int, int *, QFormLayout::ItemRole *) const;
    void getWidgetPosition(QWidget *, int *, QFormLayout::ItemRole *) const;
    void getLayoutPosition(QLayout *, int *, QFormLayout::ItemRole *) const;
    QWidget *labelForField(QWidget *) const;
    QWidget *labelForField(QLayout *) const;
    virtual void addItem(QLayoutItem * /Transfer/);
    virtual QLayoutItem *itemAt(int) const;
    virtual QLayoutItem *takeAt(int) /TransferBack/;
    virtual void setGeometry(const QRect &);
    virtual QSize minimumSize() const;
    virtual QSize sizeHint() const;
    virtual void invalidate();
    virtual bool hasHeightForWidth() const;
    virtual int heightForWidth(int) const;
    virtual Qt::Orientations expandingDirections() const;
    virtual int count() const;
    int rowCount() const;
};

%End
