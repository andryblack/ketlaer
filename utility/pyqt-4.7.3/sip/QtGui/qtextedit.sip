// qtextedit.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qtextedit.h>
%End

class QTextEdit : QAbstractScrollArea
{

%TypeHeaderCode
#include <qtextedit.h>
%End

public:
%If (Qt_4_2_0 -)

    struct ExtraSelection
    {

%TypeHeaderCode
#include <qtextedit.h>
%End

        QTextCursor cursor;
        QTextCharFormat format;
    };

%End

    enum LineWrapMode
    {
        NoWrap,
        WidgetWidth,
        FixedPixelWidth,
        FixedColumnWidth,
    };

    enum AutoFormattingFlag
    {
        AutoNone,
        AutoBulletList,
        AutoAll,
    };

    typedef QFlags<QTextEdit::AutoFormattingFlag> AutoFormatting;
%If (- Qt_4_2_0)

    enum CursorAction
    {
        MoveBackward,
        MoveForward,
        MoveWordBackward,
        MoveWordForward,
        MoveUp,
        MoveDown,
        MoveLineStart,
        MoveLineEnd,
        MoveHome,
        MoveEnd,
        MovePageUp,
        MovePageDown,
    };

%End
    explicit QTextEdit(QWidget *parent /TransferThis/ = 0);
    QTextEdit(const QString &, QWidget *parent /TransferThis/ = 0);
    virtual ~QTextEdit();
    void setDocument(QTextDocument *);
    QTextDocument *document() const;
    void setTextCursor(const QTextCursor &);
    QTextCursor textCursor() const;
    bool isReadOnly() const;
    void setReadOnly(bool);
    qreal fontPointSize() const;
    QString fontFamily() const;
    int fontWeight() const;
    bool fontUnderline() const;
    bool fontItalic() const;
    QColor textColor() const;
    QFont currentFont() const;
    Qt::Alignment alignment() const;
    void mergeCurrentCharFormat(const QTextCharFormat &);
    void setCurrentCharFormat(const QTextCharFormat &);
    QTextCharFormat currentCharFormat() const;
    QFlags<QTextEdit::AutoFormattingFlag> autoFormatting() const;
    void setAutoFormatting(QFlags<QTextEdit::AutoFormattingFlag>);
    bool tabChangesFocus() const;
    void setTabChangesFocus(bool);
    void setDocumentTitle(const QString &);
    QString documentTitle() const;
    bool isUndoRedoEnabled() const;
    void setUndoRedoEnabled(bool);
    QTextEdit::LineWrapMode lineWrapMode() const;
    void setLineWrapMode(QTextEdit::LineWrapMode);
    int lineWrapColumnOrWidth() const;
    void setLineWrapColumnOrWidth(int);
    QTextOption::WrapMode wordWrapMode() const;
    void setWordWrapMode(QTextOption::WrapMode);
    bool find(const QString &, QFlags<QTextDocument::FindFlag> options = 0);
    QString toPlainText() const;
    QString toHtml() const;
    void append(const QString &);
    void ensureCursorVisible();
    virtual QVariant loadResource(int, const QUrl &);
    QMenu *createStandardContextMenu() /Factory/;
%If (Qt_4_4_0 -)
    QMenu *createStandardContextMenu(const QPoint &) /Factory/;
%End
    QTextCursor cursorForPosition(const QPoint &) const;
    QRect cursorRect(const QTextCursor &) const;
    QRect cursorRect() const;
    QString anchorAt(const QPoint &) const;
    bool overwriteMode() const;
    void setOverwriteMode(bool);
    int tabStopWidth() const;
    void setTabStopWidth(int);
    bool acceptRichText() const;
    void setAcceptRichText(bool);
%If (Qt_4_2_0 -)
    void setTextInteractionFlags(Qt::TextInteractionFlags);
%End
%If (Qt_4_2_0 -)
    Qt::TextInteractionFlags textInteractionFlags() const;
%End
%If (Qt_4_2_0 -)
    void setCursorWidth(int);
%End
%If (Qt_4_2_0 -)
    int cursorWidth() const;
%End
%If (Qt_4_2_0 -)
    void setExtraSelections(const QList<QTextEdit::ExtraSelection> &);
%End
%If (Qt_4_2_0 -)
    QList<QTextEdit::ExtraSelection> extraSelections() const;
%End
%If (Qt_4_2_0 -)
    bool canPaste() const;
%End
%If (Qt_4_2_0 -)
    void moveCursor(QTextCursor::MoveOperation, QTextCursor::MoveMode mode = QTextCursor::MoveAnchor);
%End
%If (Qt_4_3_0 -)
%If (PyQt_Printer)
    void print(QPrinter *) const /PyName=print_/;
%End
%End
%If (Qt_4_3_0 -)
%If (Py_v3 || PyQt_Printer)
    void print(QPrinter *printer) const;
%End
%End

public slots:
    void setFontPointSize(qreal);
    void setFontFamily(const QString &);
    void setFontWeight(int);
    void setFontUnderline(bool);
    void setFontItalic(bool);
%If (Qt_4_2_0 -)
    void setText(const QString &);
%End
    void setTextColor(const QColor &);
    void setCurrentFont(const QFont &);
    void setAlignment(Qt::Alignment);
    void setPlainText(const QString &);
    void setHtml(const QString &);
    void cut();
    void copy();
    void paste();
    void clear();
    void selectAll();
    void insertPlainText(const QString &);
    void insertHtml(const QString &);
    void scrollToAnchor(const QString &);
%If (Qt_4_2_0 -)
    void redo();
%End
%If (Qt_4_2_0 -)
    void undo();
%End
    void zoomIn(int range = 1);
    void zoomOut(int range = 1);

signals:
    void textChanged();
    void undoAvailable(bool);
    void redoAvailable(bool);
    void currentCharFormatChanged(const QTextCharFormat &);
    void copyAvailable(bool);
    void selectionChanged();
    void cursorPositionChanged();

protected:
    virtual bool event(QEvent *);
    virtual void timerEvent(QTimerEvent *);
    virtual void keyPressEvent(QKeyEvent *);
%If (Qt_4_2_0 -)
    virtual void keyReleaseEvent(QKeyEvent *);
%End
    virtual void resizeEvent(QResizeEvent *);
    virtual void paintEvent(QPaintEvent *);
    virtual void mousePressEvent(QMouseEvent *);
    virtual void mouseMoveEvent(QMouseEvent *);
    virtual void mouseReleaseEvent(QMouseEvent *);
    virtual void mouseDoubleClickEvent(QMouseEvent *);
    virtual bool focusNextPrevChild(bool);
    virtual void contextMenuEvent(QContextMenuEvent *);
    virtual void dragEnterEvent(QDragEnterEvent *);
    virtual void dragLeaveEvent(QDragLeaveEvent *);
    virtual void dragMoveEvent(QDragMoveEvent *);
    virtual void dropEvent(QDropEvent *);
    virtual void focusInEvent(QFocusEvent *);
    virtual void focusOutEvent(QFocusEvent *);
    virtual void showEvent(QShowEvent *);
    virtual void changeEvent(QEvent *);
    virtual void wheelEvent(QWheelEvent *);
    virtual QMimeData *createMimeDataFromSelection() const /Factory/;
    virtual bool canInsertFromMimeData(const QMimeData *) const;
    virtual void insertFromMimeData(const QMimeData *);
    virtual void inputMethodEvent(QInputMethodEvent *);
    virtual QVariant inputMethodQuery(Qt::InputMethodQuery) const;
    virtual void scrollContentsBy(int, int);

public:
%If (Qt_4_4_0 -)
    QColor textBackgroundColor() const;
%End

public slots:
%If (Qt_4_4_0 -)
    void setTextBackgroundColor(const QColor &);
%End

private:
    QTextEdit(const QTextEdit &);
};

%If (Qt_4_2_0 -)
QFlags<QTextEdit::AutoFormattingFlag> operator|(QTextEdit::AutoFormattingFlag, QFlags<QTextEdit::AutoFormattingFlag>);
%End
