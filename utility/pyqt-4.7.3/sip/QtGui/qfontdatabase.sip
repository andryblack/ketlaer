// qfontdatabase.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QFontDatabase
{

%TypeHeaderCode
#include <qfontdatabase.h>
%End

public:
    enum WritingSystem
    {
        Any,
        Latin,
        Greek,
        Cyrillic,
        Armenian,
        Hebrew,
        Arabic,
        Syriac,
        Thaana,
        Devanagari,
        Bengali,
        Gurmukhi,
        Gujarati,
        Oriya,
        Tamil,
        Telugu,
        Kannada,
        Malayalam,
        Sinhala,
        Thai,
        Lao,
        Tibetan,
        Myanmar,
        Georgian,
        Khmer,
        SimplifiedChinese,
        TraditionalChinese,
        Japanese,
        Korean,
        Vietnamese,
        Other,
%If (Qt_4_2_0 -)
        Symbol,
%End
%If (Qt_4_2_0 -)
        Ogham,
%End
%If (Qt_4_2_0 -)
        Runic,
%End
%If (Qt_4_6_0 -)
        Nko,
%End
    };

    static QList<int> standardSizes();
    QFontDatabase();
    QList<QFontDatabase::WritingSystem> writingSystems() const;
%If (Qt_4_2_0 -)
    QList<QFontDatabase::WritingSystem> writingSystems(const QString &) const;
%End
    QStringList families(QFontDatabase::WritingSystem writingSystem = QFontDatabase::Any) const;
    QStringList styles(const QString &) const;
    QList<int> pointSizes(const QString &, const QString &style /DocValue="Py_v3:''"/ = QString());
    QList<int> smoothSizes(const QString &, const QString &);
    QString styleString(const QFont &);
    QString styleString(const QFontInfo &);
    QFont font(const QString &, const QString &, int) const;
    bool isBitmapScalable(const QString &, const QString &style /DocValue="Py_v3:''"/ = QString()) const;
    bool isSmoothlyScalable(const QString &, const QString &style /DocValue="Py_v3:''"/ = QString()) const;
    bool isScalable(const QString &, const QString &style /DocValue="Py_v3:''"/ = QString()) const;
    bool isFixedPitch(const QString &, const QString &style /DocValue="Py_v3:''"/ = QString()) const;
    bool italic(const QString &, const QString &) const;
    bool bold(const QString &, const QString &) const;
    int weight(const QString &, const QString &) const;
    static QString writingSystemName(QFontDatabase::WritingSystem);
    static QString writingSystemSample(QFontDatabase::WritingSystem);
%If (Qt_4_2_0 -)
    static int addApplicationFont(const QString &);
%End
%If (Qt_4_2_0 -)
    static int addApplicationFontFromData(const QByteArray &);
%End
%If (Qt_4_2_0 -)
    static QStringList applicationFontFamilies(int);
%End
%If (Qt_4_2_0 -)
    static bool removeApplicationFont(int);
%End
%If (Qt_4_2_0 -)
    static bool removeAllApplicationFonts();
%End
%If (Qt_4_4_0 -)
    static bool supportsThreadedFontRendering();
%End
};

// QList<QFontDatabase::WritingSystem> is implemented as a Python list.
%MappedType QList<QFontDatabase::WritingSystem> /DocType="list-of-QFontDatabase.WritingSystem"/
{
%TypeHeaderCode
#include <qfontdatabase.h>
#include <qlist.h>
%End

%ConvertFromTypeCode
    // Create the list.
    PyObject *l;

    if ((l = PyList_New(sipCpp->size())) == NULL)
        return NULL;

    // Set the list elements.
    for (int i = 0; i < sipCpp->size(); ++i)
    {
        QFontDatabase::WritingSystem ws = sipCpp->at(i);
        PyObject *wsobj;

        if ((wsobj = sipConvertFromEnum(ws, sipType_QFontDatabase_WritingSystem)) == NULL)
        {
            Py_DECREF(l);

            return NULL;
        }

        PyList_SET_ITEM(l, i, wsobj);
    }

    return l;
%End

%ConvertToTypeCode
    // Check the type if that is all that is required.
    if (sipIsErr == NULL)
    {
        if (!PyList_Check(sipPy))
            return 0;

        for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(sipPy); ++i)
            if (!PyObject_TypeCheck(PyList_GET_ITEM(sipPy, i), sipTypeAsPyTypeObject(sipType_QFontDatabase_WritingSystem)))
                return 0;

        return 1;
    }

    QList<QFontDatabase::WritingSystem> *ql = new QList<QFontDatabase::WritingSystem>;
 
    for (SIP_SSIZE_T i = 0; i < PyList_GET_SIZE(sipPy); ++i)
    {
        QFontDatabase::WritingSystem ws = (QFontDatabase::WritingSystem)SIPLong_AsLong(PyList_GET_ITEM(sipPy, i));
 
        ql->append(ws);
    }
 
    *sipCppPtr = ql;
 
    return sipGetState(sipTransferObj);
%End
};
