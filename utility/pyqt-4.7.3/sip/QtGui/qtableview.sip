// qtableview.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QTableView : QAbstractItemView
{

%TypeHeaderCode
#include <qtableview.h>
%End

public:
    explicit QTableView(QWidget *parent /TransferThis/ = 0);
    virtual ~QTableView();
    virtual void setModel(QAbstractItemModel * /KeepReference/);
    virtual void setRootIndex(const QModelIndex &);
    virtual void setSelectionModel(QItemSelectionModel * /KeepReference/);
    QHeaderView *horizontalHeader() const;
    QHeaderView *verticalHeader() const;
    void setHorizontalHeader(QHeaderView * /Transfer/);
    void setVerticalHeader(QHeaderView * /Transfer/);
    int rowViewportPosition(int) const;
    void setRowHeight(int, int);
    int rowHeight(int) const;
    int rowAt(int) const;
    int columnViewportPosition(int) const;
    void setColumnWidth(int, int);
    int columnWidth(int) const;
    int columnAt(int) const;
    bool isRowHidden(int) const;
    void setRowHidden(int, bool);
    bool isColumnHidden(int) const;
    void setColumnHidden(int, bool);
    bool showGrid() const;
    void setShowGrid(bool);
    Qt::PenStyle gridStyle() const;
    void setGridStyle(Qt::PenStyle);
    virtual QRect visualRect(const QModelIndex &) const;
    virtual void scrollTo(const QModelIndex &, QAbstractItemView::ScrollHint hint = QAbstractItemView::EnsureVisible);
    virtual QModelIndex indexAt(const QPoint &) const;

public slots:
    void selectRow(int);
    void selectColumn(int);
    void hideRow(int);
    void hideColumn(int);
    void showRow(int);
    void showColumn(int);
    void resizeRowToContents(int);
    void resizeRowsToContents();
    void resizeColumnToContents(int);
    void resizeColumnsToContents();
    void sortByColumn(int);

protected slots:
    void rowMoved(int, int, int);
    void columnMoved(int, int, int);
    void rowResized(int, int, int);
    void columnResized(int, int, int);
    void rowCountChanged(int, int);
    void columnCountChanged(int, int);

protected:
    virtual void scrollContentsBy(int, int);
    virtual QStyleOptionViewItem viewOptions() const;
    virtual void paintEvent(QPaintEvent *);
    virtual void timerEvent(QTimerEvent *);
    virtual int horizontalOffset() const;
    virtual int verticalOffset() const;
    virtual QModelIndex moveCursor(QAbstractItemView::CursorAction, Qt::KeyboardModifiers);
    virtual void setSelection(const QRect &, QFlags<QItemSelectionModel::SelectionFlag>);
    virtual QRegion visualRegionForSelection(const QItemSelection &) const;
    virtual QModelIndexList selectedIndexes() const;
    virtual void updateGeometries();
    virtual int sizeHintForRow(int) const;
    virtual int sizeHintForColumn(int) const;
    virtual void verticalScrollbarAction(int);
    virtual void horizontalScrollbarAction(int);
    virtual bool isIndexHidden(const QModelIndex &) const;

public:
%If (Qt_4_2_0 -)
    void setSortingEnabled(bool);
%End
%If (Qt_4_2_0 -)
    bool isSortingEnabled() const;
%End
%If (Qt_4_2_0 -)
    void setSpan(int, int, int, int);
%End
%If (Qt_4_2_0 -)
    int rowSpan(int, int) const;
%End
%If (Qt_4_2_0 -)
    int columnSpan(int, int) const;
%End
%If (Qt_4_2_0 -)
    void sortByColumn(int, Qt::SortOrder);
%End
%If (Qt_4_3_0 -)
    void setWordWrap(bool);
%End
%If (Qt_4_3_0 -)
    bool wordWrap() const;
%End
%If (Qt_4_3_0 -)
    void setCornerButtonEnabled(bool);
%End
%If (Qt_4_3_0 -)
    bool isCornerButtonEnabled() const;
%End
%If (Qt_4_4_0 -)
    void clearSpans();
%End

protected:
%If (Qt_4_3_0 -)
    virtual void selectionChanged(const QItemSelection &, const QItemSelection &);
%End
%If (Qt_4_3_0 -)
    virtual void currentChanged(const QModelIndex &, const QModelIndex &);
%End

private:
    QTableView(const QTableView &);
};
