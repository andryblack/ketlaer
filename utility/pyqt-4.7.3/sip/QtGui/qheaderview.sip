// qheaderview.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QHeaderView : QAbstractItemView
{

%TypeHeaderCode
#include <qheaderview.h>
%End

public:
    enum ResizeMode
    {
        Interactive,
%If (Qt_4_2_0 -)
        Fixed,
%End
        Stretch,
%If (Qt_4_2_0 -)
        ResizeToContents,
%End
        Custom,
    };

    QHeaderView(Qt::Orientation, QWidget *parent /TransferThis/ = 0);
    virtual ~QHeaderView();
    virtual void setModel(QAbstractItemModel * /KeepReference/);
    Qt::Orientation orientation() const;
    int offset() const;
    int length() const;
    virtual QSize sizeHint() const;
    int sectionSizeHint(int) const;
    int visualIndexAt(int) const;
    int logicalIndexAt(int) const;
    int sectionSize(int) const;
    int sectionPosition(int) const;
    int sectionViewportPosition(int) const;
    void moveSection(int, int);
    void resizeSection(int, int);
    bool isSectionHidden(int) const;
    void setSectionHidden(int, bool);
    int count() const;
    int visualIndex(int) const;
    int logicalIndex(int) const;
    void setMovable(bool);
    bool isMovable() const;
    void setClickable(bool);
    bool isClickable() const;
    void setHighlightSections(bool);
    bool highlightSections() const;
    void setResizeMode(QHeaderView::ResizeMode);
    void setResizeMode(int, QHeaderView::ResizeMode);
    QHeaderView::ResizeMode resizeMode(int) const;
    int stretchSectionCount() const;
    void setSortIndicatorShown(bool);
    bool isSortIndicatorShown() const;
    void setSortIndicator(int, Qt::SortOrder);
    int sortIndicatorSection() const;
    Qt::SortOrder sortIndicatorOrder() const;
    bool stretchLastSection() const;
    void setStretchLastSection(bool);
    virtual void doItemsLayout();
    bool sectionsMoved() const;

public slots:
    void setOffset(int);
    void headerDataChanged(Qt::Orientation, int, int);
%If (Qt_4_2_0 -)
    void setOffsetToSectionPosition(int);
%End

signals:
%If (Qt_4_2_0 -)
    void geometriesChanged();
%End
    void sectionMoved(int, int, int);
    void sectionResized(int, int, int);
    void sectionPressed(int);
    void sectionClicked(int);
    void sectionDoubleClicked(int);
    void sectionCountChanged(int, int);
    void sectionHandleDoubleClicked(int);
    void sectionAutoResize(int, QHeaderView::ResizeMode);

protected slots:
    void updateSection(int);
    void resizeSections();
    void sectionsInserted(const QModelIndex &, int, int);
    void sectionsAboutToBeRemoved(const QModelIndex &, int, int);

protected:
    void initialize();
    void initializeSections();
    void initializeSections(int, int);
    virtual void currentChanged(const QModelIndex &, const QModelIndex &);
    virtual bool event(QEvent *);
    virtual bool viewportEvent(QEvent *);
    virtual void paintEvent(QPaintEvent *);
    virtual void mousePressEvent(QMouseEvent *);
    virtual void mouseMoveEvent(QMouseEvent *);
    virtual void mouseReleaseEvent(QMouseEvent *);
    virtual void mouseDoubleClickEvent(QMouseEvent *);
    virtual void paintSection(QPainter *, const QRect &, int) const;
    virtual QSize sectionSizeFromContents(int) const;
    virtual int horizontalOffset() const;
    virtual int verticalOffset() const;
    virtual void updateGeometries();
    virtual void scrollContentsBy(int, int);
    virtual void dataChanged(const QModelIndex &, const QModelIndex &);
    virtual void rowsInserted(const QModelIndex &, int, int);
    virtual QRect visualRect(const QModelIndex &) const;
    virtual void scrollTo(const QModelIndex &, QAbstractItemView::ScrollHint);
    virtual QModelIndex indexAt(const QPoint &) const;
    virtual bool isIndexHidden(const QModelIndex &) const;
    virtual QModelIndex moveCursor(QAbstractItemView::CursorAction, Qt::KeyboardModifiers);
    virtual void setSelection(const QRect &, QFlags<QItemSelectionModel::SelectionFlag>);
    virtual QRegion visualRegionForSelection(const QItemSelection &) const;

public:
    int logicalIndexAt(int, int) const;
    int logicalIndexAt(const QPoint &) const;
    void hideSection(int);
    void showSection(int);
    void resizeSections(QHeaderView::ResizeMode);
    int hiddenSectionCount() const;
    int defaultSectionSize() const;
    void setDefaultSectionSize(int);
    Qt::Alignment defaultAlignment() const;
    void setDefaultAlignment(Qt::Alignment);
    bool sectionsHidden() const;
%If (Qt_4_2_0 -)
    void swapSections(int, int);
%End
%If (Qt_4_2_0 -)
    bool cascadingSectionResizes() const;
%End
%If (Qt_4_2_0 -)
    void setCascadingSectionResizes(bool);
%End
%If (Qt_4_2_0 -)
    int minimumSectionSize() const;
%End
%If (Qt_4_2_0 -)
    void setMinimumSectionSize(int);
%End
%If (Qt_4_3_0 -)
    QByteArray saveState() const;
%End
%If (Qt_4_3_0 -)
    bool restoreState(const QByteArray &);
%End
%If (Qt_4_3_0 -)
    virtual void reset();
%End

public slots:
%If (Qt_4_3_0 -)
    void setOffsetToLastSection();
%End

signals:
%If (Qt_4_3_0 -)
    void sectionEntered(int);
%End
%If (Qt_4_3_0 -)
    void sortIndicatorChanged(int, Qt::SortOrder);
%End

protected:
%If (Qt_4_3_0 -)
    void initStyleOption(QStyleOptionHeader *) const;
%End

private:
    QHeaderView(const QHeaderView &);
};
