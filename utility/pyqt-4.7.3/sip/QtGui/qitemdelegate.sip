// qitemdelegate.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtGui Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QItemDelegate : QAbstractItemDelegate
{

%TypeHeaderCode
#include <qitemdelegate.h>
%End

public:
    explicit QItemDelegate(QObject *parent /TransferThis/ = 0);
    virtual ~QItemDelegate();
    virtual void paint(QPainter *, const QStyleOptionViewItem &, const QModelIndex &) const;
    virtual QSize sizeHint(const QStyleOptionViewItem &, const QModelIndex &) const;
    virtual QWidget *createEditor(QWidget * /TransferThis/, const QStyleOptionViewItem &, const QModelIndex &) const /Factory/;
    virtual void setEditorData(QWidget *, const QModelIndex &) const;
    virtual void setModelData(QWidget *, QAbstractItemModel * /KeepReference/, const QModelIndex &) const;
    virtual void updateEditorGeometry(QWidget *, const QStyleOptionViewItem &, const QModelIndex &) const;
    QItemEditorFactory *itemEditorFactory() const;
    void setItemEditorFactory(QItemEditorFactory * /KeepReference/);
%If (Qt_4_2_0 -)
    bool hasClipping() const;
%End
%If (Qt_4_2_0 -)
    void setClipping(bool);
%End

protected:
%If (Qt_4_2_0 -)
    void drawBackground(QPainter *, const QStyleOptionViewItem &, const QModelIndex &) const;
%End
    virtual void drawCheck(QPainter *, const QStyleOptionViewItem &, const QRect &, Qt::CheckState) const;
    virtual void drawDecoration(QPainter *, const QStyleOptionViewItem &, const QRect &, const QPixmap &) const;
    virtual void drawDisplay(QPainter *, const QStyleOptionViewItem &, const QRect &, const QString &) const;
    virtual void drawFocus(QPainter *, const QStyleOptionViewItem &, const QRect &) const;
    virtual bool eventFilter(QObject *, QEvent *);
    virtual bool editorEvent(QEvent *, QAbstractItemModel *, const QStyleOptionViewItem &, const QModelIndex &);

private:
    QItemDelegate(const QItemDelegate &);
};
