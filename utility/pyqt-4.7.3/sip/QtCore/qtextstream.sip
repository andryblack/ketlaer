// qtextstream.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qtextstream.h>
%End

class QTextStream
{

%TypeHeaderCode
#include <qtextstream.h>
%End

public:
    enum RealNumberNotation
    {
        SmartNotation,
        FixedNotation,
        ScientificNotation,
    };

    enum FieldAlignment
    {
        AlignLeft,
        AlignRight,
        AlignCenter,
        AlignAccountingStyle,
    };

    enum NumberFlag
    {
        ShowBase,
        ForcePoint,
        ForceSign,
        UppercaseBase,
        UppercaseDigits,
    };

    enum Status
    {
        Ok,
        ReadPastEnd,
        ReadCorruptData,
    };

    typedef QFlags<QTextStream::NumberFlag> NumberFlags;
    QTextStream();
    explicit QTextStream(QIODevice *);
    QTextStream(QString * /Constrained/, QFlags<QIODevice::OpenModeFlag> mode = QIODevice::ReadWrite) /API=QString: - 2/;
    QTextStream(QByteArray * /Constrained/, QFlags<QIODevice::OpenModeFlag> mode = QIODevice::ReadWrite);
    virtual ~QTextStream();
    void setCodec(QTextCodec *);
    void setCodec(const char *);
    QTextCodec *codec() const;
    void setAutoDetectUnicode(bool);
    bool autoDetectUnicode() const;
    void setGenerateByteOrderMark(bool);
    bool generateByteOrderMark() const;
    void setDevice(QIODevice *);
    QIODevice *device() const;
    void setString(QString * /Constrained/, QFlags<QIODevice::OpenModeFlag> mode = QIODevice::ReadWrite) /API=QString: - 2/;
    QString *string() const /API=QString: - 2/;
    bool atEnd() const;
    void reset();
    void flush() /ReleaseGIL/;
    bool seek(qint64);
    void skipWhiteSpace();
    QString read(qint64) /ReleaseGIL/;
    QString readLine(qint64 maxLength = 0) /ReleaseGIL/;
    QString readAll() /ReleaseGIL/;
    void setFieldAlignment(QTextStream::FieldAlignment);
    QTextStream::FieldAlignment fieldAlignment() const;
    void setPadChar(QChar);
    QChar padChar() const;
    void setFieldWidth(int);
    int fieldWidth() const;
    void setNumberFlags(QFlags<QTextStream::NumberFlag>);
    QFlags<QTextStream::NumberFlag> numberFlags() const;
    void setIntegerBase(int);
    int integerBase() const;
    void setRealNumberNotation(QTextStream::RealNumberNotation);
    QTextStream::RealNumberNotation realNumberNotation() const;
    void setRealNumberPrecision(int);
    int realNumberPrecision() const;
    QTextStream::Status status() const;
    void setStatus(QTextStream::Status);
    void resetStatus();
%If (Qt_4_2_0 -)
    qint64 pos() const;
%End
    QTextStream &operator>>(QChar & /Constrained/) /API=QString: - 2/;
    QTextStream &operator>>(QString & /Constrained/) /API=QString: - 2/;
    QTextStream &operator>>(QByteArray & /Constrained/);
    QTextStream &operator<<(double /Constrained/);
    QTextStream &operator<<(bool /Constrained/) [QTextStream & (QBool b /Constrained/)];
    QTextStream &operator<<(int /Constrained/);
    QTextStream &operator<<(qlonglong);
    QTextStream &operator<<(qulonglong);
    QTextStream &operator<<(const QString &);
    QTextStream &operator<<(const QByteArray &);
%If (Qt_4_5_0 -)
    void setLocale(const QLocale &);
%End
%If (Qt_4_5_0 -)
    QLocale locale() const;
%End

private:
    QTextStream(const QTextStream &);
};

QFlags<QTextStream::NumberFlag> operator|(QTextStream::NumberFlag, QFlags<QTextStream::NumberFlag>);
class QTextStreamManipulator;
QTextStream &operator<<(QTextStream &, QTextStreamManipulator);
QTextStream &bin(QTextStream &) /API=QTextStream: - 2/;
QTextStream &bin(QTextStream &s) /API=QTextStream:2 - , PyName=bin_/;
QTextStream &oct(QTextStream &) /API=QTextStream: - 2/;
QTextStream &oct(QTextStream &s) /API=QTextStream:2 - , PyName=oct_/;
QTextStream &dec(QTextStream &);
QTextStream &hex(QTextStream &) /API=QTextStream: - 2/;
QTextStream &hex(QTextStream &s) /API=QTextStream:2 - , PyName=hex_/;
QTextStream &showbase(QTextStream &);
QTextStream &forcesign(QTextStream &);
QTextStream &forcepoint(QTextStream &);
QTextStream &noshowbase(QTextStream &);
QTextStream &noforcesign(QTextStream &);
QTextStream &noforcepoint(QTextStream &);
QTextStream &uppercasebase(QTextStream &);
QTextStream &uppercasedigits(QTextStream &);
QTextStream &lowercasebase(QTextStream &);
QTextStream &lowercasedigits(QTextStream &);
QTextStream &fixed(QTextStream &);
QTextStream &scientific(QTextStream &);
QTextStream &left(QTextStream &);
QTextStream &right(QTextStream &);
QTextStream &center(QTextStream &);
QTextStream &endl(QTextStream &);
QTextStream &flush(QTextStream &);
QTextStream &reset(QTextStream &);
QTextStream &bom(QTextStream &);
QTextStream &ws(QTextStream &);
QTextStreamManipulator qSetFieldWidth(int);
QTextStreamManipulator qSetPadChar(QChar);
QTextStreamManipulator qSetRealNumberPrecision(int);
