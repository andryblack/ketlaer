// qsize.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qsize.h>
%End

class QSize
{

%TypeHeaderCode
#include <qsize.h>
%End

%PickleCode
    sipRes = Py_BuildValue((char *)"ii", sipCpp->width(), sipCpp->height());
%End

public:
    void transpose();
    void scale(const QSize &, Qt::AspectRatioMode);
    QSize();
    QSize(int, int);
    SIP_PYOBJECT __repr__() const /DocType="str"/;
%MethodCode
        sipRes =
        #if PY_MAJOR_VERSION >= 3
            PyUnicode_FromFormat
        #else
            PyString_FromFormat
        #endif
                ("PyQt4.QtCore.QSize(%i, %i)", sipCpp->width(),
                 sipCpp->height());
%End

    bool isNull() const;
    bool isEmpty() const;
    bool isValid() const;
    int __bool__() const;
%MethodCode
        sipRes = sipCpp->isValid();
%End

    int width() const;
    int height() const;
    void setWidth(int);
    void setHeight(int);
    void scale(int, int, Qt::AspectRatioMode);
    QSize &operator+=(const QSize &);
    QSize &operator-=(const QSize &);
    QSize &operator*=(qreal);
    QSize &operator/=(qreal);
    QSize expandedTo(const QSize &) const;
    QSize boundedTo(const QSize &) const;
};

QDataStream &operator<<(QDataStream &, const QSize & /Constrained/);
QDataStream &operator>>(QDataStream &, QSize & /Constrained/);
bool operator==(const QSize &, const QSize &);
bool operator!=(const QSize &, const QSize &);
const QSize operator+(const QSize &, const QSize &);
const QSize operator-(const QSize &, const QSize &);
const QSize operator*(const QSize &, qreal);
const QSize operator*(qreal, const QSize &);
const QSize operator/(const QSize &, qreal);

class QSizeF
{

%TypeHeaderCode
#include <qsize.h>
%End

%PickleCode
    sipRes = Py_BuildValue((char *)"dd", sipCpp->width(), sipCpp->height());
%End

public:
    void transpose();
    void scale(const QSizeF &, Qt::AspectRatioMode);
    QSizeF();
    QSizeF(const QSize &);
    QSizeF(qreal, qreal);
    SIP_PYOBJECT __repr__() const /DocType="str"/;
%MethodCode
        PyObject *w = PyFloat_FromDouble(sipCpp->width());
        PyObject *h = PyFloat_FromDouble(sipCpp->height());
        
        if (w && h)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt4.QtCore.QSizeF(%R, %R)", w, h);
        #else
            sipRes = PyString_FromString("PyQt4.QtCore.QSizeF(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(w));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(h));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        }
        
        Py_XDECREF(w);
        Py_XDECREF(h);
%End

    bool isNull() const;
    bool isEmpty() const;
    bool isValid() const;
    int __bool__() const;
%MethodCode
        sipRes = sipCpp->isValid();
%End

    qreal width() const;
    qreal height() const;
    void setWidth(qreal);
    void setHeight(qreal);
    void scale(qreal, qreal, Qt::AspectRatioMode);
    QSizeF &operator+=(const QSizeF &);
    QSizeF &operator-=(const QSizeF &);
    QSizeF &operator*=(qreal);
    QSizeF &operator/=(qreal);
    QSizeF expandedTo(const QSizeF &) const;
    QSizeF boundedTo(const QSizeF &) const;
    QSize toSize() const;
};

QDataStream &operator<<(QDataStream &, const QSizeF & /Constrained/);
QDataStream &operator>>(QDataStream &, QSizeF & /Constrained/);
bool operator==(const QSizeF &, const QSizeF &);
bool operator!=(const QSizeF &, const QSizeF &);
const QSizeF operator+(const QSizeF &, const QSizeF &);
const QSizeF operator-(const QSizeF &, const QSizeF &);
const QSizeF operator*(const QSizeF &, qreal);
const QSizeF operator*(qreal, const QSizeF &);
const QSizeF operator/(const QSizeF &, qreal);
