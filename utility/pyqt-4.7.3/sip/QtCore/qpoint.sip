// qpoint.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qpoint.h>
%End

class QPoint
{

%TypeHeaderCode
#include <qpoint.h>
%End

%PickleCode
    sipRes = Py_BuildValue((char *)"ii", sipCpp->x(), sipCpp->y());
%End

public:
    int manhattanLength() const;
    QPoint();
    QPoint(int, int);
    SIP_PYOBJECT __repr__() const /DocType="str"/;
%MethodCode
        sipRes =
        #if PY_MAJOR_VERSION >= 3
            PyUnicode_FromFormat
        #else
            PyString_FromFormat
        #endif
                ("PyQt4.QtCore.QPoint(%i, %i)", sipCpp->x(),
                 sipCpp->y());
%End

    bool isNull() const;
    int __bool__() const;
%MethodCode
        sipRes = !sipCpp->isNull();
%End

    int x() const;
    int y() const;
    void setX(int);
    void setY(int);
    QPoint &operator+=(const QPoint &);
    QPoint &operator-=(const QPoint &);
    QPoint &operator*=(qreal);
    QPoint &operator/=(qreal);
};

QDataStream &operator<<(QDataStream &, const QPoint & /Constrained/);
QDataStream &operator>>(QDataStream &, QPoint & /Constrained/);
bool operator==(const QPoint &, const QPoint &);
bool operator!=(const QPoint &, const QPoint &);
const QPoint operator+(const QPoint &, const QPoint &);
const QPoint operator-(const QPoint &, const QPoint &);
const QPoint operator*(const QPoint &, qreal);
const QPoint operator-(const QPoint &);
const QPoint operator/(const QPoint &, qreal);

class QPointF
{

%TypeHeaderCode
#include <qpoint.h>
%End

%PickleCode
    sipRes = Py_BuildValue((char *)"dd", sipCpp->x(), sipCpp->y());
%End

public:
    QPointF();
    QPointF(qreal, qreal);
    QPointF(const QPoint &);
    SIP_PYOBJECT __repr__() const /DocType="str"/;
%MethodCode
        PyObject *x = PyFloat_FromDouble(sipCpp->x());
        PyObject *y = PyFloat_FromDouble(sipCpp->y());
        
        if (x && y)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt4.QtCore.QPointF(%R, %R)", x, y);
        #else
            sipRes = PyString_FromString("PyQt4.QtCore.QPointF(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(x));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(y));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        }
        
        Py_XDECREF(x);
        Py_XDECREF(y);
%End

    bool isNull() const;
    int __bool__() const;
%MethodCode
        sipRes = !sipCpp->isNull();
%End

    qreal x() const;
    qreal y() const;
    void setX(qreal);
    void setY(qreal);
    QPointF &operator+=(const QPointF &);
    QPointF &operator-=(const QPointF &);
    QPointF &operator*=(qreal);
    QPointF &operator/=(qreal);
    QPoint toPoint() const;
%If (Qt_4_6_0 -)
    qreal manhattanLength() const;
%End
};

QDataStream &operator<<(QDataStream &, const QPointF & /Constrained/);
QDataStream &operator>>(QDataStream &, QPointF & /Constrained/);
bool operator==(const QPointF &, const QPointF &);
bool operator!=(const QPointF &, const QPointF &);
const QPointF operator+(const QPointF &, const QPointF &);
const QPointF operator-(const QPointF &, const QPointF &);
const QPointF operator*(const QPointF &, qreal);
const QPointF operator-(const QPointF &);
const QPointF operator/(const QPointF &, qreal);
