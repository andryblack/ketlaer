// qline.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%ModuleCode
#include <qline.h>
%End

class QLine
{

%TypeHeaderCode
#include <qline.h>
%End

%PickleCode
    sipRes = Py_BuildValue((char *)"iiii", sipCpp->x1(), sipCpp->y1(), sipCpp->x2(), sipCpp->y2());
%End

public:
    bool operator!=(const QLine &) const;
    QLine();
    QLine(const QPoint &, const QPoint &);
    QLine(int, int, int, int);
    SIP_PYOBJECT __repr__() const /DocType="str"/;
%MethodCode
        sipRes =
        #if PY_MAJOR_VERSION >= 3
            PyUnicode_FromFormat
        #else
            PyString_FromFormat
        #endif
                ("PyQt4.QtCore.QLine(%i, %i, %i, %i)",
                 sipCpp->x1(), sipCpp->y1(), sipCpp->x2(), sipCpp->y2());
%End

    bool isNull() const;
    int __bool__() const;
%MethodCode
        sipRes = !sipCpp->isNull();
%End

    int x1() const;
    int y1() const;
    int x2() const;
    int y2() const;
    QPoint p1() const;
    QPoint p2() const;
    int dx() const;
    int dy() const;
    void translate(const QPoint &);
    void translate(int, int);
    bool operator==(const QLine &) const;
%If (Qt_4_4_0 -)
    QLine translated(const QPoint &) const;
%End
%If (Qt_4_4_0 -)
    QLine translated(int, int) const;
%End
%If (Qt_4_4_0 -)
    void setP1(const QPoint &);
%End
%If (Qt_4_4_0 -)
    void setP2(const QPoint &);
%End
%If (Qt_4_4_0 -)
    void setPoints(const QPoint &, const QPoint &);
%End
%If (Qt_4_4_0 -)
    void setLine(int, int, int, int);
%End
};

QDataStream &operator<<(QDataStream &, const QLine & /Constrained/);
QDataStream &operator>>(QDataStream &, QLine & /Constrained/);

class QLineF
{

%TypeHeaderCode
#include <qline.h>
%End

%PickleCode
    sipRes = Py_BuildValue((char *)"dddd", sipCpp->x1(), sipCpp->y1(), sipCpp->x2(), sipCpp->y2());
%End

public:
    enum IntersectType
    {
        NoIntersection,
        BoundedIntersection,
        UnboundedIntersection,
    };

    QLineF(const QLine &);
    bool isNull() const;
    int __bool__() const;
%MethodCode
        sipRes = !sipCpp->isNull();
%End

    qreal length() const;
    QLineF unitVector() const;
    QLineF::IntersectType intersect(const QLineF &, QPointF *) const;
    qreal angle(const QLineF &) const;
    bool operator!=(const QLineF &) const;
    QLineF();
    QLineF(const QPointF &, const QPointF &);
    QLineF(qreal, qreal, qreal, qreal);
    SIP_PYOBJECT __repr__() const /DocType="str"/;
%MethodCode
        PyObject *x1 = PyFloat_FromDouble(sipCpp->x1());
        PyObject *y1 = PyFloat_FromDouble(sipCpp->y1());
        PyObject *x2 = PyFloat_FromDouble(sipCpp->x2());
        PyObject *y2 = PyFloat_FromDouble(sipCpp->y2());
        
        if (x1 && y1 && x2 && y2)
        {
        #if PY_MAJOR_VERSION >= 3
            sipRes = PyUnicode_FromFormat("PyQt4.QtCore.QLineF(%R, %R, %R, %R)", x1, y1, x2, y2);
        #else
            sipRes = PyString_FromString("PyQt4.QtCore.QLineF(");
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(x1));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(y1));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(x2));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(", "));
            PyString_ConcatAndDel(&sipRes, PyObject_Repr(y2));
            PyString_ConcatAndDel(&sipRes, PyString_FromString(")"));
        #endif
        }
        
        Py_XDECREF(x1);
        Py_XDECREF(y1);
        Py_XDECREF(x2);
        Py_XDECREF(y2);
%End

    qreal x1() const;
    qreal y1() const;
    qreal x2() const;
    qreal y2() const;
    QPointF p1() const;
    QPointF p2() const;
    qreal dx() const;
    qreal dy() const;
    QLineF normalVector() const;
    void translate(const QPointF &);
    void translate(qreal, qreal);
    void setLength(qreal);
    QPointF pointAt(qreal) const;
    QLine toLine() const;
    bool operator==(const QLineF &) const;
%If (Qt_4_4_0 -)
    static QLineF fromPolar(qreal, qreal);
%End
%If (Qt_4_4_0 -)
    qreal angle() const;
%End
%If (Qt_4_4_0 -)
    void setAngle(qreal);
%End
%If (Qt_4_4_0 -)
    qreal angleTo(const QLineF &) const;
%End
%If (Qt_4_4_0 -)
    QLineF translated(const QPointF &) const;
%End
%If (Qt_4_4_0 -)
    QLineF translated(qreal, qreal) const;
%End
%If (Qt_4_4_0 -)
    void setP1(const QPointF &);
%End
%If (Qt_4_4_0 -)
    void setP2(const QPointF &);
%End
%If (Qt_4_4_0 -)
    void setPoints(const QPointF &, const QPointF &);
%End
%If (Qt_4_4_0 -)
    void setLine(qreal, qreal, qreal, qreal);
%End
};

QDataStream &operator<<(QDataStream &, const QLineF & /Constrained/);
QDataStream &operator>>(QDataStream &, QLineF & /Constrained/);
