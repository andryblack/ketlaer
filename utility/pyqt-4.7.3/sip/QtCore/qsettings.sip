// qsettings.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtCore Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QSettings : QObject
{

%TypeHeaderCode
#include <qsettings.h>
%End

public:
    enum Status
    {
        NoError,
        AccessError,
        FormatError,
    };

    enum Format
    {
        NativeFormat,
        IniFormat,
        InvalidFormat,
    };

    enum Scope
    {
        UserScope,
        SystemScope,
    };

    QSettings(const QString &, const QString &application /DocValue="Py_v3:''"/ = QString(), QObject *parent /TransferThis/ = 0);
    QSettings(QSettings::Scope, const QString &, const QString &application /DocValue="Py_v3:''"/ = QString(), QObject *parent /TransferThis/ = 0);
    QSettings(QSettings::Format, QSettings::Scope, const QString &, const QString &application /DocValue="Py_v3:''"/ = QString(), QObject *parent /TransferThis/ = 0);
    QSettings(const QString &, QSettings::Format, QObject *parent /TransferThis/ = 0);
    explicit QSettings(QObject *parent /TransferThis/ = 0);
    virtual ~QSettings();
    void clear();
    void sync();
    QSettings::Status status() const;
    void beginGroup(const QString &);
    void endGroup();
    QString group() const;
    int beginReadArray(const QString &);
    void beginWriteArray(const QString &, int size = -1);
    void endArray();
    void setArrayIndex(int);
    QStringList allKeys() const;
    QStringList childKeys() const;
    QStringList childGroups() const;
    bool isWritable() const;
    void setValue(const QString &, const QVariant &);
    QVariant value(const QString &, const QVariant &defaultValue /DocValue="Py_v3:None"/ = QVariant()) const;
    void remove(const QString &);
    bool contains(const QString &) const;
    void setFallbacksEnabled(bool);
    bool fallbacksEnabled() const;
    QString fileName() const;
    static void setSystemIniPath(const QString &);
    static void setUserIniPath(const QString &);
    static void setPath(QSettings::Format, QSettings::Scope, const QString &);
%If (Qt_4_4_0 -)
    QSettings::Format format() const;
%End
%If (Qt_4_4_0 -)
    QSettings::Scope scope() const;
%End
%If (Qt_4_4_0 -)
    QString organizationName() const;
%End
%If (Qt_4_4_0 -)
    QString applicationName() const;
%End
%If (Qt_4_4_0 -)
    static void setDefaultFormat(QSettings::Format);
%End
%If (Qt_4_4_0 -)
    static QSettings::Format defaultFormat();
%End
%If (Qt_4_5_0 -)
    void setIniCodec(QTextCodec *);
%End
%If (Qt_4_5_0 -)
    void setIniCodec(const char *);
%End
%If (Qt_4_5_0 -)
    QTextCodec *iniCodec() const;
%End

protected:
    virtual bool event(QEvent *);

private:
    QSettings(const QSettings &);
};
