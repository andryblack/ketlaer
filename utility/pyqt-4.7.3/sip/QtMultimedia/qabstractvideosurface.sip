// qabstractvideosurface.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtMultimedia Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_6_0 -)

class QAbstractVideoSurface : QObject
{

%TypeHeaderCode
#include <qabstractvideosurface.h>
%End

public:
    enum Error
    {
        NoError,
        UnsupportedFormatError,
        IncorrectFormatError,
        StoppedError,
        ResourceError,
    };

    explicit QAbstractVideoSurface(QObject *parent /TransferThis/ = 0);
    virtual ~QAbstractVideoSurface();
    virtual QList<QVideoFrame::PixelFormat> supportedPixelFormats(QAbstractVideoBuffer::HandleType type = QAbstractVideoBuffer::NoHandle) const = 0;
    virtual bool isFormatSupported(const QVideoSurfaceFormat &) const;
    virtual QVideoSurfaceFormat nearestFormat(const QVideoSurfaceFormat &) const;
    QVideoSurfaceFormat surfaceFormat() const;
    virtual bool start(const QVideoSurfaceFormat &);
    virtual void stop();
    bool isActive() const;
    virtual bool present(const QVideoFrame &) = 0;
    QAbstractVideoSurface::Error error() const;

signals:
    void activeChanged(bool);
    void surfaceFormatChanged(const QVideoSurfaceFormat &);
    void supportedFormatsChanged();

protected:
    void setError(QAbstractVideoSurface::Error);
};

%End
