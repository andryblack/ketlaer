// qscriptengine.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtScript Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_3_0 -)
%ModuleCode
#include <qscriptengine.h>
%End
%End

%If (Qt_4_3_0 -)

class QScriptEngine : QObject
{

%TypeHeaderCode
#include <qscriptengine.h>
%End

%TypeCode
#if QT_VERSION >= 0x040400

// Save a Python callable in a QScriptValue so that it can be retrieved later
// by the handler.
static void qtscript_func_wrapper(QScriptEngine *eng, QScriptValue *qsv, PyObject *py)
{
    QString addr = QString::number((qulonglong)py);
    qsv->setData(QScriptValue(eng, addr));

    // Make sure that the callable isn't garbage collected.  This shouldn't be
    // a problem as we wouldn't normally be called in a loop.
    Py_INCREF(py);
}


// Invoke the saved Python callable on behalf of C++.
static QScriptValue qtscript_func_handler(QScriptContext *context, QScriptEngine *eng)
{
    QScriptValue qsv;

    QString addr = context->callee().data().toString();
    PyObject *py = (PyObject *)addr.toULongLong();

    SIP_BLOCK_THREADS

    PyObject *res_obj = sipCallMethod(0, py, "DD", context, sipType_QScriptContext, NULL, eng, sipType_QScriptEngine, NULL);

    if (!res_obj)
        PyErr_Print();
    else
    {
        QScriptValue *res;

        if (sipParseResult(0, py, res_obj, "D5", sipType_QScriptValue, &res) < 0)
            PyErr_Print();
        else
            qsv = *res;
    }

    Py_XDECREF(res_obj);

    SIP_UNBLOCK_THREADS

    return qsv;
}

#endif
%End

%ConvertToSubClassCode
    sipType = (sipCpp->inherits(sipName_QScriptEngine) ? sipType_QScriptEngine : 0);
%End

public:
    enum ValueOwnership
    {
        QtOwnership,
        ScriptOwnership,
        AutoOwnership,
    };

    enum QObjectWrapOption
    {
        ExcludeChildObjects,
        ExcludeSuperClassMethods,
        ExcludeSuperClassProperties,
        AutoCreateDynamicProperties,
%If (Qt_4_4_0 -)
        SkipMethodsInEnumeration,
%End
%If (Qt_4_4_0 -)
        PreferExistingWrapperObject,
%End
%If (Qt_4_5_0 -)
        ExcludeSuperClassContents,
%End
%If (Qt_4_5_0 -)
        ExcludeDeleteLater,
%End
    };

    typedef QFlags<QScriptEngine::QObjectWrapOption> QObjectWrapOptions;
    QScriptEngine();
    explicit QScriptEngine(QObject * /TransferThis/);
    virtual ~QScriptEngine();
    QScriptValue globalObject() const;
    QScriptContext *currentContext() const;
    QScriptContext *pushContext();
    void popContext();
    bool canEvaluate(const QString &) const;
    QScriptValue evaluate(const QString &, const QString &fileName /DocValue="Py_v3:''"/ = QString(), int lineNumber = 1);
    bool hasUncaughtException() const;
    QStringList uncaughtExceptionBacktrace() const;
    QScriptValue uncaughtException() const;
    int uncaughtExceptionLineNumber() const;
    QScriptValue nullValue();
    QScriptValue undefinedValue();
%If (Qt_4_4_0 -)
    QScriptValue newFunction(SIP_PYCALLABLE, int length = 0);
%MethodCode
        // This is implemented for Qt v4.4 and later because we rely on the
        // QScriptValue::setData() support.
        
        Py_BEGIN_ALLOW_THREADS
        sipRes = new QScriptValue(sipCpp->newFunction(qtscript_func_handler, a1));
        Py_END_ALLOW_THREADS
        
        qtscript_func_wrapper(sipCpp, sipRes, a0);
%End

%End
%If (Qt_4_4_0 -)
    QScriptValue newFunction(SIP_PYCALLABLE, const QScriptValue &, int length = 0);
%MethodCode
        // This is implemented for Qt v4.4 and later because we rely on the
        // QScriptValue::setData() support.
        
        Py_BEGIN_ALLOW_THREADS
        sipRes = new QScriptValue(sipCpp->newFunction(qtscript_func_handler, *a1, a2));
        Py_END_ALLOW_THREADS
        
        qtscript_func_wrapper(sipCpp, sipRes, a0);
%End

%End
    QScriptValue newVariant(const QVariant &);
%If (Qt_4_4_0 -)
    QScriptValue newVariant(const QScriptValue &, const QVariant &);
%End
    QScriptValue newRegExp(const QRegExp &);
    QScriptValue newObject();
%If (Qt_4_4_0 -)
    QScriptValue newObject(QScriptClass *, const QScriptValue &data = QScriptValue());
%End
    QScriptValue newArray(uint length = 0);
    QScriptValue newRegExp(const QString &, const QString &);
    QScriptValue newDate(qsreal);
    QScriptValue newDate(const QDateTime &);
    QScriptValue newQObject(QObject * /GetWrapper/, QScriptEngine::ValueOwnership ownership = QScriptEngine::QtOwnership, const QFlags<QScriptEngine::QObjectWrapOption> &options = 0);
%MethodCode
        // We have to handle the object ownership manually.
        Py_BEGIN_ALLOW_THREADS
        sipRes = new QScriptValue(sipCpp->newQObject(a0, a1, *a2));
        Py_END_ALLOW_THREADS
        
        if (a1 == QScriptEngine::ScriptOwnership || (a1 == QScriptEngine::AutoOwnership && !a0->parent()))
            sipTransferTo(a0Wrapper, sipSelf);
%End

%If (Qt_4_4_0 -)
    QScriptValue newQObject(const QScriptValue &, QObject * /GetWrapper/, QScriptEngine::ValueOwnership ownership = QScriptEngine::QtOwnership, const QFlags<QScriptEngine::QObjectWrapOption> &options = 0);
%MethodCode
        // We have to handle the object ownership manually.
        Py_BEGIN_ALLOW_THREADS
        sipRes = new QScriptValue(sipCpp->newQObject(*a0, a1, a2, *a3));
        Py_END_ALLOW_THREADS
        
        if (a2 == QScriptEngine::ScriptOwnership || (a2 == QScriptEngine::AutoOwnership && !a1->parent()))
            sipTransferTo(a1Wrapper, sipSelf);
%End

%End
    QScriptValue newQMetaObject(const QMetaObject *, const QScriptValue &ctor = QScriptValue());
    QScriptValue defaultPrototype(int) const;
    void setDefaultPrototype(int, const QScriptValue &);
    QScriptValue importExtension(const QString &);
    void collectGarbage();
    void setProcessEventsInterval(int);
    int processEventsInterval() const;
%If (Qt_4_4_0 -)
    bool isEvaluating() const;
%End
%If (Qt_4_4_0 -)
    void abortEvaluation(const QScriptValue &result = QScriptValue());
%End
%If (Qt_4_4_0 -)
    void clearExceptions();
%End
%If (Qt_4_4_0 -)
    QStringList availableExtensions() const;
%End
%If (Qt_4_4_0 -)
    QStringList importedExtensions() const;
%End
%If (Qt_4_4_0 -)
    void setAgent(QScriptEngineAgent *);
%End
%If (Qt_4_4_0 -)
    QScriptEngineAgent *agent() const;
%End
%If (Qt_4_4_0 -)
    QScriptString toStringHandle(const QString &);
%End
%If (Qt_4_5_0 -)
    void setGlobalObject(const QScriptValue &);
%End
%If (Qt_4_5_0 -)
    static QScriptSyntaxCheckResult checkSyntax(const QString &);
%End
%If (Qt_4_5_0 -)
    void installTranslatorFunctions(const QScriptValue &object = QScriptValue());
%End
%If (Qt_4_5_0 -)
    QScriptValue toObject(const QScriptValue &);
%End

signals:
%If (Qt_4_4_0 -)
    void signalHandlerException(const QScriptValue &);
%End

private:
    QScriptEngine(const QScriptEngine &);
};

%End
%If (Qt_4_3_0 -)
QFlags<QScriptEngine::QObjectWrapOption> operator|(QScriptEngine::QObjectWrapOption, QFlags<QScriptEngine::QObjectWrapOption>);
%End
%If (Qt_4_4_0 -)
bool qScriptConnect(QObject *, SIP_SIGNAL, const QScriptValue &, const QScriptValue &);
%End
%If (Qt_4_4_0 -)
bool qScriptDisconnect(QObject *, SIP_SIGNAL, const QScriptValue &, const QScriptValue &);
%End
%If (Qt_4_5_0 -)

class QScriptSyntaxCheckResult
{

%TypeHeaderCode
#include <qscriptengine.h>
%End

public:
    enum State
    {
        Error,
        Intermediate,
        Valid,
    };

    QScriptSyntaxCheckResult(const QScriptSyntaxCheckResult &);
    ~QScriptSyntaxCheckResult();
    QScriptSyntaxCheckResult::State state() const;
    int errorLineNumber() const;
    int errorColumnNumber() const;
    QString errorMessage() const;

private:
    QScriptSyntaxCheckResult();
};

%End
