// qxmlquery.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtXmlPatterns Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)

class QXmlQuery
{

%TypeHeaderCode
#include <qxmlquery.h>
%End

public:
%If (Qt_4_5_0 -)

    enum QueryLanguage
    {
        XQuery10,
        XSLT20,
    };

%End
    QXmlQuery();
    QXmlQuery(const QXmlQuery &);
    QXmlQuery(const QXmlNamePool &);
%If (Qt_4_5_0 -)
    QXmlQuery(QXmlQuery::QueryLanguage, const QXmlNamePool &pool = QXmlNamePool());
%End
    ~QXmlQuery();
    void setMessageHandler(QAbstractMessageHandler *);
    QAbstractMessageHandler *messageHandler() const;
    void setQuery(const QString &, const QUrl &documentUri = QUrl());
    void setQuery(QIODevice *, const QUrl &documentUri = QUrl());
    void setQuery(const QUrl &, const QUrl &baseUri = QUrl());
    QXmlNamePool namePool() const;
    void bindVariable(const QXmlName &, const QXmlItem &);
    void bindVariable(const QXmlName &, QIODevice *);
%If (Qt_4_5_0 -)
    void bindVariable(const QXmlName &, const QXmlQuery &);
%End
    void bindVariable(const QString &, const QXmlItem &);
    void bindVariable(const QString &, QIODevice *);
%If (Qt_4_5_0 -)
    void bindVariable(const QString &, const QXmlQuery &);
%End
    bool isValid() const;
    void evaluateTo(QXmlResultItems *) const;
    bool evaluateTo(QAbstractXmlReceiver *) const;
    bool evaluateTo(QStringList *) const /API=QString: - 2/;
    SIP_PYOBJECT evaluateToStringList() const /DocType="Py_v3:list-of-str;QStringList"/;
%MethodCode
        bool ok;
        QStringList *result = new QStringList;
        
        Py_BEGIN_ALLOW_THREADS
        ok = sipCpp->evaluateTo(result);
        Py_END_ALLOW_THREADS
        
        if (ok)
        {
            sipRes = sipConvertFromNewType(result, sipType_QStringList, NULL);
        }
        else
        {
            delete result;
            sipRes = Py_None;
            Py_INCREF(Py_None);
        }
%End

%If (Qt_4_5_0 -)
    bool evaluateTo(QIODevice *) const;
%End
%If (Qt_4_5_0 -)
    bool evaluateTo(QString *) const /API=QString: - 2/;
%End
%If (Qt_4_5_0 -)
    SIP_PYOBJECT evaluateToString() const /DocType="Py_v3:str;QString"/;
%MethodCode
        bool ok;
        QString *result = new QString;
        
        Py_BEGIN_ALLOW_THREADS
        ok = sipCpp->evaluateTo(result);
        Py_END_ALLOW_THREADS
        
        if (ok)
        {
            sipRes = sipConvertFromNewType(result, sipType_QString, NULL);
        }
        else
        {
            delete result;
            sipRes = Py_None;
            Py_INCREF(Py_None);
        }
%End

%End
    void setUriResolver(const QAbstractUriResolver *);
    const QAbstractUriResolver *uriResolver() const;
    void setFocus(const QXmlItem &);
%If (Qt_4_5_0 -)
    bool setFocus(const QUrl &);
%End
%If (Qt_4_5_0 -)
    bool setFocus(QIODevice *);
%End
%If (Qt_4_6_0 -)
    bool setFocus(const QString &);
%End
%If (Qt_4_5_0 -)
    void setInitialTemplateName(const QXmlName &);
%End
%If (Qt_4_5_0 -)
    void setInitialTemplateName(const QString &);
%End
%If (Qt_4_5_0 -)
    QXmlName initialTemplateName() const;
%End
%If (Qt_4_5_0 -)
    void setNetworkAccessManager(QNetworkAccessManager *);
%End
%If (Qt_4_5_0 -)
    QNetworkAccessManager *networkAccessManager() const;
%End
%If (Qt_4_5_0 -)
    QXmlQuery::QueryLanguage queryLanguage() const;
%End
};

%End
