// qabstractxmlnodemodel.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtXmlPatterns Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


%If (Qt_4_4_0 -)

class QXmlNodeModelIndex
{

%TypeHeaderCode
#include <qabstractxmlnodemodel.h>
%End

public:
    QXmlNodeModelIndex();
    QXmlNodeModelIndex(const QXmlNodeModelIndex &);
    bool operator==(const QXmlNodeModelIndex &) const;
    bool operator!=(const QXmlNodeModelIndex &) const;

    enum NodeKind
    {
        Attribute,
        Comment,
        Document,
        Element,
        Namespace,
        ProcessingInstruction,
        Text,
    };

    enum DocumentOrder
    {
        Precedes,
        Is,
        Follows,
    };

    qint64 data() const;
    SIP_PYOBJECT internalPointer() const;
%MethodCode
        Py_BEGIN_ALLOW_THREADS
        sipRes = reinterpret_cast<PyObject *>(sipCpp->internalPointer());
        Py_END_ALLOW_THREADS
%End

    const QAbstractXmlNodeModel *model() const;
    qint64 additionalData() const;
    bool isNull() const;
    long __hash__() const;
%MethodCode
        sipRes = qHash(*sipCpp);
%End
};

%End
%If (Qt_4_4_0 -)

class QAbstractXmlNodeModel
{

%TypeHeaderCode
#include <qabstractxmlnodemodel.h>
%End

public:
    enum SimpleAxis
    {
        Parent,
        FirstChild,
        PreviousSibling,
        NextSibling,
    };

    QAbstractXmlNodeModel();
    virtual ~QAbstractXmlNodeModel();
    virtual QUrl baseUri(const QXmlNodeModelIndex &) const = 0;
    virtual QUrl documentUri(const QXmlNodeModelIndex &) const = 0;
    virtual QXmlNodeModelIndex::NodeKind kind(const QXmlNodeModelIndex &) const = 0;
    virtual QXmlNodeModelIndex::DocumentOrder compareOrder(const QXmlNodeModelIndex &, const QXmlNodeModelIndex &) const = 0;
    virtual QXmlNodeModelIndex root(const QXmlNodeModelIndex &) const = 0;
    virtual QXmlName name(const QXmlNodeModelIndex &) const = 0;
    virtual QString stringValue(const QXmlNodeModelIndex &) const = 0;
    virtual QVariant typedValue(const QXmlNodeModelIndex &) const = 0;
    virtual QVector<QXmlName> namespaceBindings(const QXmlNodeModelIndex &) const = 0;
    virtual QXmlNodeModelIndex elementById(const QXmlName &) const = 0;
    virtual QVector<QXmlNodeModelIndex> nodesByIdref(const QXmlName &) const = 0;
%If (Qt_4_6_0 -)
    QSourceLocation sourceLocation(const QXmlNodeModelIndex &) const;
%End

protected:
    virtual QXmlNodeModelIndex nextFromSimpleAxis(QAbstractXmlNodeModel::SimpleAxis, const QXmlNodeModelIndex &) const = 0;
    virtual QVector<QXmlNodeModelIndex> attributes(const QXmlNodeModelIndex &) const = 0;
    QXmlNodeModelIndex createIndex(qint64) const;
    QXmlNodeModelIndex createIndex(qint64, qint64) const;
    QXmlNodeModelIndex createIndex(SIP_PYOBJECT, qint64 additionalData = 0) const [QXmlNodeModelIndex (void *pointer, qint64 additionalData = 0)];

private:
    QAbstractXmlNodeModel(const QAbstractXmlNodeModel &);
};

%End
%If (Qt_4_4_0 -)

class QXmlItem
{

%TypeHeaderCode
#include <qabstractxmlnodemodel.h>
%End

public:
    QXmlItem();
    QXmlItem(const QXmlItem &);
    QXmlItem(const QXmlNodeModelIndex &);
    QXmlItem(const QVariant &);
    ~QXmlItem();
    bool isNull() const;
    bool isNode() const;
    bool isAtomicValue() const;
    QVariant toAtomicValue() const;
    QXmlNodeModelIndex toNodeModelIndex() const;
};

%End
