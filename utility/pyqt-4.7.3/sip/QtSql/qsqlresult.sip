// qsqlresult.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtSql Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QSqlResult /Supertype=sip.wrapper/
{

%TypeHeaderCode
#include <qsqlresult.h>
%End

public:
    virtual ~QSqlResult();
    virtual QVariant handle() const;

protected:
    enum BindingSyntax
    {
        PositionalBinding,
        NamedBinding,
    };

    explicit QSqlResult(const QSqlDriver *);
    int at() const;
    QString lastQuery() const;
    QSqlError lastError() const;
    bool isValid() const;
    bool isActive() const;
    bool isSelect() const;
    bool isForwardOnly() const;
    const QSqlDriver *driver() const;
    virtual void setAt(int);
    virtual void setActive(bool);
    virtual void setLastError(const QSqlError &);
    virtual void setQuery(const QString &);
    virtual void setSelect(bool);
    virtual void setForwardOnly(bool);
    virtual bool exec() /PyName=exec_,ReleaseGIL/;
%If (Py_v3)
    virtual bool exec() /ReleaseGIL/;
%End
    virtual bool prepare(const QString &) /ReleaseGIL/;
    virtual bool savePrepare(const QString &);
    virtual void bindValue(int, const QVariant &, QSql::ParamType);
    virtual void bindValue(const QString &, const QVariant &, QSql::ParamType);
    void addBindValue(const QVariant &, QSql::ParamType);
    QVariant boundValue(const QString &) const;
    QVariant boundValue(int) const;
    QSql::ParamType bindValueType(const QString &) const;
    QSql::ParamType bindValueType(int) const;
    int boundValueCount() const;
    QVector<QVariant> &boundValues() const;
    QString executedQuery() const;
    QString boundValueName(int) const;
    void clear();
    bool hasOutValues() const;
    QSqlResult::BindingSyntax bindingSyntax() const;
    virtual QVariant data(int) = 0;
    virtual bool isNull(int) = 0;
    virtual bool reset(const QString &) = 0;
    virtual bool fetch(int) = 0 /ReleaseGIL/;
    virtual bool fetchNext() /ReleaseGIL/;
    virtual bool fetchPrevious() /ReleaseGIL/;
    virtual bool fetchFirst() = 0 /ReleaseGIL/;
    virtual bool fetchLast() = 0 /ReleaseGIL/;
    virtual int size() = 0;
    virtual int numRowsAffected() = 0;
    virtual QSqlRecord record() const;
    virtual QVariant lastInsertId() const;

private:
    QSqlResult(const QSqlResult &);
};
