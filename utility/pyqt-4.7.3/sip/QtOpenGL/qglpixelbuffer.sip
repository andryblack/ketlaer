// qglpixelbuffer.sip generated by MetaSIP on Fri Apr 16 11:32:08 2010
//
// This file is part of the QtOpenGL Python extension module.
//
// Copyright (c) 2010 Riverbank Computing Limited <info@riverbankcomputing.com>
// 
// This file is part of PyQt.
// 
// This file may be used under the terms of the GNU General Public
// License versions 2.0 or 3.0 as published by the Free Software
// Foundation and appearing in the files LICENSE.GPL2 and LICENSE.GPL3
// included in the packaging of this file.  Alternatively you may (at
// your option) use any later version of the GNU General Public
// License if such license has been publicly approved by Riverbank
// Computing Limited (or its successors, if any) and the KDE Free Qt
// Foundation. In addition, as a special exception, Riverbank gives you
// certain additional rights. These rights are described in the Riverbank
// GPL Exception version 1.1, which can be found in the file
// GPL_EXCEPTION.txt in this package.
// 
// Please review the following information to ensure GNU General
// Public Licensing requirements will be met:
// http://trolltech.com/products/qt/licenses/licensing/opensource/. If
// you are unsure which license is appropriate for your use, please
// review the following information:
// http://trolltech.com/products/qt/licenses/licensing/licensingoverview
// or contact the sales department at sales@riverbankcomputing.com.
// 
// This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
// WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.


class QGLPixelBuffer : QPaintDevice
{

%TypeHeaderCode
#include <qglpixelbuffer.h>
%End

public:
    QGLPixelBuffer(const QSize &, const QGLFormat &format = QGLFormat::defaultFormat(), QGLWidget *shareWidget = 0);
%If (Qt_4_2_0 -)
    QGLPixelBuffer(int, int, const QGLFormat &format = QGLFormat::defaultFormat(), QGLWidget *shareWidget = 0);
%End
    virtual ~QGLPixelBuffer();
    bool isValid() const;
    bool makeCurrent();
    bool doneCurrent();
    GLuint generateDynamicTexture() const;
    bool bindToDynamicTexture(GLuint);
    void releaseFromDynamicTexture();
    void updateDynamicTexture(GLuint) const;
    GLuint bindTexture(const QImage &, GLenum target = GL_TEXTURE_2D);
    GLuint bindTexture(const QPixmap &, GLenum target = GL_TEXTURE_2D);
    GLuint bindTexture(const QString &);
%If (Qt_4_4_0 -)
    void drawTexture(const QRectF &, GLuint, GLenum textureTarget = GL_TEXTURE_2D);
%End
%If (Qt_4_4_0 -)
    void drawTexture(const QPointF &, GLuint, GLenum textureTarget = GL_TEXTURE_2D);
%End
    void deleteTexture(GLuint);
    QSize size() const;
    Qt::HANDLE handle() const;
    QImage toImage() const;
    virtual QPaintEngine *paintEngine() const;
    QGLFormat format() const;
    static bool hasOpenGLPbuffers();

protected:
    virtual int metric(QPaintDevice::PaintDeviceMetric) const;
    virtual int devType() const;

private:
    QGLPixelBuffer(const QGLPixelBuffer &);
};
